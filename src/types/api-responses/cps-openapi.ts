/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/enrollments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List enrollments
         * @description A list of the names of each enrollment.
         */
        get: operations["get-enrollments"];
        put?: never;
        /**
         * Create an enrollment
         * @description Creates an enrollment that contains all the information about the process that your certificate goes through from the time you request it, through renewal, and as you obtain subsequent versions.
         */
        post: operations["post-enrollment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollments/{enrollmentId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        /**
         * Get an enrollment
         * @description Gets an enrollment.
         */
        get: operations["get-enrollment"];
        /**
         * Update an enrollment
         * @description Updates an enrollment with changes. Response type will vary depending on the type and impact of change. For example, changing SANs list may return HTTP 202 Accepted since the operation require a new certificate and network deployment operations, and thus cannot be completed without a change. On the contrary, for example a Technical Contact name change may return HTTP 200 OK assuming there are no active change and when the operation does not require a new certificate.
         */
        put: operations["put-enrollment"];
        post?: never;
        /**
         * Remove an enrollment
         * @description Removes an enrollment from CPS. Response type will vary depending on the state of the enrollment. Deleting an enrollment in the future or deleting when the enrollment has a certificate deployed to the network may return HTTP 202 Accepted. Deleting an enrollment which has not yet deployed certificate to the network will complete immediately and return HTTP 200 OK.
         */
        delete: operations["delete-enrollment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollments/{enrollmentId}/changes/{changeId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The change for this enrollment on which to perform the desired operation.
                 * @example {{changeId}}
                 */
                changeId: number;
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        /**
         * Get change status
         * @description Gets the status of a pending change.
         */
        get: operations["get-enrollment-change"];
        put?: never;
        post?: never;
        /**
         * Cancel a change
         * @description Cancels a pending change.
         */
        delete: operations["delete-enrollment-change"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollments/{enrollmentId}/changes/{changeId}/deployment-schedule": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The change for this enrollment on which to perform the desired operation.
                 * @example {{changeId}}
                 */
                changeId: number;
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        /**
         * Get a deployment schedule
         * @description Gets the current deployment schedule settings describing when a change deploys to the network.
         */
        get: operations["get-change-deployment-schedule"];
        /**
         * Update a deployment schedule
         * @description Updates the current deployment schedule.
         */
        put: operations["put-change-deployment-schedule"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollments/{enrollmentId}/changes/{changeId}/input/info/{allowedInputTypeParam}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description __Enum__ Found as the last part of `Change.allowedInput[].update` hypermedia URL. See [Change Input Content Type Mapping](https://techdocs.akamai.com/cps/reference/change-input-content-type-mapping) for details. Currently supported values include `change-management-info`, `lets-encrypt-challenges`, `post-verification-warnings`, `pre-verification-warnings`, `third-party-csr`.
                 * @example {{allowedInputTypeParam}}
                 */
                allowedInputTypeParam: "change-management-info" | "lets-encrypt-challenges" | "post-verification-warnings" | "pre-verification-warnings" | "third-party-csr";
                /**
                 * @description The change for this enrollment on which to perform the desired operation.
                 * @example {{changeId}}
                 */
                changeId: number;
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        /**
         * Get a change
         * @description Get detailed information of a pending change. Below is a sample where `allowedInput[].type` has the value `third-party-csr`. The acceptable `Accept` header depends on the value of the `allowedInput.type` for the Change instance. See [Change Input Content Type Mapping](https://techdocs.akamai.com/cps/reference/change-input-content-type-mapping) for details.
         */
        get: operations["get-change-allowed-input-param"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollments/{enrollmentId}/changes/{changeId}/input/update/{allowedInputTypeParam}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description __Enum__ Found as the last part of `Change.allowedInput[].update` hypermedia URL. See [Change Input Content Type Mapping](https://techdocs.akamai.com/cps/reference/change-input-content-type-mapping) for details. Currently supported values include `change-management-ack`, `lets-encrypt-challenges-completed`, `post-verification-warnings-ack`, `pre-verification-warnings-ack`, `third-party-cert-and-trust-chain`.
                 * @example {{allowedInputTypeParam}}
                 */
                allowedInputTypeParam: "change-management-ack" | "lets-encrypt-challenges-completed" | "post-verification-warnings-ack" | "pre-verification-warnings-ack" | "third-party-cert-and-trust-chain";
                /**
                 * @description The change for this enrollment on which to perform the desired operation.
                 * @example {{changeId}}
                 */
                changeId: number;
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update a change
         * @description Updates a pending change. Below is a sample where `allowedInput[].type` has the value `third-party-cert-and-trust-chain`. The acceptable `Content-Type` and `Accept` headers depends on the value of the `allowedInput.type` for the Change instance. See [Change Input Content Type Mapping](https://techdocs.akamai.com/cps/reference/change-input-content-type-mapping) for details.
         */
        post: operations["post-change-allowed-input-param"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollments/{enrollmentId}/deployments": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        /**
         * List deployments
         * @description Lists the deployments for an enrollment.
         */
        get: operations["get-deployments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollments/{enrollmentId}/deployments/production": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        /**
         * Get production deployment
         * @description Gets the enrollments deployed on the production network.
         */
        get: operations["get-deployments-production"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollments/{enrollmentId}/deployments/staging": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        /**
         * Get staging deployment
         * @description Gets the enrollments deployed on the staging network.
         */
        get: operations["get-deployment-staging"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollments/{enrollmentId}/dv-history": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        /**
         * Get DV history
         * @description Domain name Validation history for the enrollment.
         */
        get: operations["get-dv-history"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollments/{enrollmentId}/history/certificates": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        /**
         * Get certificate history
         * @description View the certificate history.
         */
        get: operations["get-history-certificates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollments/{enrollmentId}/history/changes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        /**
         * Get change history
         * @description Change history of an enrollment.
         */
        get: operations["get-history-changes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "get-enrollments": {
        parameters: {
            query: {
                /**
                 * @description Specify the contract on which to operate or view.
                 * @example {{contractId}}
                 */
                contractId: string;
                /**
                 * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
                 * @example {{accountSwitchKey}}
                 */
                accountSwitchKey?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "enrollments": [
                     *         {
                     *           "autoRenewalStartTime": null,
                     *           "certificateChainType": "default",
                     *           "certificateType": "third-party",
                     *           "changeManagement": true,
                     *           "enableMultiStackedCertificates": false,
                     *           "id": "10001",
                     *           "location": "/cps-api/enrollments/10001",
                     *           "maxAllowedSanNames": 100,
                     *           "maxAllowedWildcardSanNames": 100,
                     *           "orgId": "645263546",
                     *           "ra": "third-party",
                     *           "signatureAlgorithm": null,
                     *           "validationType": "third-party",
                     *           "assignedSlots": [
                     *             1234
                     *           ],
                     *           "slots": [
                     *             1234
                     *           ],
                     *           "stagingSlots": [
                     *             1234
                     *           ],
                     *           "adminContact": {
                     *             "addressLineOne": "150 Broadway",
                     *             "addressLineTwo": null,
                     *             "city": "Cambridge",
                     *             "country": "US",
                     *             "email": "email@example.com",
                     *             "firstName": "R1",
                     *             "lastName": "D1",
                     *             "organizationName": "Akamai",
                     *             "phone": "617-555-0111",
                     *             "postalCode": "02142",
                     *             "region": "MA",
                     *             "title": "Adminstrator"
                     *           },
                     *           "csr": {
                     *             "c": "US",
                     *             "cn": "www.example.com",
                     *             "l": "Cambridge",
                     *             "o": "Akamai",
                     *             "ou": "WebEx",
                     *             "preferredTrustChain": "dst-root-ca-x3",
                     *             "st": "MA",
                     *             "sans": [
                     *               "san1.example.com",
                     *               "san2.example.com",
                     *               "san3.example.com",
                     *               "www.example.com"
                     *             ]
                     *           },
                     *           "networkConfiguration": {
                     *             "geography": "core",
                     *             "mustHaveCiphers": "ak-akamai-2020q1",
                     *             "ocspStapling": "on",
                     *             "preferredCiphers": "ak-akamai-2020q1",
                     *             "quicEnabled": false,
                     *             "secureNetwork": "enhanced-tls",
                     *             "sniOnly": true,
                     *             "disallowedTlsVersions": [
                     *               "TLSv1",
                     *               "TLSv1_1"
                     *             ],
                     *             "clientMutualAuthentication": {
                     *               "setId": "Custom_CPS-6134b_B-3-1AHBENT.xml",
                     *               "authenticationOptions": {
                     *                 "sendCaListToClient": false,
                     *                 "ocsp": {
                     *                   "enabled": false
                     *                 }
                     *               }
                     *             },
                     *             "dnsNameSettings": {
                     *               "cloneDnsNames": false,
                     *               "dnsNames": [
                     *                 "san2.example.com",
                     *                 "san1.example.com"
                     *               ]
                     *             }
                     *           },
                     *           "org": {
                     *             "addressLineOne": "150 Broadway",
                     *             "addressLineTwo": null,
                     *             "city": "Cambridge",
                     *             "country": "US",
                     *             "name": "Akamai Technologies",
                     *             "phone": "617-555-0111",
                     *             "postalCode": "02142",
                     *             "region": "MA"
                     *           },
                     *           "techContact": {
                     *             "addressLineOne": "150 Broadway",
                     *             "addressLineTwo": null,
                     *             "city": "Cambridge",
                     *             "country": "US",
                     *             "email": "email@example.com",
                     *             "firstName": "R2",
                     *             "lastName": "D2",
                     *             "organizationName": "Akamai",
                     *             "phone": "617-555-0111",
                     *             "postalCode": "02142",
                     *             "region": "MA",
                     *             "title": "Technical Engineer"
                     *           },
                     *           "thirdParty": {
                     *             "excludeSans": false
                     *           },
                     *           "pendingChanges": [
                     *             {
                     *               "changeType": "new-certificate",
                     *               "location": "/cps-api/enrollments/10001/changes/10002"
                     *             }
                     *           ]
                     *         }
                     *       ]
                     *     } */
                    "application/vnd.akamai.cps.enrollments.v11+json": {
                        /** @description The actual list of enrollments. */
                        enrollments: {
                            /** @description Contact information for the certificate administrator that you want to use as a contact at your company. */
                            adminContact?: {
                                /** @description The address of your organization. */
                                addressLineOne?: string | null;
                                /** @description The address of your organization. */
                                addressLineTwo?: string | null;
                                /** @description The city where your organization resides. */
                                city?: string | null;
                                /** @description The country where your organization resides. */
                                country?: string | null;
                                /** @description The email address of the administrator who you want to use as a contact at your company. */
                                email?: string | null;
                                /** @description The first name of the administrator who you want to use as a contact at your company. */
                                firstName?: string | null;
                                /** @description The last name of the administrator who you want to use as a contact at your company. */
                                lastName?: string | null;
                                /** @description The name of your organization. */
                                organizationName?: string | null;
                                /** @description The phone number of your organization. */
                                phone?: string | null;
                                /** @description The postal code of your organization. */
                                postalCode?: string | null;
                                /** @description The region of your organization, typically a state or province. */
                                region?: string | null;
                                /** @description The title of the administrator who you want to use as a contact at your company. */
                                title?: string | null;
                            } | null;
                            /** @description Slots where the certificate either will be deployed or is already deployed. */
                            assignedSlots?: number[] | null;
                            /** @description The specific date on which the renewal automatically starts for the enrollment. */
                            autoRenewalStartTime?: string | null;
                            /**
                             * @description Certificate trust chain type.
                             * @enum {string|null}
                             */
                            certificateChainType?: "default" | "symantec1kroot" | null;
                            /**
                             * @description Either `san`, `single`, `wildcard`, `wildcard-san`, or `third-party`. See [Enrollment.validationType Values](#validationtype) for details.
                             * @enum {string}
                             */
                            certificateType: "san" | "single" | "wildcard" | "wildcard-san" | "third-party";
                            /** @description If you turn change management on for an enrollment, it stops CPS from deploying the certificate to the network until you acknowledge that you are ready to deploy the certificate. You can test the certificate outside of CPS, on the Edge Staging Network (ESN), to make sure it works in your environment and then deploy the certificate. The ESN is a small network of Akamai edge servers built to simulate Akamai's production network to test most of your site or application functionality with current production version configuration options and functions. For more information on the ESN, see the [Edge Staging Network User Guide](https://control.akamai.com/dl/customers/other/EDGESERV/ESN-User-Guide.pdf). You can also contact your account representative with questions or issues with your service on the ESN. */
                            changeManagement: boolean;
                            /** @description When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate. */
                            csr: {
                                /** @description The country code for the country where your organization is located. */
                                c?: string | null;
                                /** @description The common name (CN) you want to use for the certificate in the Common Name field. The domain name you specify here must be owned or have legal rights to use the domain by the company you enter in the Organization field in this tab. The company that owns the domain name must be a legally incorporated entity and be active and in good standing. */
                                cn: string;
                                /** @description Your city in the locality (city). */
                                l?: string | null;
                                /** @description The name of your company or organization. Enter the name as it appears in all legal documents and as it appears in the legal entity filing. */
                                o?: string | null;
                                /** @description Your organizational unit. */
                                ou?: string | null;
                                /** @description For the Let's Encrypt Domain Validated (DV) SAN certificates, the customer may select one of the trust chain options supported by Let's Encrypt, or not fill out this field. The preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default. */
                                preferredTrustChain?: string | null;
                                /** @description Additional common names (CN) to create a Subject Alternative Names (SAN) list. */
                                sans?: string[] | null;
                                /** @description Your state or province. */
                                st?: string | null;
                            };
                            /** @description Enable Dual-Stacked certificate deployment for this enrollment. */
                            enableMultiStackedCertificates: boolean;
                            /** @description The unique identifier of the enrollment. */
                            id?: string | null;
                            /** @description The URI path to the enrollment. The last segment of the URI path serves as a unique identifier for the enrollment. */
                            location?: string | null;
                            /** @description Maximum number of SAN names supported for this enrollment type. */
                            maxAllowedSanNames?: number | null;
                            /** @description Maximum number of Wildcard SAN names supported for this enrollment type. */
                            maxAllowedWildcardSanNames?: number | null;
                            /** @description Settings that specify any network information and TLS Metadata you want CPS to use to push the completed certificate to the network. */
                            networkConfiguration: {
                                /** @description The configuration for client mutual authentication. Specifies  the trust chain that is used to verify client certificates and some configuration  options. */
                                clientMutualAuthentication?: {
                                    /** @description Contains the configuration options for the selected trust chain. */
                                    authenticationOptions?: {
                                        /** @description Whether you want to enable OCSP stapling for client certificates. */
                                        ocsp?: {
                                            /** @description Whether the OCSP stapling is enabled. */
                                            enabled?: boolean | null;
                                        } | null;
                                        /** @description Whether you want to enable the server to send the certificate authority (CA) list to the client. */
                                        sendCaListToClient?: boolean | null;
                                    } | null;
                                    /** @description The identifier of the set of trust chains, created in the Trust Chain Manager. */
                                    setId?: string | null;
                                } | null;
                                /** @description Specify the TLS protocol versions you want to disallow. */
                                disallowedTlsVersions?: string[] | null;
                                /** @description DNS name settings. */
                                dnsNameSettings?: {
                                    /** @description Enable if you want CPS to direct traffic using all the SANs listed in the SANs parameter when you created your enrollment. */
                                    cloneDnsNames: boolean;
                                    /** @description Names served by SNI-only enabled enrollments. */
                                    dnsNames?: string[] | null;
                                } | null;
                                /**
                                 * @description Use `core` to specify worldwide (includes China and Russia), `china+core` to specify worldwide and  China, and 'russia+core` to specify worldwide and Russia. You can only use this setting to include China and Russia if your Akamai contract specifies your ability to do so and you have approval from the Chinese and Russian government.
                                 * @enum {string}
                                 */
                                geography: "core" | "china+core" | "russia+core";
                                /** @description Ciphers that you definitely want to include for your enrollment while deploying it on the network. Defaults to `ak-akamai-default` when it is not set. */
                                mustHaveCiphers?: string | null;
                                /**
                                 * @description Enable OCSP stapling for the enrollment. OCSP Stapling improves performance by including a valid OCSP response in every TLS handshake. Specify OCSP Stapling if you want to improve performance by allowing the visitors to your site to query the Online Certificate Status Protocol (OCSP) server at regular intervals to obtain a signed time-stamped OCSP response. This response must be signed by the CA, not the server, therefore ensuring security. Disable OSCP Stapling if you want visitors to your site to contact the CA directly for an OSCP response. OCSP allows you to obtain the revocation status of a certificate. We recommend all customers enable this feature. Use `on`, `off` or `not-set`.
                                 * @enum {string|null}
                                 */
                                ocspStapling?: "on" | "off" | "not-set" | null;
                                /** @description Ciphers that you preferably want to include for your enrollment while deploying it on the network. Defaults to `ak-akamai-default` when it is not set. */
                                preferredCiphers?: string | null;
                                /** @description Set to true to enable QUIC protocol. */
                                quicEnabled: boolean;
                                /**
                                 * @description Set the type of deployment network you want to use. Set Standard TLS to deploy your certificate to Akamai's standard secure network. It is not PCI compliant. Set Enhanced TLS to deploy your certificate to Akamai's more secure network with PCI compliance capability.
                                 * @enum {string}
                                 */
                                secureNetwork: "enhanced-tls" | "standard-tls";
                                /** @description SNI settings for your enrollment. Set to `true` to enable SNI-only for the enrollment. This setting cannot be changed once an enrollment is created. */
                                sniOnly: boolean;
                            };
                            /** @description Your organization information. */
                            org?: {
                                /** @description The address of your organization. */
                                addressLineOne?: string | null;
                                /** @description The address of your organization. */
                                addressLineTwo?: string | null;
                                /** @description The city where your organization resides. */
                                city?: string | null;
                                /** @description The country where your organization resides. */
                                country?: string | null;
                                /** @description The name of your organization. */
                                name?: string | null;
                                /** @description The phone number of the administrator who you want to use as a contact at your company. */
                                phone?: string | null;
                                /** @description The postal code of your organization. */
                                postalCode?: string | null;
                                /** @description The region where your organization resides. */
                                region?: string | null;
                            } | null;
                            /** @description The Digicert unique identifier for the organization. If an orgId value is provided in a PUT or POST request, it is recommended to leave the org, techContact, and adminContact fields null. */
                            orgId?: number | null;
                            /** @description Returns the Changes currently pending in CPS. The last item in the array is the most recent change. */
                            pendingChanges?: {
                                /**
                                 * @description Pending change action.
                                 * @enum {string|null}
                                 */
                                changeType?: "new-certificate" | "modify-certificate" | "modify-san" | "renewal" | null;
                                /** @description Location to fetch related change information. */
                                location: string;
                            }[] | null;
                            /** @description Slots where the certificate is deployed on the production network. */
                            productionSlots?: number[] | null;
                            /**
                             * @description The registration authority or certificate authority (CA) you want to use to obtain a certificate. A CA is a trusted entity that signs certificates and can vouch for the identity of a website. Either `symantec`,  `lets-encrypt`, or `third-party`.
                             * @enum {string}
                             */
                            ra: "symantec" | "lets-encrypt" | "third-party";
                            /**
                             * @description The SHA (Secure Hash Algorithm) function. NSA designed this function to produce a hash of certificate contents, which is used in a digital signature.  Specify either `SHA-1` or `SHA-256`. We recommend you use SHA-256.
                             * @enum {string|null}
                             */
                            signatureAlgorithm?: "SHA-1" | "SHA-256" | null;
                            /** @description Slots where the certificate is deployed on the staging network. */
                            stagingSlots?: number[] | null;
                            /** @description Contact information for an administrator at Akamai. */
                            techContact?: {
                                /** @description The address for an administrator at Akamai. */
                                addressLineOne?: string | null;
                                /** @description The address for an administrator at Akamai. */
                                addressLineTwo?: string | null;
                                /** @description The city for an administrator at Akamai. */
                                city?: string | null;
                                /** @description The country for an administrator at Akamai. */
                                country?: string | null;
                                /** @description The email address of the administrator who you want to use as a contact at your company. */
                                email?: string | null;
                                /** @description The first name of the technical contact who you want to use within Akamai. This is the person you work closest with at Akamai who can verify the certificate request. This is the person the CA calls if there are any issues with the certificate and they cannot reach the administrator. */
                                firstName?: string | null;
                                /** @description The last name of the technical contact who you want to use within Akamai. */
                                lastName?: string | null;
                                /** @description The name of your organization in Akamai where your technical contact works. */
                                organizationName?: string | null;
                                /** @description The phone number of the technical contact who you want to use within Akamai. */
                                phone?: string | null;
                                /** @description The postal code for an administrator at Akamai. */
                                postalCode?: string | null;
                                /** @description The region for an administrator at Akamai. */
                                region?: string | null;
                                /** @description The title for an administrator at Akamai. */
                                title?: string | null;
                            } | null;
                            /** @description Specifies that you want to use a third party certificate. This is any certificate that is not issued through CPS. */
                            thirdParty?: {
                                /** @description If this is true, then the SANs in the enrollment do not appear in the CSR that CPS submits to the CA. */
                                excludeSans: boolean;
                            } | null;
                            /**
                             * @description There are three types of validation. Domain Validation (DV), which is the lowest level of validation. The CA validates that you have control of the domain. CPS supports DV certificates issued by Let's Encrypt, a free, automated, and open CA, run for public benefit. Organization Validation (OV), which is the next level of validation. The CA validates that you have control of the domain. Extended Validation (EV), which is the highest level of validation in which you must have signed letters and notaries sent to the CA before signing. You can also specify third party as a type of validation, if you want to use a signed certificate obtained by you from a CA not supported by CPS.  Either `dv`, `ev`, `ov`, or `third-party`.
                             * @enum {string}
                             */
                            validationType: "dv" | "ev" | "ov" | "third-party";
                        }[];
                    };
                };
            };
        };
    };
    "post-enrollment": {
        parameters: {
            query: {
                /**
                 * @description Specify the contract on which to operate or view.
                 * @example {{contractId}}
                 */
                contractId: string;
                /**
                 * @description Don't deploy after this date (UTC).
                 * @example {{deploy-not-after}}
                 */
                "deploy-not-after"?: string;
                /**
                 * @description Don't deploy before this date (UTC).
                 * @example {{deploy-not-before}}
                 */
                "deploy-not-before"?: string;
                /**
                 * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
                 * @example {{accountSwitchKey}}
                 */
                accountSwitchKey?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "autoRenewalStartTime": null,
                 *       "certificateChainType": "default",
                 *       "certificateType": "third-party",
                 *       "changeManagement": true,
                 *       "enableMultiStackedCertificates": false,
                 *       "id": "10001",
                 *       "location": "/cps-api/enrollments/10001",
                 *       "maxAllowedSanNames": 100,
                 *       "maxAllowedWildcardSanNames": 100,
                 *       "orgId": "645263546",
                 *       "ra": "third-party",
                 *       "signatureAlgorithm": null,
                 *       "validationType": "third-party",
                 *       "assignedSlots": [
                 *         1234
                 *       ],
                 *       "productionSlots": [
                 *         1234
                 *       ],
                 *       "stagingSlots": [
                 *         1234
                 *       ],
                 *       "adminContact": {
                 *         "addressLineOne": "150 Broadway",
                 *         "addressLineTwo": null,
                 *         "city": "Cambridge",
                 *         "country": "US",
                 *         "email": "email@example.com",
                 *         "firstName": "R1",
                 *         "lastName": "D1",
                 *         "organizationName": "Akamai",
                 *         "phone": "617-555-0111",
                 *         "postalCode": "02142",
                 *         "region": "MA",
                 *         "title": "Adminstrator"
                 *       },
                 *       "csr": {
                 *         "c": "US",
                 *         "cn": "www.example.com",
                 *         "l": "Cambridge",
                 *         "o": "Akamai",
                 *         "ou": "WebEx",
                 *         "preferredTrustChain": "dst-root-ca-x3",
                 *         "st": "MA",
                 *         "sans": [
                 *           "san1.example.com",
                 *           "san2.example.com",
                 *           "san3.example.com",
                 *           "www.example.com"
                 *         ]
                 *       },
                 *       "networkConfiguration": {
                 *         "geography": "core",
                 *         "mustHaveCiphers": "ak-akamai-2020q1",
                 *         "ocspStapling": "on",
                 *         "preferredCiphers": "ak-akamai-2020q1",
                 *         "quicEnabled": false,
                 *         "secureNetwork": "enhanced-tls",
                 *         "sniOnly": true,
                 *         "disallowedTlsVersions": [
                 *           "TLSv1",
                 *           "TLSv1_1"
                 *         ],
                 *         "clientMutualAuthentication": {
                 *           "setId": "Custom_CPS-6134b_B-3-1AHBENT.xml",
                 *           "authenticationOptions": {
                 *             "sendCaListToClient": false,
                 *             "ocsp": {
                 *               "enabled": false
                 *             }
                 *           }
                 *         },
                 *         "dnsNameSettings": {
                 *           "cloneDnsNames": false,
                 *           "dnsNames": [
                 *             "san2.example.com",
                 *             "san1.example.com"
                 *           ]
                 *         }
                 *       },
                 *       "org": {
                 *         "addressLineOne": "150 Broadway",
                 *         "addressLineTwo": null,
                 *         "city": "Cambridge",
                 *         "country": "US",
                 *         "name": "Akamai Technologies",
                 *         "phone": "617-555-0111",
                 *         "postalCode": "02142",
                 *         "region": "MA"
                 *       },
                 *       "techContact": {
                 *         "addressLineOne": "150 Broadway",
                 *         "addressLineTwo": null,
                 *         "city": "Cambridge",
                 *         "country": "US",
                 *         "email": "email@example.com",
                 *         "firstName": "R2",
                 *         "lastName": "D2",
                 *         "organizationName": "Akamai",
                 *         "phone": "617-555-0111",
                 *         "postalCode": "02142",
                 *         "region": "MA",
                 *         "title": "Technical Engineer"
                 *       },
                 *       "thirdParty": {
                 *         "excludeSans": false
                 *       },
                 *       "pendingChanges": [
                 *         {
                 *           "changeType": "new-certificate",
                 *           "location": "/cps-api/enrollments/10001/changes/10002"
                 *         }
                 *       ]
                 *     } */
                "application/vnd.akamai.cps.enrollment.v11+json": {
                    /** @description Contact information for the certificate administrator that you want to use as a contact at your company. */
                    adminContact?: {
                        /** @description The address of your organization. */
                        addressLineOne?: string | null;
                        /** @description The address of your organization. */
                        addressLineTwo?: string | null;
                        /** @description The city where your organization resides. */
                        city?: string | null;
                        /** @description The country where your organization resides. */
                        country?: string | null;
                        /** @description The email address of the administrator who you want to use as a contact at your company. */
                        email?: string | null;
                        /** @description The first name of the administrator who you want to use as a contact at your company. */
                        firstName?: string | null;
                        /** @description The last name of the administrator who you want to use as a contact at your company. */
                        lastName?: string | null;
                        /** @description The name of your organization. */
                        organizationName?: string | null;
                        /** @description The phone number of your organization. */
                        phone?: string | null;
                        /** @description The postal code of your organization. */
                        postalCode?: string | null;
                        /** @description The region of your organization, typically a state or province. */
                        region?: string | null;
                        /** @description The title of the administrator who you want to use as a contact at your company. */
                        title?: string | null;
                    } | null;
                    /** @description Slots where the certificate either will be deployed or is already deployed. */
                    assignedSlots?: number[] | null;
                    /** @description The specific date on which the renewal automatically starts for the enrollment. */
                    autoRenewalStartTime?: string | null;
                    /**
                     * @description Certificate trust chain type.
                     * @enum {string|null}
                     */
                    certificateChainType?: "default" | "symantec1kroot" | null;
                    /**
                     * @description Either `san`, `single`, `wildcard`, `wildcard-san`, or `third-party`. See [Enrollment.validationType Values](#validationtype) for details.
                     * @enum {string}
                     */
                    certificateType: "san" | "single" | "wildcard" | "wildcard-san" | "third-party";
                    /** @description If you turn change management on for an enrollment, it stops CPS from deploying the certificate to the network until you acknowledge that you are ready to deploy the certificate. You can test the certificate outside of CPS, on the Edge Staging Network (ESN), to make sure it works in your environment and then deploy the certificate. The ESN is a small network of Akamai edge servers built to simulate Akamai's production network to test most of your site or application functionality with current production version configuration options and functions. For more information on the ESN, see the [Edge Staging Network User Guide](https://control.akamai.com/dl/customers/other/EDGESERV/ESN-User-Guide.pdf). You can also contact your account representative with questions or issues with your service on the ESN. */
                    changeManagement: boolean;
                    /** @description When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate. */
                    csr: {
                        /** @description The country code for the country where your organization is located. */
                        c?: string | null;
                        /** @description The common name (CN) you want to use for the certificate in the Common Name field. The domain name you specify here must be owned or have legal rights to use the domain by the company you enter in the Organization field in this tab. The company that owns the domain name must be a legally incorporated entity and be active and in good standing. */
                        cn: string;
                        /** @description Your city in the locality (city). */
                        l?: string | null;
                        /** @description The name of your company or organization. Enter the name as it appears in all legal documents and as it appears in the legal entity filing. */
                        o?: string | null;
                        /** @description Your organizational unit. */
                        ou?: string | null;
                        /** @description For the Let's Encrypt Domain Validated (DV) SAN certificates, the customer may select one of the trust chain options supported by Let's Encrypt, or not fill out this field. The preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default. */
                        preferredTrustChain?: string | null;
                        /** @description Additional common names (CN) to create a Subject Alternative Names (SAN) list. */
                        sans?: string[] | null;
                        /** @description Your state or province. */
                        st?: string | null;
                    };
                    /** @description Enable Dual-Stacked certificate deployment for this enrollment. */
                    enableMultiStackedCertificates: boolean;
                    /** @description The unique identifier of the enrollment. */
                    id?: string | null;
                    /** @description The URI path to the enrollment. The last segment of the URI path serves as a unique identifier for the enrollment. */
                    location?: string | null;
                    /** @description Maximum number of SAN names supported for this enrollment type. */
                    maxAllowedSanNames?: number | null;
                    /** @description Maximum number of Wildcard SAN names supported for this enrollment type. */
                    maxAllowedWildcardSanNames?: number | null;
                    /** @description Settings that specify any network information and TLS Metadata you want CPS to use to push the completed certificate to the network. */
                    networkConfiguration: {
                        /** @description The configuration for client mutual authentication. Specifies  the trust chain that is used to verify client certificates and some configuration  options. */
                        clientMutualAuthentication?: {
                            /** @description Contains the configuration options for the selected trust chain. */
                            authenticationOptions?: {
                                /** @description Whether you want to enable OCSP stapling for client certificates. */
                                ocsp?: {
                                    /** @description Whether the OCSP stapling is enabled. */
                                    enabled?: boolean | null;
                                } | null;
                                /** @description Whether you want to enable the server to send the certificate authority (CA) list to the client. */
                                sendCaListToClient?: boolean | null;
                            } | null;
                            /** @description The identifier of the set of trust chains, created in the Trust Chain Manager. */
                            setId?: string | null;
                        } | null;
                        /** @description Specify the TLS protocol versions you want to disallow. */
                        disallowedTlsVersions?: string[] | null;
                        /** @description DNS name settings. */
                        dnsNameSettings?: {
                            /** @description Enable if you want CPS to direct traffic using all the SANs listed in the SANs parameter when you created your enrollment. */
                            cloneDnsNames: boolean;
                            /** @description Names served by SNI-only enabled enrollments. */
                            dnsNames?: string[] | null;
                        } | null;
                        /**
                         * @description Use `core` to specify worldwide (includes China and Russia), `china+core` to specify worldwide and  China, and 'russia+core` to specify worldwide and Russia. You can only use this setting to include China and Russia if your Akamai contract specifies your ability to do so and you have approval from the Chinese and Russian government.
                         * @enum {string}
                         */
                        geography: "core" | "china+core" | "russia+core";
                        /** @description Ciphers that you definitely want to include for your enrollment while deploying it on the network. Defaults to `ak-akamai-default` when it is not set. */
                        mustHaveCiphers?: string | null;
                        /**
                         * @description Enable OCSP stapling for the enrollment. OCSP Stapling improves performance by including a valid OCSP response in every TLS handshake. Specify OCSP Stapling if you want to improve performance by allowing the visitors to your site to query the Online Certificate Status Protocol (OCSP) server at regular intervals to obtain a signed time-stamped OCSP response. This response must be signed by the CA, not the server, therefore ensuring security. Disable OSCP Stapling if you want visitors to your site to contact the CA directly for an OSCP response. OCSP allows you to obtain the revocation status of a certificate. We recommend all customers enable this feature. Use `on`, `off` or `not-set`.
                         * @enum {string|null}
                         */
                        ocspStapling?: "on" | "off" | "not-set" | null;
                        /** @description Ciphers that you preferably want to include for your enrollment while deploying it on the network. Defaults to `ak-akamai-default` when it is not set. */
                        preferredCiphers?: string | null;
                        /** @description Set to true to enable QUIC protocol. */
                        quicEnabled: boolean;
                        /**
                         * @description Set the type of deployment network you want to use. Set Standard TLS to deploy your certificate to Akamai's standard secure network. It is not PCI compliant. Set Enhanced TLS to deploy your certificate to Akamai's more secure network with PCI compliance capability.
                         * @enum {string}
                         */
                        secureNetwork: "enhanced-tls" | "standard-tls";
                        /** @description SNI settings for your enrollment. Set to `true` to enable SNI-only for the enrollment. This setting cannot be changed once an enrollment is created. */
                        sniOnly: boolean;
                    };
                    /** @description Your organization information. */
                    org?: {
                        /** @description The address of your organization. */
                        addressLineOne?: string | null;
                        /** @description The address of your organization. */
                        addressLineTwo?: string | null;
                        /** @description The city where your organization resides. */
                        city?: string | null;
                        /** @description The country where your organization resides. */
                        country?: string | null;
                        /** @description The name of your organization. */
                        name?: string | null;
                        /** @description The phone number of the administrator who you want to use as a contact at your company. */
                        phone?: string | null;
                        /** @description The postal code of your organization. */
                        postalCode?: string | null;
                        /** @description The region where your organization resides. */
                        region?: string | null;
                    } | null;
                    /** @description The Digicert unique identifier for the organization. If an orgId value is provided in a PUT or POST request, it is recommended to leave the org, techContact, and adminContact fields null. */
                    orgId?: number | null;
                    /** @description Returns the Changes currently pending in CPS. The last item in the array is the most recent change. */
                    pendingChanges?: {
                        /**
                         * @description Pending change action.
                         * @enum {string|null}
                         */
                        changeType?: "new-certificate" | "modify-certificate" | "modify-san" | "renewal" | null;
                        /** @description Location to fetch related change information. */
                        location: string;
                    }[] | null;
                    /** @description Slots where the certificate is deployed on the production network. */
                    productionSlots?: number[] | null;
                    /**
                     * @description The registration authority or certificate authority (CA) you want to use to obtain a certificate. A CA is a trusted entity that signs certificates and can vouch for the identity of a website. Either `symantec`,  `lets-encrypt`, or `third-party`.
                     * @enum {string}
                     */
                    ra: "symantec" | "lets-encrypt" | "third-party";
                    /**
                     * @description The SHA (Secure Hash Algorithm) function. NSA designed this function to produce a hash of certificate contents, which is used in a digital signature.  Specify either `SHA-1` or `SHA-256`. We recommend you use SHA-256.
                     * @enum {string|null}
                     */
                    signatureAlgorithm?: "SHA-1" | "SHA-256" | null;
                    /** @description Slots where the certificate is deployed on the staging network. */
                    stagingSlots?: number[] | null;
                    /** @description Contact information for an administrator at Akamai. */
                    techContact?: {
                        /** @description The address for an administrator at Akamai. */
                        addressLineOne?: string | null;
                        /** @description The address for an administrator at Akamai. */
                        addressLineTwo?: string | null;
                        /** @description The city for an administrator at Akamai. */
                        city?: string | null;
                        /** @description The country for an administrator at Akamai. */
                        country?: string | null;
                        /** @description The email address of the administrator who you want to use as a contact at your company. */
                        email?: string | null;
                        /** @description The first name of the technical contact who you want to use within Akamai. This is the person you work closest with at Akamai who can verify the certificate request. This is the person the CA calls if there are any issues with the certificate and they cannot reach the administrator. */
                        firstName?: string | null;
                        /** @description The last name of the technical contact who you want to use within Akamai. */
                        lastName?: string | null;
                        /** @description The name of your organization in Akamai where your technical contact works. */
                        organizationName?: string | null;
                        /** @description The phone number of the technical contact who you want to use within Akamai. */
                        phone?: string | null;
                        /** @description The postal code for an administrator at Akamai. */
                        postalCode?: string | null;
                        /** @description The region for an administrator at Akamai. */
                        region?: string | null;
                        /** @description The title for an administrator at Akamai. */
                        title?: string | null;
                    } | null;
                    /** @description Specifies that you want to use a third party certificate. This is any certificate that is not issued through CPS. */
                    thirdParty?: {
                        /** @description If this is true, then the SANs in the enrollment do not appear in the CSR that CPS submits to the CA. */
                        excludeSans: boolean;
                    } | null;
                    /**
                     * @description There are three types of validation. Domain Validation (DV), which is the lowest level of validation. The CA validates that you have control of the domain. CPS supports DV certificates issued by Let's Encrypt, a free, automated, and open CA, run for public benefit. Organization Validation (OV), which is the next level of validation. The CA validates that you have control of the domain. Extended Validation (EV), which is the highest level of validation in which you must have signed letters and notaries sent to the CA before signing. You can also specify third party as a type of validation, if you want to use a signed certificate obtained by you from a CA not supported by CPS.  Either `dv`, `ev`, `ov`, or `third-party`.
                     * @enum {string}
                     */
                    validationType: "dv" | "ev" | "ov" | "third-party";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "enrollment": "/cps/v2/enrollments/10002",
                     *       "changes": [
                     *         "/cps/v2/enrollments/10002/changes/10002"
                     *       ]
                     *     } */
                    "application/vnd.akamai.cps.enrollment-status.v1+json": {
                        changes: string[];
                        enrollment: string;
                    };
                };
            };
        };
    };
    "get-enrollment": {
        parameters: {
            query?: {
                /**
                 * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
                 * @example {{accountSwitchKey}}
                 */
                accountSwitchKey?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "autoRenewalStartTime": null,
                     *       "certificateChainType": "default",
                     *       "certificateType": "third-party",
                     *       "changeManagement": true,
                     *       "enableMultiStackedCertificates": false,
                     *       "id": "10001",
                     *       "location": "/cps-api/enrollments/10001",
                     *       "maxAllowedSanNames": 100,
                     *       "maxAllowedWildcardSanNames": 100,
                     *       "orgId": "645263546",
                     *       "ra": "third-party",
                     *       "signatureAlgorithm": null,
                     *       "validationType": "third-party",
                     *       "assignedSlots": [
                     *         1234
                     *       ],
                     *       "productionSlots": [
                     *         1234
                     *       ],
                     *       "stagingSlots": [
                     *         1234
                     *       ],
                     *       "adminContact": {
                     *         "addressLineOne": "150 Broadway",
                     *         "addressLineTwo": null,
                     *         "city": "Cambridge",
                     *         "country": "US",
                     *         "email": "email@example.com",
                     *         "firstName": "R1",
                     *         "lastName": "D1",
                     *         "organizationName": "Akamai",
                     *         "phone": "617-555-0111",
                     *         "postalCode": "02142",
                     *         "region": "MA",
                     *         "title": "Adminstrator"
                     *       },
                     *       "csr": {
                     *         "c": "US",
                     *         "cn": "www.example.com",
                     *         "l": "Cambridge",
                     *         "o": "Akamai",
                     *         "ou": "WebEx",
                     *         "preferredTrustChain": "dst-root-ca-x3",
                     *         "st": "MA",
                     *         "sans": [
                     *           "san1.example.com",
                     *           "san2.example.com",
                     *           "san3.example.com",
                     *           "www.example.com"
                     *         ]
                     *       },
                     *       "networkConfiguration": {
                     *         "geography": "core",
                     *         "mustHaveCiphers": "ak-akamai-2020q1",
                     *         "ocspStapling": "on",
                     *         "preferredCiphers": "ak-akamai-2020q1",
                     *         "quicEnabled": false,
                     *         "secureNetwork": "enhanced-tls",
                     *         "sniOnly": true,
                     *         "disallowedTlsVersions": [
                     *           "TLSv1",
                     *           "TLSv1_1"
                     *         ],
                     *         "clientMutualAuthentication": {
                     *           "setId": "Custom_CPS-6134b_B-3-1AHBENT.xml",
                     *           "authenticationOptions": {
                     *             "sendCaListToClient": false,
                     *             "ocsp": {
                     *               "enabled": false
                     *             }
                     *           }
                     *         },
                     *         "dnsNameSettings": {
                     *           "cloneDnsNames": false,
                     *           "dnsNames": [
                     *             "san2.example.com",
                     *             "san1.example.com"
                     *           ]
                     *         }
                     *       },
                     *       "org": {
                     *         "addressLineOne": "150 Broadway",
                     *         "addressLineTwo": null,
                     *         "city": "Cambridge",
                     *         "country": "US",
                     *         "name": "Akamai Technologies",
                     *         "phone": "617-555-0111",
                     *         "postalCode": "02142",
                     *         "region": "MA"
                     *       },
                     *       "techContact": {
                     *         "addressLineOne": "150 Broadway",
                     *         "addressLineTwo": null,
                     *         "city": "Cambridge",
                     *         "country": "US",
                     *         "email": "email@example.com",
                     *         "firstName": "R2",
                     *         "lastName": "D2",
                     *         "organizationName": "Akamai",
                     *         "phone": "617-555-0111",
                     *         "postalCode": "02142",
                     *         "region": "MA",
                     *         "title": "Technical Engineer"
                     *       },
                     *       "thirdParty": {
                     *         "excludeSans": false
                     *       },
                     *       "pendingChanges": [
                     *         {
                     *           "changeType": "new-certificate",
                     *           "location": "/cps-api/enrollments/10001/changes/10002"
                     *         }
                     *       ]
                     *     } */
                    "application/vnd.akamai.cps.enrollment.v11+json": {
                        /** @description Contact information for the certificate administrator that you want to use as a contact at your company. */
                        adminContact?: {
                            /** @description The address of your organization. */
                            addressLineOne?: string | null;
                            /** @description The address of your organization. */
                            addressLineTwo?: string | null;
                            /** @description The city where your organization resides. */
                            city?: string | null;
                            /** @description The country where your organization resides. */
                            country?: string | null;
                            /** @description The email address of the administrator who you want to use as a contact at your company. */
                            email?: string | null;
                            /** @description The first name of the administrator who you want to use as a contact at your company. */
                            firstName?: string | null;
                            /** @description The last name of the administrator who you want to use as a contact at your company. */
                            lastName?: string | null;
                            /** @description The name of your organization. */
                            organizationName?: string | null;
                            /** @description The phone number of your organization. */
                            phone?: string | null;
                            /** @description The postal code of your organization. */
                            postalCode?: string | null;
                            /** @description The region of your organization, typically a state or province. */
                            region?: string | null;
                            /** @description The title of the administrator who you want to use as a contact at your company. */
                            title?: string | null;
                        } | null;
                        /** @description Slots where the certificate either will be deployed or is already deployed. */
                        assignedSlots?: number[] | null;
                        /** @description The specific date on which the renewal automatically starts for the enrollment. */
                        autoRenewalStartTime?: string | null;
                        /**
                         * @description Certificate trust chain type.
                         * @enum {string|null}
                         */
                        certificateChainType?: "default" | "symantec1kroot" | null;
                        /**
                         * @description Either `san`, `single`, `wildcard`, `wildcard-san`, or `third-party`. See [Enrollment.validationType Values](#validationtype) for details.
                         * @enum {string}
                         */
                        certificateType: "san" | "single" | "wildcard" | "wildcard-san" | "third-party";
                        /** @description If you turn change management on for an enrollment, it stops CPS from deploying the certificate to the network until you acknowledge that you are ready to deploy the certificate. You can test the certificate outside of CPS, on the Edge Staging Network (ESN), to make sure it works in your environment and then deploy the certificate. The ESN is a small network of Akamai edge servers built to simulate Akamai's production network to test most of your site or application functionality with current production version configuration options and functions. For more information on the ESN, see the [Edge Staging Network User Guide](https://control.akamai.com/dl/customers/other/EDGESERV/ESN-User-Guide.pdf). You can also contact your account representative with questions or issues with your service on the ESN. */
                        changeManagement: boolean;
                        /** @description When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate. */
                        csr: {
                            /** @description The country code for the country where your organization is located. */
                            c?: string | null;
                            /** @description The common name (CN) you want to use for the certificate in the Common Name field. The domain name you specify here must be owned or have legal rights to use the domain by the company you enter in the Organization field in this tab. The company that owns the domain name must be a legally incorporated entity and be active and in good standing. */
                            cn: string;
                            /** @description Your city in the locality (city). */
                            l?: string | null;
                            /** @description The name of your company or organization. Enter the name as it appears in all legal documents and as it appears in the legal entity filing. */
                            o?: string | null;
                            /** @description Your organizational unit. */
                            ou?: string | null;
                            /** @description For the Let's Encrypt Domain Validated (DV) SAN certificates, the customer may select one of the trust chain options supported by Let's Encrypt, or not fill out this field. The preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default. */
                            preferredTrustChain?: string | null;
                            /** @description Additional common names (CN) to create a Subject Alternative Names (SAN) list. */
                            sans?: string[] | null;
                            /** @description Your state or province. */
                            st?: string | null;
                        };
                        /** @description Enable Dual-Stacked certificate deployment for this enrollment. */
                        enableMultiStackedCertificates: boolean;
                        /** @description The unique identifier of the enrollment. */
                        id?: string | null;
                        /** @description The URI path to the enrollment. The last segment of the URI path serves as a unique identifier for the enrollment. */
                        location?: string | null;
                        /** @description Maximum number of SAN names supported for this enrollment type. */
                        maxAllowedSanNames?: number | null;
                        /** @description Maximum number of Wildcard SAN names supported for this enrollment type. */
                        maxAllowedWildcardSanNames?: number | null;
                        /** @description Settings that specify any network information and TLS Metadata you want CPS to use to push the completed certificate to the network. */
                        networkConfiguration: {
                            /** @description The configuration for client mutual authentication. Specifies  the trust chain that is used to verify client certificates and some configuration  options. */
                            clientMutualAuthentication?: {
                                /** @description Contains the configuration options for the selected trust chain. */
                                authenticationOptions?: {
                                    /** @description Whether you want to enable OCSP stapling for client certificates. */
                                    ocsp?: {
                                        /** @description Whether the OCSP stapling is enabled. */
                                        enabled?: boolean | null;
                                    } | null;
                                    /** @description Whether you want to enable the server to send the certificate authority (CA) list to the client. */
                                    sendCaListToClient?: boolean | null;
                                } | null;
                                /** @description The identifier of the set of trust chains, created in the Trust Chain Manager. */
                                setId?: string | null;
                            } | null;
                            /** @description Specify the TLS protocol versions you want to disallow. */
                            disallowedTlsVersions?: string[] | null;
                            /** @description DNS name settings. */
                            dnsNameSettings?: {
                                /** @description Enable if you want CPS to direct traffic using all the SANs listed in the SANs parameter when you created your enrollment. */
                                cloneDnsNames: boolean;
                                /** @description Names served by SNI-only enabled enrollments. */
                                dnsNames?: string[] | null;
                            } | null;
                            /**
                             * @description Use `core` to specify worldwide (includes China and Russia), `china+core` to specify worldwide and  China, and 'russia+core` to specify worldwide and Russia. You can only use this setting to include China and Russia if your Akamai contract specifies your ability to do so and you have approval from the Chinese and Russian government.
                             * @enum {string}
                             */
                            geography: "core" | "china+core" | "russia+core";
                            /** @description Ciphers that you definitely want to include for your enrollment while deploying it on the network. Defaults to `ak-akamai-default` when it is not set. */
                            mustHaveCiphers?: string | null;
                            /**
                             * @description Enable OCSP stapling for the enrollment. OCSP Stapling improves performance by including a valid OCSP response in every TLS handshake. Specify OCSP Stapling if you want to improve performance by allowing the visitors to your site to query the Online Certificate Status Protocol (OCSP) server at regular intervals to obtain a signed time-stamped OCSP response. This response must be signed by the CA, not the server, therefore ensuring security. Disable OSCP Stapling if you want visitors to your site to contact the CA directly for an OSCP response. OCSP allows you to obtain the revocation status of a certificate. We recommend all customers enable this feature. Use `on`, `off` or `not-set`.
                             * @enum {string|null}
                             */
                            ocspStapling?: "on" | "off" | "not-set" | null;
                            /** @description Ciphers that you preferably want to include for your enrollment while deploying it on the network. Defaults to `ak-akamai-default` when it is not set. */
                            preferredCiphers?: string | null;
                            /** @description Set to true to enable QUIC protocol. */
                            quicEnabled: boolean;
                            /**
                             * @description Set the type of deployment network you want to use. Set Standard TLS to deploy your certificate to Akamai's standard secure network. It is not PCI compliant. Set Enhanced TLS to deploy your certificate to Akamai's more secure network with PCI compliance capability.
                             * @enum {string}
                             */
                            secureNetwork: "enhanced-tls" | "standard-tls";
                            /** @description SNI settings for your enrollment. Set to `true` to enable SNI-only for the enrollment. This setting cannot be changed once an enrollment is created. */
                            sniOnly: boolean;
                        };
                        /** @description Your organization information. */
                        org?: {
                            /** @description The address of your organization. */
                            addressLineOne?: string | null;
                            /** @description The address of your organization. */
                            addressLineTwo?: string | null;
                            /** @description The city where your organization resides. */
                            city?: string | null;
                            /** @description The country where your organization resides. */
                            country?: string | null;
                            /** @description The name of your organization. */
                            name?: string | null;
                            /** @description The phone number of the administrator who you want to use as a contact at your company. */
                            phone?: string | null;
                            /** @description The postal code of your organization. */
                            postalCode?: string | null;
                            /** @description The region where your organization resides. */
                            region?: string | null;
                        } | null;
                        /** @description The Digicert unique identifier for the organization. If an orgId value is provided in a PUT or POST request, it is recommended to leave the org, techContact, and adminContact fields null. */
                        orgId?: number | null;
                        /** @description Returns the Changes currently pending in CPS. The last item in the array is the most recent change. */
                        pendingChanges?: {
                            /**
                             * @description Pending change action.
                             * @enum {string|null}
                             */
                            changeType?: "new-certificate" | "modify-certificate" | "modify-san" | "renewal" | null;
                            /** @description Location to fetch related change information. */
                            location: string;
                        }[] | null;
                        /** @description Slots where the certificate is deployed on the production network. */
                        productionSlots?: number[] | null;
                        /**
                         * @description The registration authority or certificate authority (CA) you want to use to obtain a certificate. A CA is a trusted entity that signs certificates and can vouch for the identity of a website. Either `symantec`,  `lets-encrypt`, or `third-party`.
                         * @enum {string}
                         */
                        ra: "symantec" | "lets-encrypt" | "third-party";
                        /**
                         * @description The SHA (Secure Hash Algorithm) function. NSA designed this function to produce a hash of certificate contents, which is used in a digital signature.  Specify either `SHA-1` or `SHA-256`. We recommend you use SHA-256.
                         * @enum {string|null}
                         */
                        signatureAlgorithm?: "SHA-1" | "SHA-256" | null;
                        /** @description Slots where the certificate is deployed on the staging network. */
                        stagingSlots?: number[] | null;
                        /** @description Contact information for an administrator at Akamai. */
                        techContact?: {
                            /** @description The address for an administrator at Akamai. */
                            addressLineOne?: string | null;
                            /** @description The address for an administrator at Akamai. */
                            addressLineTwo?: string | null;
                            /** @description The city for an administrator at Akamai. */
                            city?: string | null;
                            /** @description The country for an administrator at Akamai. */
                            country?: string | null;
                            /** @description The email address of the administrator who you want to use as a contact at your company. */
                            email?: string | null;
                            /** @description The first name of the technical contact who you want to use within Akamai. This is the person you work closest with at Akamai who can verify the certificate request. This is the person the CA calls if there are any issues with the certificate and they cannot reach the administrator. */
                            firstName?: string | null;
                            /** @description The last name of the technical contact who you want to use within Akamai. */
                            lastName?: string | null;
                            /** @description The name of your organization in Akamai where your technical contact works. */
                            organizationName?: string | null;
                            /** @description The phone number of the technical contact who you want to use within Akamai. */
                            phone?: string | null;
                            /** @description The postal code for an administrator at Akamai. */
                            postalCode?: string | null;
                            /** @description The region for an administrator at Akamai. */
                            region?: string | null;
                            /** @description The title for an administrator at Akamai. */
                            title?: string | null;
                        } | null;
                        /** @description Specifies that you want to use a third party certificate. This is any certificate that is not issued through CPS. */
                        thirdParty?: {
                            /** @description If this is true, then the SANs in the enrollment do not appear in the CSR that CPS submits to the CA. */
                            excludeSans: boolean;
                        } | null;
                        /**
                         * @description There are three types of validation. Domain Validation (DV), which is the lowest level of validation. The CA validates that you have control of the domain. CPS supports DV certificates issued by Let's Encrypt, a free, automated, and open CA, run for public benefit. Organization Validation (OV), which is the next level of validation. The CA validates that you have control of the domain. Extended Validation (EV), which is the highest level of validation in which you must have signed letters and notaries sent to the CA before signing. You can also specify third party as a type of validation, if you want to use a signed certificate obtained by you from a CA not supported by CPS.  Either `dv`, `ev`, `ov`, or `third-party`.
                         * @enum {string}
                         */
                        validationType: "dv" | "ev" | "ov" | "third-party";
                    };
                };
            };
        };
    };
    "put-enrollment": {
        parameters: {
            query?: {
                /**
                 * @description All pending changes to be cancelled when updating an enrollment.
                 * @example {{allow-cancel-pending-changes}}
                 */
                "allow-cancel-pending-changes"?: boolean;
                /**
                 * @description Bypass staging and push meta-data updates directly to production network. Current change will also be updated with the same changes.
                 * @example {{allow-staging-bypass}}
                 */
                "allow-staging-bypass"?: boolean;
                /**
                 * @description Don't deploy after this date (UTC).
                 * @example {{deploy-not-after}}
                 */
                "deploy-not-after"?: string;
                /**
                 * @description Don't deploy before this date (UTC).
                 * @example {{deploy-not-before}}
                 */
                "deploy-not-before"?: string;
                /**
                 * @description Force certificate renewal for Enrollment.
                 * @example {{force-renewal}}
                 */
                "force-renewal"?: boolean;
                /**
                 * @description CPS will automatically start a Change to renew certificates in time before they expire. This automatic Change is started when Certificate's expiration is within a renewal window, and system will protect against other changes started during this renewal window. Setting `renewal-date-check-override=true` will allow creating a Change during the renewal window, potentially running the risk of ending up with an expired certificate on the network.
                 * @example {{renewal-date-check-override}}
                 */
                "renewal-date-check-override"?: boolean;
                /**
                 * @description Applicable for Third Party Dual Stack Enrollments, allows to update missing certificate. Option supported from v10.
                 * @example {{allow-missing-certificate-addition}}
                 */
                "allow-missing-certificate-addition"?: boolean;
                /**
                 * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
                 * @example {{accountSwitchKey}}
                 */
                accountSwitchKey?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "autoRenewalStartTime": null,
                 *       "certificateChainType": "default",
                 *       "certificateType": "third-party",
                 *       "changeManagement": true,
                 *       "enableMultiStackedCertificates": false,
                 *       "id": "10001",
                 *       "location": "/cps-api/enrollments/10001",
                 *       "maxAllowedSanNames": 100,
                 *       "maxAllowedWildcardSanNames": 100,
                 *       "orgId": "645263546",
                 *       "ra": "third-party",
                 *       "signatureAlgorithm": null,
                 *       "validationType": "third-party",
                 *       "assignedSlots": [
                 *         1234
                 *       ],
                 *       "productionSlots": [
                 *         1234
                 *       ],
                 *       "stagingSlots": [
                 *         1234
                 *       ],
                 *       "adminContact": {
                 *         "addressLineOne": "150 Broadway",
                 *         "addressLineTwo": null,
                 *         "city": "Cambridge",
                 *         "country": "US",
                 *         "email": "email@example.com",
                 *         "firstName": "R1",
                 *         "lastName": "D1",
                 *         "organizationName": "Akamai",
                 *         "phone": "617-555-0111",
                 *         "postalCode": "02142",
                 *         "region": "MA",
                 *         "title": "Adminstrator"
                 *       },
                 *       "csr": {
                 *         "c": "US",
                 *         "cn": "www.example.com",
                 *         "l": "Cambridge",
                 *         "o": "Akamai",
                 *         "ou": "WebEx",
                 *         "preferredTrustChain": "dst-root-ca-x3",
                 *         "st": "MA",
                 *         "sans": [
                 *           "san1.example.com",
                 *           "san2.example.com",
                 *           "san3.example.com",
                 *           "www.example.com"
                 *         ]
                 *       },
                 *       "networkConfiguration": {
                 *         "geography": "core",
                 *         "mustHaveCiphers": "ak-akamai-2020q1",
                 *         "ocspStapling": "on",
                 *         "preferredCiphers": "ak-akamai-2020q1",
                 *         "quicEnabled": false,
                 *         "secureNetwork": "enhanced-tls",
                 *         "sniOnly": true,
                 *         "disallowedTlsVersions": [
                 *           "TLSv1",
                 *           "TLSv1_1"
                 *         ],
                 *         "clientMutualAuthentication": {
                 *           "setId": "Custom_CPS-6134b_B-3-1AHBENT.xml",
                 *           "authenticationOptions": {
                 *             "sendCaListToClient": false,
                 *             "ocsp": {
                 *               "enabled": false
                 *             }
                 *           }
                 *         },
                 *         "dnsNameSettings": {
                 *           "cloneDnsNames": false,
                 *           "dnsNames": [
                 *             "san2.example.com",
                 *             "san1.example.com"
                 *           ]
                 *         }
                 *       },
                 *       "org": {
                 *         "addressLineOne": "150 Broadway",
                 *         "addressLineTwo": null,
                 *         "city": "Cambridge",
                 *         "country": "US",
                 *         "name": "Akamai Technologies",
                 *         "phone": "617-555-0111",
                 *         "postalCode": "02142",
                 *         "region": "MA"
                 *       },
                 *       "techContact": {
                 *         "addressLineOne": "150 Broadway",
                 *         "addressLineTwo": null,
                 *         "city": "Cambridge",
                 *         "country": "US",
                 *         "email": "email@example.com",
                 *         "firstName": "R2",
                 *         "lastName": "D2",
                 *         "organizationName": "Akamai",
                 *         "phone": "617-555-0111",
                 *         "postalCode": "02142",
                 *         "region": "MA",
                 *         "title": "Technical Engineer"
                 *       },
                 *       "thirdParty": {
                 *         "excludeSans": false
                 *       },
                 *       "pendingChanges": [
                 *         {
                 *           "changeType": "new-certificate",
                 *           "location": "/cps-api/enrollments/10001/changes/10002"
                 *         }
                 *       ]
                 *     } */
                "application/vnd.akamai.cps.enrollment.v11+json": {
                    /** @description Contact information for the certificate administrator that you want to use as a contact at your company. */
                    adminContact?: {
                        /** @description The address of your organization. */
                        addressLineOne?: string | null;
                        /** @description The address of your organization. */
                        addressLineTwo?: string | null;
                        /** @description The city where your organization resides. */
                        city?: string | null;
                        /** @description The country where your organization resides. */
                        country?: string | null;
                        /** @description The email address of the administrator who you want to use as a contact at your company. */
                        email?: string | null;
                        /** @description The first name of the administrator who you want to use as a contact at your company. */
                        firstName?: string | null;
                        /** @description The last name of the administrator who you want to use as a contact at your company. */
                        lastName?: string | null;
                        /** @description The name of your organization. */
                        organizationName?: string | null;
                        /** @description The phone number of your organization. */
                        phone?: string | null;
                        /** @description The postal code of your organization. */
                        postalCode?: string | null;
                        /** @description The region of your organization, typically a state or province. */
                        region?: string | null;
                        /** @description The title of the administrator who you want to use as a contact at your company. */
                        title?: string | null;
                    } | null;
                    /** @description Slots where the certificate either will be deployed or is already deployed. */
                    assignedSlots?: number[] | null;
                    /** @description The specific date on which the renewal automatically starts for the enrollment. */
                    autoRenewalStartTime?: string | null;
                    /**
                     * @description Certificate trust chain type.
                     * @enum {string|null}
                     */
                    certificateChainType?: "default" | "symantec1kroot" | null;
                    /**
                     * @description Either `san`, `single`, `wildcard`, `wildcard-san`, or `third-party`. See [Enrollment.validationType Values](#validationtype) for details.
                     * @enum {string}
                     */
                    certificateType: "san" | "single" | "wildcard" | "wildcard-san" | "third-party";
                    /** @description If you turn change management on for an enrollment, it stops CPS from deploying the certificate to the network until you acknowledge that you are ready to deploy the certificate. You can test the certificate outside of CPS, on the Edge Staging Network (ESN), to make sure it works in your environment and then deploy the certificate. The ESN is a small network of Akamai edge servers built to simulate Akamai's production network to test most of your site or application functionality with current production version configuration options and functions. For more information on the ESN, see the [Edge Staging Network User Guide](https://control.akamai.com/dl/customers/other/EDGESERV/ESN-User-Guide.pdf). You can also contact your account representative with questions or issues with your service on the ESN. */
                    changeManagement: boolean;
                    /** @description When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate. */
                    csr: {
                        /** @description The country code for the country where your organization is located. */
                        c?: string | null;
                        /** @description The common name (CN) you want to use for the certificate in the Common Name field. The domain name you specify here must be owned or have legal rights to use the domain by the company you enter in the Organization field in this tab. The company that owns the domain name must be a legally incorporated entity and be active and in good standing. */
                        cn: string;
                        /** @description Your city in the locality (city). */
                        l?: string | null;
                        /** @description The name of your company or organization. Enter the name as it appears in all legal documents and as it appears in the legal entity filing. */
                        o?: string | null;
                        /** @description Your organizational unit. */
                        ou?: string | null;
                        /** @description For the Let's Encrypt Domain Validated (DV) SAN certificates, the customer may select one of the trust chain options supported by Let's Encrypt, or not fill out this field. The preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default. */
                        preferredTrustChain?: string | null;
                        /** @description Additional common names (CN) to create a Subject Alternative Names (SAN) list. */
                        sans?: string[] | null;
                        /** @description Your state or province. */
                        st?: string | null;
                    };
                    /** @description Enable Dual-Stacked certificate deployment for this enrollment. */
                    enableMultiStackedCertificates: boolean;
                    /** @description The unique identifier of the enrollment. */
                    id?: string | null;
                    /** @description The URI path to the enrollment. The last segment of the URI path serves as a unique identifier for the enrollment. */
                    location?: string | null;
                    /** @description Maximum number of SAN names supported for this enrollment type. */
                    maxAllowedSanNames?: number | null;
                    /** @description Maximum number of Wildcard SAN names supported for this enrollment type. */
                    maxAllowedWildcardSanNames?: number | null;
                    /** @description Settings that specify any network information and TLS Metadata you want CPS to use to push the completed certificate to the network. */
                    networkConfiguration: {
                        /** @description The configuration for client mutual authentication. Specifies  the trust chain that is used to verify client certificates and some configuration  options. */
                        clientMutualAuthentication?: {
                            /** @description Contains the configuration options for the selected trust chain. */
                            authenticationOptions?: {
                                /** @description Whether you want to enable OCSP stapling for client certificates. */
                                ocsp?: {
                                    /** @description Whether the OCSP stapling is enabled. */
                                    enabled?: boolean | null;
                                } | null;
                                /** @description Whether you want to enable the server to send the certificate authority (CA) list to the client. */
                                sendCaListToClient?: boolean | null;
                            } | null;
                            /** @description The identifier of the set of trust chains, created in the Trust Chain Manager. */
                            setId?: string | null;
                        } | null;
                        /** @description Specify the TLS protocol versions you want to disallow. */
                        disallowedTlsVersions?: string[] | null;
                        /** @description DNS name settings. */
                        dnsNameSettings?: {
                            /** @description Enable if you want CPS to direct traffic using all the SANs listed in the SANs parameter when you created your enrollment. */
                            cloneDnsNames: boolean;
                            /** @description Names served by SNI-only enabled enrollments. */
                            dnsNames?: string[] | null;
                        } | null;
                        /**
                         * @description Use `core` to specify worldwide (includes China and Russia), `china+core` to specify worldwide and  China, and 'russia+core` to specify worldwide and Russia. You can only use this setting to include China and Russia if your Akamai contract specifies your ability to do so and you have approval from the Chinese and Russian government.
                         * @enum {string}
                         */
                        geography: "core" | "china+core" | "russia+core";
                        /** @description Ciphers that you definitely want to include for your enrollment while deploying it on the network. Defaults to `ak-akamai-default` when it is not set. */
                        mustHaveCiphers?: string | null;
                        /**
                         * @description Enable OCSP stapling for the enrollment. OCSP Stapling improves performance by including a valid OCSP response in every TLS handshake. Specify OCSP Stapling if you want to improve performance by allowing the visitors to your site to query the Online Certificate Status Protocol (OCSP) server at regular intervals to obtain a signed time-stamped OCSP response. This response must be signed by the CA, not the server, therefore ensuring security. Disable OSCP Stapling if you want visitors to your site to contact the CA directly for an OSCP response. OCSP allows you to obtain the revocation status of a certificate. We recommend all customers enable this feature. Use `on`, `off` or `not-set`.
                         * @enum {string|null}
                         */
                        ocspStapling?: "on" | "off" | "not-set" | null;
                        /** @description Ciphers that you preferably want to include for your enrollment while deploying it on the network. Defaults to `ak-akamai-default` when it is not set. */
                        preferredCiphers?: string | null;
                        /** @description Set to true to enable QUIC protocol. */
                        quicEnabled: boolean;
                        /**
                         * @description Set the type of deployment network you want to use. Set Standard TLS to deploy your certificate to Akamai's standard secure network. It is not PCI compliant. Set Enhanced TLS to deploy your certificate to Akamai's more secure network with PCI compliance capability.
                         * @enum {string}
                         */
                        secureNetwork: "enhanced-tls" | "standard-tls";
                        /** @description SNI settings for your enrollment. Set to `true` to enable SNI-only for the enrollment. This setting cannot be changed once an enrollment is created. */
                        sniOnly: boolean;
                    };
                    /** @description Your organization information. */
                    org?: {
                        /** @description The address of your organization. */
                        addressLineOne?: string | null;
                        /** @description The address of your organization. */
                        addressLineTwo?: string | null;
                        /** @description The city where your organization resides. */
                        city?: string | null;
                        /** @description The country where your organization resides. */
                        country?: string | null;
                        /** @description The name of your organization. */
                        name?: string | null;
                        /** @description The phone number of the administrator who you want to use as a contact at your company. */
                        phone?: string | null;
                        /** @description The postal code of your organization. */
                        postalCode?: string | null;
                        /** @description The region where your organization resides. */
                        region?: string | null;
                    } | null;
                    /** @description The Digicert unique identifier for the organization. If an orgId value is provided in a PUT or POST request, it is recommended to leave the org, techContact, and adminContact fields null. */
                    orgId?: number | null;
                    /** @description Returns the Changes currently pending in CPS. The last item in the array is the most recent change. */
                    pendingChanges?: {
                        /**
                         * @description Pending change action.
                         * @enum {string|null}
                         */
                        changeType?: "new-certificate" | "modify-certificate" | "modify-san" | "renewal" | null;
                        /** @description Location to fetch related change information. */
                        location: string;
                    }[] | null;
                    /** @description Slots where the certificate is deployed on the production network. */
                    productionSlots?: number[] | null;
                    /**
                     * @description The registration authority or certificate authority (CA) you want to use to obtain a certificate. A CA is a trusted entity that signs certificates and can vouch for the identity of a website. Either `symantec`,  `lets-encrypt`, or `third-party`.
                     * @enum {string}
                     */
                    ra: "symantec" | "lets-encrypt" | "third-party";
                    /**
                     * @description The SHA (Secure Hash Algorithm) function. NSA designed this function to produce a hash of certificate contents, which is used in a digital signature.  Specify either `SHA-1` or `SHA-256`. We recommend you use SHA-256.
                     * @enum {string|null}
                     */
                    signatureAlgorithm?: "SHA-1" | "SHA-256" | null;
                    /** @description Slots where the certificate is deployed on the staging network. */
                    stagingSlots?: number[] | null;
                    /** @description Contact information for an administrator at Akamai. */
                    techContact?: {
                        /** @description The address for an administrator at Akamai. */
                        addressLineOne?: string | null;
                        /** @description The address for an administrator at Akamai. */
                        addressLineTwo?: string | null;
                        /** @description The city for an administrator at Akamai. */
                        city?: string | null;
                        /** @description The country for an administrator at Akamai. */
                        country?: string | null;
                        /** @description The email address of the administrator who you want to use as a contact at your company. */
                        email?: string | null;
                        /** @description The first name of the technical contact who you want to use within Akamai. This is the person you work closest with at Akamai who can verify the certificate request. This is the person the CA calls if there are any issues with the certificate and they cannot reach the administrator. */
                        firstName?: string | null;
                        /** @description The last name of the technical contact who you want to use within Akamai. */
                        lastName?: string | null;
                        /** @description The name of your organization in Akamai where your technical contact works. */
                        organizationName?: string | null;
                        /** @description The phone number of the technical contact who you want to use within Akamai. */
                        phone?: string | null;
                        /** @description The postal code for an administrator at Akamai. */
                        postalCode?: string | null;
                        /** @description The region for an administrator at Akamai. */
                        region?: string | null;
                        /** @description The title for an administrator at Akamai. */
                        title?: string | null;
                    } | null;
                    /** @description Specifies that you want to use a third party certificate. This is any certificate that is not issued through CPS. */
                    thirdParty?: {
                        /** @description If this is true, then the SANs in the enrollment do not appear in the CSR that CPS submits to the CA. */
                        excludeSans: boolean;
                    } | null;
                    /**
                     * @description There are three types of validation. Domain Validation (DV), which is the lowest level of validation. The CA validates that you have control of the domain. CPS supports DV certificates issued by Let's Encrypt, a free, automated, and open CA, run for public benefit. Organization Validation (OV), which is the next level of validation. The CA validates that you have control of the domain. Extended Validation (EV), which is the highest level of validation in which you must have signed letters and notaries sent to the CA before signing. You can also specify third party as a type of validation, if you want to use a signed certificate obtained by you from a CA not supported by CPS.  Either `dv`, `ev`, `ov`, or `third-party`.
                     * @enum {string}
                     */
                    validationType: "dv" | "ev" | "ov" | "third-party";
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "enrollment": "/cps/v2/enrollments/10002",
                     *       "changes": [
                     *         "/cps/v2/enrollments/10002/changes/10002"
                     *       ]
                     *     } */
                    "application/vnd.akamai.cps.enrollment-status.v1+json": {
                        changes: string[];
                        enrollment: string;
                    };
                };
            };
            /** @description Resource successfully accepted. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "enrollment": "/cps/v2/enrollments/10002",
                     *       "changes": [
                     *         "/cps/v2/enrollments/10002/changes/10002"
                     *       ]
                     *     } */
                    "application/vnd.akamai.cps.enrollment-status.v1+json": {
                        changes: string[];
                        enrollment: string;
                    };
                };
            };
        };
    };
    "delete-enrollment": {
        parameters: {
            query?: {
                /**
                 * @description All pending changes to be cancelled when updating an enrollment.
                 * @example {{allow-cancel-pending-changes}}
                 */
                "allow-cancel-pending-changes"?: boolean;
                /**
                 * @description Don't deploy after this date (UTC).
                 * @example {{deploy-not-after}}
                 */
                "deploy-not-after"?: string;
                /**
                 * @description Don't deploy before this date (UTC).
                 * @example {{deploy-not-before}}
                 */
                "deploy-not-before"?: string;
                /**
                 * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
                 * @example {{accountSwitchKey}}
                 */
                accountSwitchKey?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "enrollment": "/cps/v2/enrollments/10002",
                     *       "changes": [
                     *         "/cps/v2/enrollments/10002/changes/10002"
                     *       ]
                     *     } */
                    "application/vnd.akamai.cps.enrollment-status.v1+json": {
                        changes: string[];
                        enrollment: string;
                    };
                };
            };
            /** @description Resource successfully accepted. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "enrollment": "/cps/v2/enrollments/10002",
                     *       "changes": [
                     *         "/cps/v2/enrollments/10002/changes/10002"
                     *       ]
                     *     } */
                    "application/vnd.akamai.cps.enrollment-status.v1+json": {
                        changes: string[];
                        enrollment: string;
                    };
                };
            };
        };
    };
    "get-enrollment-change": {
        parameters: {
            query?: {
                /**
                 * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
                 * @example {{accountSwitchKey}}
                 */
                accountSwitchKey?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The change for this enrollment on which to perform the desired operation.
                 * @example {{changeId}}
                 */
                changeId: number;
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "statusInfo": {
                     *         "description": "Waiting for you to upload and submit your third party certificate and trust chain.",
                     *         "error": null,
                     *         "state": "awaiting-input",
                     *         "status": "wait-upload-third-party",
                     *         "deploymentSchedule": {
                     *           "notAfter": null,
                     *           "notBefore": null
                     *         }
                     *       },
                     *       "allowedInput": [
                     *         {
                     *           "info": "/cps/v2/enrollments/10002/changes/10002/input/info/third-party-csr",
                     *           "requiredToProceed": true,
                     *           "type": "third-party-certificate",
                     *           "update": "/cps/v2/enrollments/10002/changes/10002/input/update/third-party-cert-and-trust-chain"
                     *         }
                     *       ]
                     *     } */
                    "application/vnd.akamai.cps.change.v2+json": {
                        /** @description The resource path locations of data inputs allowed by this change. These could be required or optional for this change to proceed. */
                        allowedInput: {
                            /** @description The resource location for the allowed input's description. */
                            info: string;
                            /** @description If `true`, this input is required for the change to proceed. */
                            requiredToProceed: boolean;
                            /** @description The type input. */
                            type: string;
                            /** @description The resource path location that you can use to make a call for this input. */
                            update: string;
                        }[];
                        /** @description The status for this change at this time. */
                        statusInfo: {
                            /** @description The schedule for when you want this change to deploy. */
                            deploymentSchedule: {
                                /** @description Don't deploy the certificate after this date. */
                                notAfter?: string | null;
                                /** @description Don't deploy the certificate before this date. */
                                notBefore?: string | null;
                            };
                            /** @description A description of the current status of the change. */
                            description: string;
                            /** @description Error information for this change. */
                            error?: {
                                /** @description The unique identifier code for this error. */
                                code: string;
                                /** @description The detailed description for this error. */
                                description: string;
                                /** @description Indicates when this error occurred. */
                                timestamp: string;
                            } | null;
                            /**
                             * @description The change request's state. A value of `new` means the certificate is processed but the renewal process is not started. `awaiting-input` means the process is waiting on a user input, for example the approval or denial of a change management item. `suspended` indicates the process didn't complete. A value of `cancelled` means the process has been cancelled permanently.
                             * @enum {string}
                             */
                            state: "new" | "running" | "awaiting-input" | "suspended" | "cancelled" | "completed" | "error";
                            /** @description The general status of the change. This is a high level of description of the status for the change. See [Status values and descriptions](https://techdocs.akamai.com/cps/reference/status-values-and-descriptions) for the list of possible status values this operation may return. */
                            status: string;
                        };
                    };
                };
            };
        };
    };
    "delete-enrollment-change": {
        parameters: {
            query?: {
                /**
                 * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
                 * @example {{accountSwitchKey}}
                 */
                accountSwitchKey?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The change for this enrollment on which to perform the desired operation.
                 * @example {{changeId}}
                 */
                changeId: number;
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "change": "/cps/v2/enrollments/10002/changes/10002"
                     *     } */
                    "application/vnd.akamai.cps.change-id.v1+json": {
                        change: string;
                    };
                };
            };
        };
    };
    "get-change-deployment-schedule": {
        parameters: {
            query?: {
                /**
                 * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
                 * @example {{accountSwitchKey}}
                 */
                accountSwitchKey?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The change for this enrollment on which to perform the desired operation.
                 * @example {{changeId}}
                 */
                changeId: number;
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "notAfter": null,
                     *       "notBefore": "2017-05-19T16:00:00Z"
                     *     } */
                    "application/vnd.akamai.cps.deployment-schedule.v1+json": {
                        /** @description The time after when the change will no longer be in effect. This value is an ISO-8601 timestamp. */
                        notAfter?: string | null;
                        /** @description The time that you want change to take effect. If you do not set this, the change occurs immediately, although most changes take some time to take effect even when they are immediately effective. This value is an ISO-8601 timestamp. */
                        notBefore?: string | null;
                    };
                };
            };
        };
    };
    "put-change-deployment-schedule": {
        parameters: {
            query?: {
                /**
                 * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
                 * @example {{accountSwitchKey}}
                 */
                accountSwitchKey?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The change for this enrollment on which to perform the desired operation.
                 * @example {{changeId}}
                 */
                changeId: number;
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "notAfter": null,
                 *       "notBefore": "2017-05-19T16:00:00Z"
                 *     } */
                "application/vnd.akamai.cps.deployment-schedule.v1+json": {
                    /** @description The time after when the change will no longer be in effect. This value is an ISO-8601 timestamp. */
                    notAfter?: string | null;
                    /** @description The time that you want change to take effect. If you do not set this, the change occurs immediately, although most changes take some time to take effect even when they are immediately effective. This value is an ISO-8601 timestamp. */
                    notBefore?: string | null;
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "change": "/cps/v2/enrollments/10002/changes/10002"
                     *     } */
                    "application/vnd.akamai.cps.change-id.v1+json": {
                        change: string;
                    };
                };
            };
        };
    };
    "get-change-allowed-input-param": {
        parameters: {
            query?: {
                /**
                 * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
                 * @example {{accountSwitchKey}}
                 */
                accountSwitchKey?: string;
            };
            header: {
                /**
                 * @description __Enum__ Specifies the response type.
                 * @example {{Accept}}
                 */
                Accept: "application/vnd.akamai.cps.csr.v2+json" | "application/vnd.akamai.cps.csr.v1+json" | "application/vnd.akamai.cps.change-management-info.v5+json" | "application/vnd.akamai.cps.change-management-info.v4+json" | "application/vnd.akamai.cps.change-management-info.v2+json" | "application/vnd.akamai.cps.change-management-info.v1+json" | "application/vnd.akamai.cps.deployment.v7+json" | "application/vnd.akamai.cps.deployment.v6+json" | "application/vnd.akamai.cps.deployment.v3+json" | "application/vnd.akamai.cps.dv-challenges.v2+json" | "application/vnd.akamai.cps.dv-challenges.v1+json" | "application/vnd.akamai.cps.warnings.v1+json";
            };
            path: {
                /**
                 * @description __Enum__ Found as the last part of `Change.allowedInput[].update` hypermedia URL. See [Change Input Content Type Mapping](https://techdocs.akamai.com/cps/reference/change-input-content-type-mapping) for details. Currently supported values include `change-management-info`, `lets-encrypt-challenges`, `post-verification-warnings`, `pre-verification-warnings`, `third-party-csr`.
                 * @example {{allowedInputTypeParam}}
                 */
                allowedInputTypeParam: "change-management-info" | "lets-encrypt-challenges" | "post-verification-warnings" | "pre-verification-warnings" | "third-party-csr";
                /**
                 * @description The change for this enrollment on which to perform the desired operation.
                 * @example {{changeId}}
                 */
                changeId: number;
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "acknowledgementDeadline": null,
                     *       "validationResultHash": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
                     *       "pendingState": {
                     *         "pendingCertificate": {
                     *           "certificateType": "third-party",
                     *           "fullCertificate": "-----BEGIN CERTIFICATE-----\nMIID2DCCAsCgAwIBAgIQ661To2+zTDiFLyyARAaFXTANBgkqhkiG9w0BAQsFADBn\nMSowKAYDVQQDDCFBS0FNQUkgVEVTVCBJTlRFUk1FRElBVEUgQ0VSVCBbMV0xDjAM\nBgNVBAsMBVdlYkV4MQ8wDQYDVQQKDAZBa2FtYWkxCzAJBgNVBAgMAk1BMQswCQYD\nVQQGEwJVUzAeFw0xNzA1MTgyMTEwMTFaFw0xODA1MTkyMTEwMTFaMG0xHDAaBgNV\nBAMME3d3dy5jcHMtZXhhbXBsZS5jb20xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJN\nQTESMBAGA1UEBwwJQ2FtYnJpZGdlMQ8wDQYDVQQKDAZBa2FtYWkxDjAMBgNVBAsM\nBVdlYkV4MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvQeIJ2yfOC8P\nYQp6NjiCYSCkuS0z9a61v+k+KTDYQKIa8jDkwP0OITzvTnjMHuUd8JbSz5jNb22Z\nWxH/1F2p71rlSdBReBkZGLMLcQZPt5ju7ea7ZPz+MOWrwuc6YUafRMQk3qMeo3Sz\nIZQbmLKXkZeYriqy9s9yHJSUnWX1jOa51w6YM/Xar/2pZp2pyguaCNVGp7AAo38R\nAepaGcFwyjJse6dc+7dHOvDnjQ+Cg2lO8DSc12sFLllOhdOULldZRWbtfTLs9uet\niR8ZVpHJ1TtzEz3X9RqBBCvnqykQvMmiQKOkfYEd6LN4Tk6/HJw2/MZhIgAEXtUU\ndQMnD6OMcwIDAQABo3oweDB2BgNVHREEbzBtghRzYW4xLmNwcy1leGFtcGxlLmNv\nbYIUc2FuMi5jcHMtZXhhbXBsZS5jb22CFHNhbjMuY3BzLWV4YW1wbGUuY29tghRz\nYW40LmNwcy1leGFtcGxlLmNvbYITd3d3LmNwcy1leGFtcGxlLmNvbTANBgkqhkiG\n9w0BAQsFAAOCAQEAm9krrTxqDwUaO8J7P7CcrHfwXeWiDG3d9uHqCvHRGrcs46pI\ny8umThgOEba0QHi6CwM6O0+chcHsn6qf+uVKg2u1SKlE6qMIJ1Ppc8MJky1xo0M5\ncrtRpSXjaoF9S2zZZK1lwOJoK93BtC/lNfRc682TxlQ58jtBI6qnmLXUhF8Yo67v\n0UfHiBIv1pZFPIdk90/48vjWM54haNxm/PhxNb6AdzawR4zImUhMKsISP7uOTURQ\nfFfeNgMvHyI8Id1VPLN+e2y4FtnTVdW2e+PTBvOJ1M+YoFU7M04/2SmKJHqnHljh\nVQBpto9JgDmt0yqsdFdLrZlpsIQwpLqdgKZlSw==\n-----END CERTIFICATE-----",
                     *           "signatureAlgorithm": "SHA-256"
                     *         },
                     *         "pendingNetworkConfiguration": {
                     *           "mustHaveCiphers": "ak-akamai-2020q1",
                     *           "networkType": null,
                     *           "preferredCiphers": "ak-akamai-2020q1",
                     *           "sni": null
                     *         }
                     *       },
                     *       "validationResult": {
                     *         "errors": null,
                     *         "warnings": [
                     *           {
                     *             "message": "[SAN name [san9.example.com] removed from certificate is still live on the network., SAN name [san8.example.com] removed from certificate is still live on the network.]",
                     *             "messageCode": "no-code"
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/vnd.akamai.cps.change-management-info.v1+json": {
                        acknowledgementDeadline?: string | null;
                        /** @description The snapshot of the pending state for the enrollment when this change takes effect. */
                        pendingState: {
                            /** @description The snapshot of the pending certificate for the enrollment when this change takes effect. */
                            pendingCertificate?: {
                                certificateType: string;
                                fullCertificate: string;
                                signatureAlgorithm: string | null;
                            };
                            /** @description The snapshot of the pending network configuration for the enrollment when this change takes effect. */
                            pendingNetworkConfiguration: {
                                mustHaveCiphers: string;
                                networkType?: string | null;
                                preferredCiphers: string;
                                /** @description Server Name Indication (SNI) setting for this Enrollment. */
                                sni?: {
                                    cloneDnsNames: boolean;
                                    dnsNames?: string[];
                                } | null;
                            };
                        };
                        /** @description The hash of `validationResult`. It always has a value, even when `validationResult` is `null`. The hash result of the validation result as of the time of the most recent validation check. It is used in the `change-management-ack` API call to further specify the state of the change that is being acknowledged. We recommend you use the `change-management-info` API call, review the `validationResult` with its hash, and then acknowledge change-management using the same hash retrieved when running the Change Management Acknowledgment operation. */
                        validationResult?: {
                            /** @description Validation errors of the current job state. Errors prevent a change from proceeding until you resolve them. They are optional and only appear if there are any errors. */
                            errors?: {
                                message: string;
                                messageCode: string;
                            }[] | null;
                            /** @description Validation warnings of the current job state. Warnings suspend the execution of a change. You can acknowledge or deny warnings. If you acknowledge them, the change proceeds with its operation. They are optional and only appear if there are any warnings. */
                            warnings?: {
                                message: string;
                                messageCode: string;
                            }[];
                        };
                        validationResultHash: string;
                    };
                    /** @example {
                     *       "acknowledgementDeadline": null,
                     *       "validationResultHash": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
                     *       "pendingState": {
                     *         "pendingCertificate": {
                     *           "certificateType": "third-party",
                     *           "fullCertificate": "-----BEGIN CERTIFICATE-----\nMIID2DCCAsCgAwIBAgIQ661To2+zTDiFLyyARAaFXTANBgkqhkiG9w0BAQsFADBn\nMSowKAYDVQQDDCFBS0FNQUkgVEVTVCBJTlRFUk1FRElBVEUgQ0VSVCBbMV0xDjAM\nBgNVBAsMBVdlYkV4MQ8wDQYDVQQKDAZBa2FtYWkxCzAJBgNVBAgMAk1BMQswCQYD\nVQQGEwJVUzAeFw0xNzA1MTgyMTEwMTFaFw0xODA1MTkyMTEwMTFaMG0xHDAaBgNV\nBAMME3d3dy5jcHMtZXhhbXBsZS5jb20xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJN\nQTESMBAGA1UEBwwJQ2FtYnJpZGdlMQ8wDQYDVQQKDAZBa2FtYWkxDjAMBgNVBAsM\nBVdlYkV4MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvQeIJ2yfOC8P\nYQp6NjiCYSCkuS0z9a61v+k+KTDYQKIa8jDkwP0OITzvTnjMHuUd8JbSz5jNb22Z\nWxH/1F2p71rlSdBReBkZGLMLcQZPt5ju7ea7ZPz+MOWrwuc6YUafRMQk3qMeo3Sz\nIZQbmLKXkZeYriqy9s9yHJSUnWX1jOa51w6YM/Xar/2pZp2pyguaCNVGp7AAo38R\nAepaGcFwyjJse6dc+7dHOvDnjQ+Cg2lO8DSc12sFLllOhdOULldZRWbtfTLs9uet\niR8ZVpHJ1TtzEz3X9RqBBCvnqykQvMmiQKOkfYEd6LN4Tk6/HJw2/MZhIgAEXtUU\ndQMnD6OMcwIDAQABo3oweDB2BgNVHREEbzBtghRzYW4xLmNwcy1leGFtcGxlLmNv\nbYIUc2FuMi5jcHMtZXhhbXBsZS5jb22CFHNhbjMuY3BzLWV4YW1wbGUuY29tghRz\nYW40LmNwcy1leGFtcGxlLmNvbYITd3d3LmNwcy1leGFtcGxlLmNvbTANBgkqhkiG\n9w0BAQsFAAOCAQEAm9krrTxqDwUaO8J7P7CcrHfwXeWiDG3d9uHqCvHRGrcs46pI\ny8umThgOEba0QHi6CwM6O0+chcHsn6qf+uVKg2u1SKlE6qMIJ1Ppc8MJky1xo0M5\ncrtRpSXjaoF9S2zZZK1lwOJoK93BtC/lNfRc682TxlQ58jtBI6qnmLXUhF8Yo67v\n0UfHiBIv1pZFPIdk90/48vjWM54haNxm/PhxNb6AdzawR4zImUhMKsISP7uOTURQ\nfFfeNgMvHyI8Id1VPLN+e2y4FtnTVdW2e+PTBvOJ1M+YoFU7M04/2SmKJHqnHljh\nVQBpto9JgDmt0yqsdFdLrZlpsIQwpLqdgKZlSw==\n-----END CERTIFICATE-----",
                     *           "signatureAlgorithm": "SHA-256"
                     *         },
                     *         "pendingNetworkConfiguration": {
                     *           "mustHaveCiphers": "ak-akamai-2020q1",
                     *           "networkType": null,
                     *           "preferredCiphers": "ak-akamai-2020q1",
                     *           "sni": null,
                     *           "disallowedTlsVersions": [
                     *             "TLSv1_2"
                     *           ]
                     *         }
                     *       },
                     *       "validationResult": {
                     *         "errors": null,
                     *         "warnings": [
                     *           {
                     *             "message": "[SAN name [san9.example.com] removed from certificate is still live on the network., SAN name [san8.example.com] removed from certificate is still live on the network.]",
                     *             "messageCode": "no-code"
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/vnd.akamai.cps.change-management-info.v2+json": {
                        /** @description The timestamp of the deadline for the user to acknowledge the change management validation result, before CPS automatically proceeds with attempting to deploy the pending state to the live network. The format of the timestamp is ISO-8601. This field is only populated when there's an existing certificate on network for the current enrollment, it's `null` otherwise. */
                        acknowledgementDeadline?: string | null;
                        /** @description The snapshot of the pending state for the enrollment when this change takes effect. */
                        pendingState: {
                            /** @description The snapshot of the pending certificate for the enrollment when this change takes effect. */
                            pendingCertificate?: {
                                /**
                                 * @description Either `san`, `single`, `wildcard`, `wildcard-san`, or `third-party`.
                                 * @enum {string}
                                 */
                                certificateType: "san" | "single" | "wildcard" | "wildcard-san" | "third-party";
                                /** @description Displays the contents of the certificate. */
                                fullCertificate: string;
                                /** @description Displays the signature algorithm. */
                                signatureAlgorithm: string | null;
                            };
                            /** @description The snapshot of the pending network configuration for the enrollment when this change takes effect. */
                            pendingNetworkConfiguration: {
                                /** @description Disallowed TLS protocols. */
                                disallowedTlsVersions?: string[];
                                /** @description Ciphers that you want to include for your enrollment while deploying it on the network. Defaults to `ak-akamai-default` when it is not set. */
                                mustHaveCiphers: string;
                                /** @description Enrollment network type. */
                                networkType?: string | null;
                                /** @description Ciphers that you preferably want to include for your enrollment while deploying it on the network. Defaults to `ak-akamai-default` when it is not set. */
                                preferredCiphers: string;
                                /** @description Server Name Indication (SNI) setting for this Enrollment. */
                                sni?: {
                                    /** @description All certificate SANs are included in `dnsNames` when `cloneDnsNames` is true. */
                                    cloneDnsNames: boolean;
                                    /** @description Names served by SNI-only enabled enrollments. */
                                    dnsNames?: string[];
                                } | null;
                            };
                        };
                        /** @description The hash of `validationResult`. It always has a value, even when `validationResult` is `null`. The hash result of the validation result as of the time of the most recent validation check. It is used in the `change-management-ack` API call to further specify the state of the change that is being acknowledged. We recommend you use the `change-management-info` API call, review the `validationResult` with its hash, and then acknowledge change-management using the same hash retrieved when running the Change Management Acknowledgment operation. */
                        validationResult?: {
                            /** @description Validation errors of the current job state. Errors prevent a change from proceeding until you resolve them. They are optional and only appear if there are any errors. */
                            errors?: {
                                /** @description The description of the message. */
                                message: string;
                                /** @description The unique code of the message. */
                                messageCode: string;
                            }[] | null;
                            /** @description Validation warnings of the current job state. Warnings suspend the execution of a change. You can acknowledge or deny warnings. If you acknowledge them, the change proceeds with its operation. They are optional and only appear if there are any warnings. */
                            warnings?: {
                                /** @description The description of the message. */
                                message: string;
                                /** @description The unique code of the message. */
                                messageCode: string;
                            }[];
                        };
                        /** @description The hash of `validationResult`. */
                        validationResultHash: string;
                    };
                    /** @example {
                     *       "acknowledgementDeadline": null,
                     *       "validationResultHash": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
                     *       "pendingState": {
                     *         "pendingCertificate": {
                     *           "certificateType": "third-party",
                     *           "fullCertificate": "-----BEGIN CERTIFICATE-----\nMIID2DCCAsCgAwIBAgIQ661To2+zTDiFLyyARAaFXTANBgkqhkiG9w0BAQsFADBn\nMSowKAYDVQQDDCFBS0FNQUkgVEVTVCBJTlRFUk1FRElBVEUgQ0VSVCBbMV0xDjAM\nBgNVBAsMBVdlYkV4MQ8wDQYDVQQKDAZBa2FtYWkxCzAJBgNVBAgMAk1BMQswCQYD\nVQQGEwJVUzAeFw0xNzA1MTgyMTEwMTFaFw0xODA1MTkyMTEwMTFaMG0xHDAaBgNV\nBAMME3d3dy5jcHMtZXhhbXBsZS5jb20xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJN\nQTESMBAGA1UEBwwJQ2FtYnJpZGdlMQ8wDQYDVQQKDAZBa2FtYWkxDjAMBgNVBAsM\nBVdlYkV4MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvQeIJ2yfOC8P\nYQp6NjiCYSCkuS0z9a61v+k+KTDYQKIa8jDkwP0OITzvTnjMHuUd8JbSz5jNb22Z\nWxH/1F2p71rlSdBReBkZGLMLcQZPt5ju7ea7ZPz+MOWrwuc6YUafRMQk3qMeo3Sz\nIZQbmLKXkZeYriqy9s9yHJSUnWX1jOa51w6YM/Xar/2pZp2pyguaCNVGp7AAo38R\nAepaGcFwyjJse6dc+7dHOvDnjQ+Cg2lO8DSc12sFLllOhdOULldZRWbtfTLs9uet\niR8ZVpHJ1TtzEz3X9RqBBCvnqykQvMmiQKOkfYEd6LN4Tk6/HJw2/MZhIgAEXtUU\ndQMnD6OMcwIDAQABo3oweDB2BgNVHREEbzBtghRzYW4xLmNwcy1leGFtcGxlLmNv\nbYIUc2FuMi5jcHMtZXhhbXBsZS5jb22CFHNhbjMuY3BzLWV4YW1wbGUuY29tghRz\nYW40LmNwcy1leGFtcGxlLmNvbYITd3d3LmNwcy1leGFtcGxlLmNvbTANBgkqhkiG\n9w0BAQsFAAOCAQEAm9krrTxqDwUaO8J7P7CcrHfwXeWiDG3d9uHqCvHRGrcs46pI\ny8umThgOEba0QHi6CwM6O0+chcHsn6qf+uVKg2u1SKlE6qMIJ1Ppc8MJky1xo0M5\ncrtRpSXjaoF9S2zZZK1lwOJoK93BtC/lNfRc682TxlQ58jtBI6qnmLXUhF8Yo67v\n0UfHiBIv1pZFPIdk90/48vjWM54haNxm/PhxNb6AdzawR4zImUhMKsISP7uOTURQ\nfFfeNgMvHyI8Id1VPLN+e2y4FtnTVdW2e+PTBvOJ1M+YoFU7M04/2SmKJHqnHljh\nVQBpto9JgDmt0yqsdFdLrZlpsIQwpLqdgKZlSw==\n-----END CERTIFICATE-----",
                     *           "ocspStapled": "false",
                     *           "ocspUris": null,
                     *           "signatureAlgorithm": "SHA-256"
                     *         },
                     *         "pendingNetworkConfiguration": {
                     *           "dnsNameSettings": null,
                     *           "mustHaveCiphers": "ak-akamai-2020q1",
                     *           "networkType": null,
                     *           "ocspStapling": "not-set",
                     *           "preferredCiphers": "ak-akamai-2020q1",
                     *           "quicEnabled": "false",
                     *           "sniOnly": "false",
                     *           "disallowedTlsVersions": [
                     *             "TLSv1_2"
                     *           ]
                     *         }
                     *       },
                     *       "validationResult": {
                     *         "errors": null,
                     *         "warnings": [
                     *           {
                     *             "message": "[SAN name [san9.example.com] removed from certificate is still live on the network., SAN name [san8.example.com] removed from certificate is still live on the network.]",
                     *             "messageCode": "no-code"
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/vnd.akamai.cps.change-management-info.v4+json": {
                        /** @description The timestamp of the deadline for the user to acknowledge the change management validation result, before CPS automatically proceeds with attempting to deploy the pending state to the live network. The format of the timestamp is ISO-8601. This field is only populated when there's an existing certificate on network for the current enrollment, it's `null` otherwise. */
                        acknowledgementDeadline?: string | null;
                        /** @description The snapshot of the pending state for the enrollment when this change takes effect. */
                        pendingState: {
                            /** @description The snapshot of the pending certificate for the enrollment when this change takes effect. */
                            pendingCertificate?: {
                                /**
                                 * @description Either `san`, `single`, `wildcard`, `wildcard-san`, or `third-party`.
                                 * @enum {string}
                                 */
                                certificateType: "san" | "single" | "wildcard" | "wildcard-san" | "third-party";
                                /** @description Displays the contents of the certificate. */
                                fullCertificate: string;
                                /** @description OCSP Stapling improves performance by including a valid OCSP response in every TLS handshake. We recommend all customers enable this feature. */
                                ocspStapled?: boolean;
                                /** @description URI used for OCSP stapling validation. */
                                ocspUris?: string[] | null;
                                /** @description Displays the signature algorithm. */
                                signatureAlgorithm: string | null;
                            };
                            /** @description The snapshot of the pending network configuration for the enrollment when this change takes effect. */
                            pendingNetworkConfiguration: {
                                /** @description Disallowed TLS protocols. */
                                disallowedTlsVersions?: string[];
                                /** @description DNS name settings. */
                                dnsNameSettings?: {
                                    /** @description All certificate SANs are included in `dnsNames` when `cloneDnsNames` is true. */
                                    cloneDnsNames: boolean;
                                    /** @description Names served by SNI-only enabled enrollments. */
                                    dnsNames?: string[];
                                } | null;
                                /** @description Ciphers included for your enrollment while deploying it on the network. */
                                mustHaveCiphers: string;
                                /** @description Enrollment network type. */
                                networkType?: string | null;
                                /** @description OCSP stapling setting for the deployment. */
                                ocspStapling?: string;
                                /** @description Ciphers included for your enrollment while deploying it on the network. */
                                preferredCiphers: string;
                                /** @description QUIC transport layer network protocol. */
                                quicEnabled: boolean;
                                /** @description Server Name Indication (SNI) setting for this Enrollment. */
                                sniOnly: boolean;
                            };
                        };
                        /** @description The hash of `validationResult`. It always has a value, even when `validationResult` is `null`. The hash result of the validation result as of the time of the most recent validation check. It is used in the `change-management-ack` API call to further specify the state of the change that is being acknowledged. We recommend you use the `change-management-info` API call, review the `validationResult` with its hash, and then acknowledge change-management using the same hash retrieved when running the Change Management Acknowledgment operation. */
                        validationResult?: {
                            /** @description Validation errors of the current job state. Errors prevent a change from proceeding until you resolve them. They are optional and only appear if there are any errors. */
                            errors?: {
                                /** @description The description of the message. */
                                message: string;
                                /** @description The unique code of the message. */
                                messageCode: string;
                            }[] | null;
                            /** @description Validation warnings of the current job state. Warnings suspend the execution of a change. You can acknowledge or deny warnings. If you acknowledge them, the change proceeds with its operation. They are optional and only appear if there are any warnings. */
                            warnings?: {
                                /** @description The description of the message. */
                                message: string;
                                /** @description The unique code of the message. */
                                messageCode: string;
                            }[];
                        };
                        /** @description The hash of `validationResult`. */
                        validationResultHash: string;
                    };
                    /** @example {
                     *       "acknowledgementDeadline": null,
                     *       "validationResultHash": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
                     *       "pendingState": {
                     *         "pendingNetworkConfiguration": {
                     *           "dnsNameSettings": null,
                     *           "mustHaveCiphers": "ak-akamai-2020q1",
                     *           "networkType": null,
                     *           "ocspStapling": "not-set",
                     *           "preferredCiphers": "ak-akamai-2020q1",
                     *           "quicEnabled": "false",
                     *           "sniOnly": "false",
                     *           "disallowedTlsVersions": [
                     *             "TLSv1_2"
                     *           ]
                     *         },
                     *         "pendingCertificates": [
                     *           {
                     *             "certificateType": "third-party",
                     *             "fullCertificate": "-----BEGIN CERTIFICATE-----\nMIID2 ... <sample - removed for readability> .... KZlSw==\n-----END CERTIFICATE-----",
                     *             "keyAlgorithm": "RSA",
                     *             "ocspStapled": "false",
                     *             "ocspUris": null,
                     *             "signatureAlgorithm": "SHA-256"
                     *           }
                     *         ]
                     *       },
                     *       "validationResult": {
                     *         "errors": null,
                     *         "warnings": [
                     *           {
                     *             "message": "[SAN name [san9.example.com] removed from certificate is still live on the network., SAN name [san8.example.com] removed from certificate is still live on the network.]",
                     *             "messageCode": "no-code"
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/vnd.akamai.cps.change-management-info.v5+json": {
                        /** @description The timestamp of the deadline for the user to acknowledge the change management validation result, before CPS automatically proceeds with attempting to deploy the pending state to the live network. The format of the timestamp is ISO-8601. This field is only populated when there's an existing certificate on network for the current enrollment, it's `null` otherwise. */
                        acknowledgementDeadline?: string | null;
                        /** @description The snapshot of the pending state for the enrollment when this change takes effect. */
                        pendingState: {
                            /** @description The snapshot of the pending certificate for the enrollment when this change takes effect. */
                            pendingCertificates: {
                                /**
                                 * @description Either `san`, `single`, `wildcard`, `wildcard-san`, or `third-party`.
                                 * @enum {string}
                                 */
                                certificateType: "san" | "single" | "wildcard" | "wildcard-san" | "third-party";
                                /** @description Displays the contents of the certificate. */
                                fullCertificate: string;
                                /**
                                 * @description Displays the key algorithm of the certificate.
                                 * @enum {string}
                                 */
                                keyAlgorithm?: "ECDSA" | "RSA";
                                /** @description OCSP Stapling improves performance by including a valid OCSP response in every TLS handshake. We recommend all customers enable this feature. */
                                ocspStapled?: boolean;
                                /** @description URI used for OCSP stapling validation. */
                                ocspUris?: string[] | null;
                                /** @description Displays the signature algorithm. */
                                signatureAlgorithm: string | null;
                            }[];
                            /** @description The snapshot of the pending network configuration for the enrollment when this change takes effect. */
                            pendingNetworkConfiguration: {
                                /** @description Disallowed TLS protocols. */
                                disallowedTlsVersions?: string[];
                                /** @description DNS name settings. */
                                dnsNameSettings?: {
                                    /** @description All certificate SANs are included in `dnsNames` when `cloneDnsNames` is true. */
                                    cloneDnsNames: boolean;
                                    /** @description Names served by SNI-only enabled enrollments. */
                                    dnsNames?: string[];
                                } | null;
                                /** @description Ciphers included for your enrollment while deploying it on the network. */
                                mustHaveCiphers: string;
                                /** @description Enrollment network type. */
                                networkType?: string | null;
                                /**
                                 * @description OCSP stapling setting for the deployment.
                                 * @enum {string}
                                 */
                                ocspStapling?: "on" | "off" | "not-set";
                                /** @description Ciphers included for your enrollment while deploying it on the network. */
                                preferredCiphers: string;
                                /** @description QUIC transport layer network protocol. */
                                quicEnabled: boolean;
                                /** @description Server Name Indication (SNI) setting for this Enrollment. */
                                sniOnly: boolean;
                            };
                        };
                        /** @description The hash of `validationResult`. It always has a value, even when `validationResult` is `null`. The hash result of the validation result as of the time of the most recent validation check. It is used in the `change-management-ack` API call to further specify the state of the change that is being acknowledged. We recommend you use the `change-management-info` API call, review the `validationResult` with its hash, and then acknowledge change-management using the same hash retrieved when running the Change Management Acknowledgment operation. */
                        validationResult?: {
                            /** @description Validation errors of the current job state. Errors prevent a change from proceeding until you resolve them. They are optional and only appear if there are any errors. */
                            errors?: {
                                /** @description The description of the message. */
                                message: string;
                                /** @description The unique code of the message. */
                                messageCode: string;
                            }[] | null;
                            /** @description Validation warnings of the current job state. Warnings suspend the execution of a change. You can acknowledge or deny warnings. If you acknowledge them, the change proceeds with its operation. They are optional and only appear if there are any warnings. */
                            warnings?: {
                                /** @description The description of the message. */
                                message: string;
                                /** @description The unique code of the message. */
                                messageCode: string;
                            }[];
                        };
                        /** @description The hash of `validationResult`. */
                        validationResultHash: string;
                    };
                    /** @example {
                     *       "csr": "-----BEGIN CERTIFICATE REQUEST-----\nMIIDPT ... <sample - removed for readability> .... hA9jc=\n-----END CERTIFICATE REQUEST-----"
                     *     } */
                    "application/vnd.akamai.cps.csr.v1+json": {
                        /** @description String with PEM formatted CSR. */
                        csr?: string | null;
                    };
                    /** @example {
                     *       "csrs": [
                     *         {
                     *           "csr": "-----BEGIN CERTIFICATE REQUEST-----\nMIIDPT ... <sample - removed for readability> .... hA9jc=\n-----END CERTIFICATE REQUEST-----",
                     *           "keyAlgorithm": "RSA"
                     *         }
                     *       ]
                     *     } */
                    "application/vnd.akamai.cps.csr.v2+json": {
                        /** @description Certificate Signing Request (CSR) objects. */
                        csrs: {
                            /** @description String with PEM formatted CSR. */
                            csr: string;
                            /**
                             * @description Key algorithm of the certificate, either `ECDSA` or `RSA`.
                             * @enum {string}
                             */
                            keyAlgorithm?: "ECDSA" | "RSA";
                        }[];
                    };
                    /** @example {
                     *       "certificate": "-----BEGIN CERTIFICATE-----\nMIID2 ... <sample - removed for readability> .... ZlSw==\n-----END CERTIFICATE-----",
                     *       "signatureAlgorithm": "SHA-256",
                     *       "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDT ... <sample - removed for readability> .... JuAIQ=\n-----END CERTIFICATE-----",
                     *       "networkConfiguration": {
                     *         "geography": "standard-worldwide",
                     *         "mustHaveCiphers": "ak-akamai-2020q1",
                     *         "preferredCiphers": "ak-akamai-2020q1",
                     *         "secureNetwork": "enhanced-tls",
                     *         "disallowedTlsVersions": [],
                     *         "sni": {
                     *           "cloneDnsNames": true,
                     *           "dnsNames": [
                     *             "san2.example.com",
                     *             "san1.example.com"
                     *           ]
                     *         }
                     *       }
                     *     } */
                    "application/vnd.akamai.cps.deployment.v3+json": {
                        /** @description The certificate text. */
                        certificate: string | null;
                        /** @description Information about how you want to deploy your certificate. */
                        networkConfiguration: {
                            /** @description Disallowed TLS versions. */
                            disallowedTlsVersions?: string[];
                            /**
                             * @description Type of the network that you want to deploy your certificate. `core` is worldwide (includes China and Russia). `china+core` is worldwide and China. `russia+core` is worldwide and Russia.
                             * @enum {string}
                             */
                            geography?: "core" | "china+core" | "russia+core";
                            /** @description Ciphers that you definitely want to include for your enrollment while deploying it on the network. Defaults to `ak-akamai-default` when it is not set. */
                            mustHaveCiphers?: string;
                            /** @description Ciphers that you preferably want to include for your enrollment while deploying it on the network. Defaults to `ak-akamai-default` when it is not set. */
                            preferredCiphers?: string;
                            /** @description The type of deployment network you want to use. Specify Standard TLS as the enum `standard-tls` to deploy your certificate to Akamai's standard secure network. It is not PCI compliant. Specify Enhanced TLS as the enum `enhanced-tls` to deploy your certificate to Akamai's more secure network with PCI compliance capability. */
                            secureNetwork?: string;
                            /** @description SNI settings for your enrollment. When set to `null`, the enrollment becomes non-SNI. When it is non-null, enrollment is SNI-only. This setting cannot be changed once an enrollment is created. */
                            sni?: {
                                /** @description Enable if you want CPS to direct traffic using all the SANs listed in the SANs parameter when you created your enrollment. */
                                cloneDnsNames: boolean;
                                /** @description Names served by SNI-only enabled enrollments. */
                                dnsNames?: string[];
                            } | null;
                        };
                        /**
                         * @description The SHA (Secure Hash Algorithm) function. Current values include `SHA-1` & `SHA-256`.
                         * @enum {string|null}
                         */
                        signatureAlgorithm?: "SHA-1" | "SHA-256" | null;
                        /** @description The trust chain text. You may have any number of trust chains. */
                        trustChain: string | null;
                    };
                    /** @example {
                     *       "ocspStapled": true,
                     *       "ocspUris": [
                     *         "http://ocsp.example.com"
                     *       ],
                     *       "networkConfiguration": {
                     *         "geography": "core",
                     *         "mustHaveCiphers": "ak-akamai-2020q1",
                     *         "ocspStapling": "not-set",
                     *         "preferredCiphers": "ak-akamai-2020q1",
                     *         "quicEnabled": false,
                     *         "secureNetwork": "standard-tls",
                     *         "sniOnly": true,
                     *         "disallowedTlsVersions": [],
                     *         "dnsNames": [
                     *           "san2.example.com",
                     *           "san1.example.com"
                     *         ]
                     *       },
                     *       "primaryCertificate": {
                     *         "certificate": "-----BEGIN CERTIFICATE-----\nMIID2 ... <sample - removed for readability> .... ZlSw==\n-----END CERTIFICATE-----",
                     *         "expiry": "2021-06-10T12:00:00Z",
                     *         "signatureAlgorithm": "SHA-256",
                     *         "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDT ... <sample - removed for readability> .... JuAIQ=\n-----END CERTIFICATE-----"
                     *       },
                     *       "multiStackedCertificates": [
                     *         {
                     *           "certificate": "-----BEGIN CERTIFICATE-----\nMIID2 ... <sample - removed for readability> .... ZlSw==\n-----END CERTIFICATE-----",
                     *           "expiry": "2021-06-10T12:00:00Z",
                     *           "signatureAlgorithm": "SHA-256",
                     *           "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDT ... <sample - removed for readability> .... JuAIQ=\n-----END CERTIFICATE-----"
                     *         }
                     *       ]
                     *     } */
                    "application/vnd.akamai.cps.deployment.v6+json": {
                        /** @description Dual-stacked certificates today include an ECDSA certificate in addition to an RSA certificate. */
                        multiStackedCertificates: {
                            /** @description The certificate text. */
                            certificate: string | null;
                            /** @description The expiration date for the certificate. */
                            expiry?: string;
                            /**
                             * @description The SHA (Secure Hash Algorithm) function. Current values include `SHA-1` & `SHA-256`.
                             * @enum {string|null}
                             */
                            signatureAlgorithm?: "SHA-1" | "SHA-256" | null;
                            /** @description The trust chain for the certificate. */
                            trustChain: string | null;
                        }[];
                        /** @description Network configuration properties. */
                        networkConfiguration: {
                            /** @description Disallowed TLS protocol. */
                            disallowedTlsVersions?: string[];
                            /** @description Names served by SNI-only enabled enrollments. */
                            dnsNames?: string[];
                            /**
                             * @description Type of the network that you want to deploy your certificate. `core` is worldwide (includes China and Russia). `china+core` is worldwide and China. `russia+core` is worldwide and Russia.
                             * @enum {string}
                             */
                            geography?: "core" | "china+core" | "russia+core";
                            /** @description Ciphers that you definitely want to include for your enrollment while deploying it on the network. For more information on cipher profiles, see [Akamai community](https://community.akamai.com/customers/s/article/SSL-TLS-Cipher-Profiles-for-Akamai-Secure-CDNrxdxm). */
                            mustHaveCiphers?: string;
                            /** @description OCSP stapling setting for the deployment. */
                            ocspStapling?: string;
                            /** @description Ciphers that you preferably want to include for your enrollment while deploying it on the network. For more information on cipher profiles, see [Akamai community](https://community.akamai.com/customers/s/article/SSL-TLS-Cipher-Profiles-for-Akamai-Secure-CDNrxdxm). */
                            preferredCiphers?: string;
                            /** @description QUIC transport layer network protocol. */
                            quicEnabled: boolean;
                            /** @description The type of deployment network. `standard-tls` means Akamai's standard secure network, while `enhanced-tls` means Akamai's more secure network with PCI compliance capability. */
                            secureNetwork?: string;
                            /** @description Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. */
                            sniOnly: boolean;
                        };
                        /** @description OCSP Stapling improves performance by including a valid OCSP response in every TLS handshake. We recommend all customers enable this feature. */
                        ocspStapled?: boolean;
                        /** @description URI used for OCSP stapling validation. */
                        ocspUris?: string[] | null;
                        /** @description Primary certificate of the enrollment. */
                        primaryCertificate: {
                            /** @description The certificate text. */
                            certificate: string | null;
                            /** @description The expiration date for the certificate. */
                            expiry?: string;
                            /**
                             * @description The SHA (Secure Hash Algorithm) function. Current values include `SHA-1` & `SHA-256`.
                             * @enum {string|null}
                             */
                            signatureAlgorithm?: "SHA-1" | "SHA-256" | null;
                            /** @description The trust chain for the certificate. */
                            trustChain: string | null;
                        } | null;
                    };
                    /** @example {
                     *       "production": {
                     *         "ocspStapled": true,
                     *         "ocspUris": [
                     *           "http://ocsp.example.com"
                     *         ],
                     *         "networkConfiguration": {
                     *           "geography": "core",
                     *           "mustHaveCiphers": "ak-akamai-2020q1",
                     *           "ocspStapling": "not-set",
                     *           "preferredCiphers": "ak-akamai-2020q1",
                     *           "quicEnabled": false,
                     *           "secureNetwork": "standard-tls",
                     *           "sniOnly": true,
                     *           "disallowedTlsVersions": [],
                     *           "dnsNames": [
                     *             "san2.example.com",
                     *             "san1.example.com"
                     *           ]
                     *         },
                     *         "primaryCertificate": {
                     *           "certificate": "-----BEGIN CERTIFICATE-----\nMIID2 ... <sample - removed for readability> .... ZlSw==\n-----END CERTIFICATE-----",
                     *           "expiry": "2021-06-10T12:00:00Z",
                     *           "keyAlgorithm": "RSA",
                     *           "signatureAlgorithm": "SHA-256",
                     *           "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDT ... <sample - removed for readability> .... JuAIQ=\n-----END CERTIFICATE-----"
                     *         },
                     *         "multiStackedCertificates": [
                     *           {
                     *             "certificate": "-----BEGIN CERTIFICATE-----\nMIID2 ... <sample - removed for readability> .... ZlSw==\n-----END CERTIFICATE-----",
                     *             "expiry": "2021-06-10T12:00:00Z",
                     *             "keyAlgorithm": "ECDSA",
                     *             "signatureAlgorithm": "SHA-256",
                     *             "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDT ... <sample - removed for readability> .... JuAIQ=\n-----END CERTIFICATE-----"
                     *           }
                     *         ]
                     *       },
                     *       "staging": {
                     *         "ocspStapled": true,
                     *         "ocspUris": [
                     *           "http://ocsp.example.com"
                     *         ],
                     *         "networkConfiguration": {
                     *           "geography": "core",
                     *           "mustHaveCiphers": "ak-akamai-2020q1",
                     *           "ocspStapling": "not-set",
                     *           "preferredCiphers": "ak-akamai-2020q1",
                     *           "quicEnabled": false,
                     *           "secureNetwork": "standard-tls",
                     *           "sniOnly": true,
                     *           "disallowedTlsVersions": [],
                     *           "dnsNames": [
                     *             "san2.example.com",
                     *             "san1.example.com"
                     *           ]
                     *         },
                     *         "primaryCertificate": {
                     *           "certificate": "-----BEGIN CERTIFICATE-----\nMIID2 ... <sample - removed for readability> .... ZlSw==\n-----END CERTIFICATE-----",
                     *           "expiry": "2021-06-10T12:00:00Z",
                     *           "keyAlgorithm": "RSA",
                     *           "signatureAlgorithm": "SHA-256",
                     *           "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDT ... <sample - removed for readability> .... JuAIQ=\n-----END CERTIFICATE-----"
                     *         },
                     *         "multiStackedCertificates": [
                     *           {
                     *             "certificate": "-----BEGIN CERTIFICATE-----\nMIID2 ... <sample - removed for readability> .... ZlSw==\n-----END CERTIFICATE-----",
                     *             "expiry": "2021-06-10T12:00:00Z",
                     *             "keyAlgorithm": "ECDSA",
                     *             "signatureAlgorithm": "SHA-256",
                     *             "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDT ... <sample - removed for readability> .... JuAIQ=\n-----END CERTIFICATE-----"
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/vnd.akamai.cps.deployment.v7+json": {
                        /** @description Dual-stacked certificates today include an ECDSA certificate in addition to an RSA certificate. */
                        multiStackedCertificates: {
                            /** @description The certificate text. */
                            certificate: string | null;
                            /** @description The expiration date for the certificate. */
                            expiry?: string;
                            /**
                             * @description The key algorithm of the certificate.
                             * @enum {string}
                             */
                            keyAlgorithm?: "ECDSA" | "RSA";
                            /**
                             * @description The SHA (Secure Hash Algorithm) function. Current values include `SHA-1` & `SHA-256`.
                             * @enum {string|null}
                             */
                            signatureAlgorithm?: "SHA-1" | "SHA-256" | null;
                            /** @description The trust chain for the certificate. */
                            trustChain: string | null;
                        }[];
                        /** @description Network configuration properties. */
                        networkConfiguration: {
                            /** @description Disallowed TLS protocol. */
                            disallowedTlsVersions?: string[];
                            /** @description Names served by SNI-only enabled enrollments. */
                            dnsNames?: string[];
                            /**
                             * @description Type of the network that you want to deploy your certificate. `core` is worldwide (includes China and Russia). `china+core` is worldwide and China. `russia+core` is worldwide and Russia.
                             * @enum {string}
                             */
                            geography?: "core" | "china+core" | "russia+core";
                            /** @description Ciphers that you definitely want to include for your enrollment while deploying it on the network. For more information on cipher profiles, see [Akamai community](https://community.akamai.com/customers/s/article/SSL-TLS-Cipher-Profiles-for-Akamai-Secure-CDNrxdxm). */
                            mustHaveCiphers?: string;
                            /**
                             * @description OCSP stapling setting for the deployment.
                             * @enum {string}
                             */
                            ocspStapling?: "on" | "off" | "not-set";
                            /** @description Ciphers that you preferably want to include for your enrollment while deploying it on the network. For more information on cipher profiles, see [Akamai community](https://community.akamai.com/customers/s/article/SSL-TLS-Cipher-Profiles-for-Akamai-Secure-CDNrxdxm). */
                            preferredCiphers?: string;
                            /** @description QUIC transport layer network protocol. */
                            quicEnabled: boolean;
                            /**
                             * @description The type of deployment network. `standard-tls` means Akamai's standard secure network, while `enhanced-tls` means Akamai's more secure network with PCI compliance capability.
                             * @enum {string}
                             */
                            secureNetwork?: "enhanced-tls" | "standard-tls";
                            /** @description Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. */
                            sniOnly: boolean;
                        };
                        /** @description OCSP Stapling improves performance by including a valid OCSP response in every TLS handshake. We recommend all customers enable this feature. */
                        ocspStapled?: boolean;
                        /** @description URI used for OCSP stapling validation. */
                        ocspUris?: string[] | null;
                        /** @description Primary certificate of the enrollment. */
                        primaryCertificate: {
                            /** @description The certificate text. */
                            certificate: string | null;
                            /** @description The expiration date for the certificate. */
                            expiry?: string;
                            /**
                             * @description The key algorithm of the certificate.
                             * @enum {string}
                             */
                            keyAlgorithm?: "ECDSA" | "RSA";
                            /**
                             * @description The SHA (Secure Hash Algorithm) function. Current values include `SHA-1` & `SHA-256`.
                             * @enum {string|null}
                             */
                            signatureAlgorithm?: "SHA-1" | "SHA-256" | null;
                            /** @description The trust chain for the certificate. */
                            trustChain: string | null;
                        } | null;
                    };
                    /** @example {
                     *       "challenges": [
                     *         {
                     *           "domain": "www.cps-example-dv.com",
                     *           "error": "The domain is not ready for validation.",
                     *           "expires": "2017-05-19T18:00:00Z",
                     *           "fullPath": "http://www.cps-example-dv.com/.well-known/acme-challenge/abcdefghijklmno-KuzBi3q5Dr6TU8ViHSDSf-c9Iyg",
                     *           "redirectFullPath": "http://dcv.akamai.com/.well-known/acme-challenge/abcdefghijklmno-KuzBi3q5Dr6TU8ViHSDSf-c9Iyg",
                     *           "requestTimestamp": "2017-05-19T17:20:00Z",
                     *           "responseBody": "12345-...-abcdef",
                     *           "status": "Awaiting user",
                     *           "token": "abcdefghijklmno-123453q5Dr6TU8ViHSDSf-c9Iyg",
                     *           "validatedTimestamp": "2017-05-19T17:35:22Z"
                     *         }
                     *       ]
                     *     } */
                    "application/vnd.akamai.cps.dv-challenges.v1+json": {
                        /** @description Domains that need to be validated for this Enrollment. V1 only supports and displays http-01 challenge. */
                        challenges: {
                            /** @description Domain which is being validated. */
                            domain?: string;
                            /** @description Current validation status for domains not yet validated. */
                            error?: string | null;
                            /** @description Timestamp when this token or validation will expire. Sample 2014-08-12T18:57:07z. */
                            expires?: string;
                            /** @description URL where Let's Encrypt will request and expect to find 'token' as content. */
                            fullPath?: string;
                            /** @description The URL where Akamai publishes `responseBody` for Let's Encrypt to validate. The client can configure a redirect at `fullPath` to redirect requests to this `redirectFullPath` URL, keeping in mind that the token may change over time. */
                            redirectFullPath?: string;
                            /** @description Timestamp Akamai received validation token from Let's Encrypt. Sample `2014-08-12T18:57:07z`. */
                            requestTimestamp?: string;
                            /** @description The data Let's Encrypt expects to find served at `fullPath` URL. */
                            responseBody?: string;
                            /** @description The domain validation status. */
                            status?: string;
                            /** @description The validation token issued by Let's Encrypt. */
                            token?: string;
                            /** @description Timestamp when domain was successfully validated. Sample 2014-08-12T18:57:07z. */
                            validatedTimestamp?: string;
                        }[];
                    };
                    /** @example {
                     *       "dv": [
                     *         {
                     *           "domain": "www.cps-example-dv.com",
                     *           "error": "The domain is not ready for validation.",
                     *           "expires": "2021-09-06T17:55:17Z",
                     *           "requestTimestamp": "2021-09-05T15:55:49Z",
                     *           "status": "Awaiting user",
                     *           "validatedTimestamp": "2021-09-05T17:53:22Z",
                     *           "validationStatus": "RESPONSE_ERROR",
                     *           "challenges": [
                     *             {
                     *               "error": null,
                     *               "fullPath": "http://www.cps-example-dv.com/.well-known/acme-challenge/abcdefghijklmno-123453q5Dr6TU8ViHSDSf-c9Iyg",
                     *               "redirectFullPath": "http://dcv.akamai.com/.well-known/acme-challenge/abcdefghijklmno-123453q5Dr6TU8ViHSDSf-c9Iyg",
                     *               "responseBody": "AAA-dvq11111CmSWBzwIFpc4G2OCh5YXoHK56VccGmU.-BBBBBD3eQiu1uf5vf4xp-ZJv71AiycGGMuLtf06BnA",
                     *               "status": "pending",
                     *               "token": "abcdefghijklmno-123453q5Dr6TU8ViHSDSf-c9Iyg",
                     *               "type": "http-01",
                     *               "validationRecords": []
                     *             },
                     *             {
                     *               "error": null,
                     *               "fullPath": "_acme-challenge.www.cps-example-dv.com.",
                     *               "redirectFullPath": "",
                     *               "responseBody": "0yVISDJjpXR7BXzR5QgfA51tt-I6aKremGnPwK_lvH4",
                     *               "status": "pending",
                     *               "token": "cGBnw-3YO7rUhq61EuuHqcGrYkaQWALAgi8szTqRoHA",
                     *               "type": "dns-01",
                     *               "validationRecords": []
                     *             }
                     *           ]
                     *         }
                     *       ]
                     *     } */
                    "application/vnd.akamai.cps.dv-challenges.v2+json": {
                        /** @description Array of Domain Validation entities. */
                        dv: {
                            /** @description Domains that need to be validated for this Enrollment. V1 only supports and displays http-01 challenge. V2 allows HTTP and DNS challenge types. Each domain in the enrollment can have multiple challenges and can use a different challenge types. To validate a domain, only one challenge for each domain must be complete. */
                            challenges: {
                                /** @description Error message describing failure to validate domain control. */
                                error?: string | null;
                                /** @description URL where Let's Encrypt will request and expect to find 'token' as content. */
                                fullPath?: string;
                                /** @description The URL where Akamai publishes `responseBody` for Let's Encrypt to validate. The client can configure a redirect at `fullPath` to redirect requests to this `redirectFullPath` URL, keeping in mind that the token may change over time. */
                                redirectFullPath?: string;
                                /** @description The data Let's Encrypt expects to find served at `fullPath` URL. */
                                responseBody?: string;
                                /**
                                 * @description The domain validation status. Current values include `Preparing`, `Pending`, `Awaiting user`, `Valid`, `Invalid`, `Error` & `Ready for Validation`.
                                 * @enum {string}
                                 */
                                status?: "Preparing" | "Pending" | "Awaiting user" | "Valid" | "Invalid" | "Error" | "Ready for Validation";
                                /** @description The validation token issued by Let's Encrypt. */
                                token?: string;
                                /**
                                 * @description Validation type. Currently supported types include `dns-01` & `http-01`.
                                 * @enum {string}
                                 */
                                type?: "dns-01" | "http-01";
                                /** @description Validation attempts and status. */
                                validationRecords: {
                                    /** @description Validation authorities. */
                                    authorities?: string[];
                                    /** @description Domain name being validated. */
                                    hostname?: string;
                                    /** @description Port used for validation. */
                                    port?: string;
                                    /** @description IPs resolved for name being validated. */
                                    resolvedIp?: string[];
                                    /** @description IP from `resolvedIp` tried for this validation. */
                                    triedIp?: string;
                                    /** @description URL attempted validated. */
                                    url?: string;
                                    /** @description IP from `resolvedIp` used for this validation. */
                                    usedIp?: string;
                                }[];
                            }[];
                            /** @description Domain which is being validated. */
                            domain?: string;
                            /** @description Current validation status for domains not yet validated. */
                            error?: string | null;
                            /** @description Timestamp when this token or validation will expire. Sample 2017-12-05T18:57:07z. */
                            expires?: string;
                            /** @description Timestamp Akamai received validation token from Let's Encrypt. Sample `2017-12-12T18:57:07z`. */
                            requestTimestamp?: string;
                            /** @description Let's Encrypt validation status. Required `Valid` for certificate generation. */
                            status?: string;
                            /** @description Timestamp when domain was successfully validated. Sample 2017-12-12T18:57:07z. */
                            validatedTimestamp?: string;
                            /** @description Status of the domain validation process. */
                            validationStatus?: string;
                        }[];
                    };
                    /** @example {
                     *       "warnings": "Some of the domains being provisioned (%s) exist on another certificate. Akamai recommends against overlapping names on Enhanced TLS and Standard TLS certificates except during digital property migrations. Enhanced TLS traffic could be misdirected in the event of DNS misconfiguration and treated as Standard TLS until the overlap is eliminated."
                     *     } */
                    "application/vnd.akamai.cps.warnings.v1+json": {
                        /** @description String with comma separated list of warnings. */
                        warnings?: string;
                    };
                };
            };
        };
    };
    "post-change-allowed-input-param": {
        parameters: {
            query?: {
                /**
                 * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
                 * @example {{accountSwitchKey}}
                 */
                accountSwitchKey?: string;
            };
            header: {
                /**
                 * @description __Enum__ Must be used to specify a request type.
                 * @example {{Content-Type}}
                 */
                "Content-Type": "application/vnd.akamai.cps.certificate-and-trust-chain.v2+json" | "application/vnd.akamai.cps.certificate-and-trust-chain.v1+json" | "application/vnd.akamai.cps.acknowledgement-with-hash.v1+json" | "application/vnd.akamai.cps.acknowledgement.v1+json";
                /**
                 * @description __Enum__ Specifies the response type.
                 * @example {{Accept}}
                 */
                Accept: "application/vnd.akamai.cps.change-id.v1+json";
            };
            path: {
                /**
                 * @description __Enum__ Found as the last part of `Change.allowedInput[].update` hypermedia URL. See [Change Input Content Type Mapping](https://techdocs.akamai.com/cps/reference/change-input-content-type-mapping) for details. Currently supported values include `change-management-ack`, `lets-encrypt-challenges-completed`, `post-verification-warnings-ack`, `pre-verification-warnings-ack`, `third-party-cert-and-trust-chain`.
                 * @example {{allowedInputTypeParam}}
                 */
                allowedInputTypeParam: "change-management-ack" | "lets-encrypt-challenges-completed" | "post-verification-warnings-ack" | "pre-verification-warnings-ack" | "third-party-cert-and-trust-chain";
                /**
                 * @description The change for this enrollment on which to perform the desired operation.
                 * @example {{changeId}}
                 */
                changeId: number;
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "acknowledgement": "acknowledge",
                 *       "hash": "24fb6fb91d290370c13a39e76afc1b26"
                 *     } */
                "application/vnd.akamai.cps.acknowledgement-with-hash.v1+json": {
                    /**
                     * @description The state for which this Acknowledgment is submitted, either `acknowledge`, `deny`.
                     * @enum {string}
                     */
                    acknowledgement: "acknowledge" | "deny";
                    /** @description A hash is the state that this request acknowledges. You use this when you want to be explicit about what state you're acknowledging in order to prevent race conditions, such as when the state changes while the acknowledgment POST operation is in progress. */
                    hash: string;
                };
                /** @example {
                 *       "acknowledgement": "acknowledge"
                 *     } */
                "application/vnd.akamai.cps.acknowledgement.v1+json": {
                    /**
                     * @description The state for which this Acknowledgment is submitted, either `acknowledge`, `deny`.
                     * @enum {string}
                     */
                    acknowledgement: "acknowledge" | "deny";
                };
                /** @example {
                 *       "certificate": "-----BEGIN CERTIFICATE-----\nMIID2DCCAsCgAwIBAgIQ661To2+zTDiFLyyARAaFXTANBgkqhkiG9w0BAQsFADBn\nMSowKAYDVQQDDCFBS0FNQUkgVEVTVCBJTlRFUk1FRElBVEUgQ0VSVCBbMV0xDjAM\nBgNVBAsMBVdlYkV4MQ8wDQYDVQQKDAZBa2FtYWkxCzAJBgNVBAgMAk1BMQswCQYD\nVQQGEwJVUzAeFw0xNzA1MTgyMTEwMTFaFw0xODA1MTkyMTEwMTFaMG0xHDAaBgNV\nBAMME3d3dy5jcHMtZXhhbXBsZS5jb20xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJN\nQTESMBAGA1UEBwwJQ2FtYnJpZGdlMQ8wDQYDVQQKDAZBa2FtYWkxDjAMBgNVBAsM\nBVdlYkV4MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvQeIJ2yfOC8P\nYQp6NjiCYSCkuS0z9a61v+k+KTDYQKIa8jDkwP0OITzvTnjMHuUd8JbSz5jNb22Z\nWxH/1F2p71rlSdBReBkZGLMLcQZPt5ju7ea7ZPz+MOWrwuc6YUafRMQk3qMeo3Sz\nIZQbmLKXkZeYriqy9s9yHJSUnWX1jOa51w6YM/Xar/2pZp2pyguaCNVGp7AAo38R\nAepaGcFwyjJse6dc+7dHOvDnjQ+Cg2lO8DSc12sFLllOhdOULldZRWbtfTLs9uet\niR8ZVpHJ1TtzEz3X9RqBBCvnqykQvMmiQKOkfYEd6LN4Tk6/HJw2/MZhIgAEXtUU\ndQMnD6OMcwIDAQABo3oweDB2BgNVHREEbzBtghRzYW4xLmNwcy1leGFtcGxlLmNv\nbYIUc2FuMi5jcHMtZXhhbXBsZS5jb22CFHNhbjMuY3BzLWV4YW1wbGUuY29tghRz\nYW40LmNwcy1leGFtcGxlLmNvbYITd3d3LmNwcy1leGFtcGxlLmNvbTANBgkqhkiG\n9w0BAQsFAAOCAQEAm9krrTxqDwUaO8J7P7CcrHfwXeWiDG3d9uHqCvHRGrcs46pI\ny8umThgOEba0QHi6CwM6O0+chcHsn6qf+uVKg2u1SKlE6qMIJ1Ppc8MJky1xo0M5\ncrtRpSXjaoF9S2zZZK1lwOJoK93BtC/lNfRc682TxlQ58jtBI6qnmLXUhF8Yo67v\n0UfHiBIv1pZFPIdk90/48vjWM54haNxm/PhxNb6AdzawR4zImUhMKsISP7uOTURQ\nfFfeNgMvHyI8Id1VPLN+e2y4FtnTVdW2e+PTBvOJ1M+YoFU7M04/2SmKJHqnHljh\nVQBpto9JgDmt0yqsdFdLrZlpsIQwpLqdgKZlSw==\n-----END CERTIFICATE-----",
                 *       "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDTDCCAjQCEB1FmMGD0kjutSE218ho23wwDQYJKoZIhvcNAQELBQAwYjElMCMG\nA1UEAwwcd3d3LkNQUy1Ba2FtYWktVGVzdC1Sb290LmNvbTEOMAwGA1UECwwFV2Vi\nRXgxDzANBgNVBAoMBkFrYW1haTELMAkGA1UECAwCTUExCzAJBgNVBAYTAlVTMB4X\nDTE3MDUxODIxMTAxMVoXDTE4MDUxOTIxMTAxMVowZzELMAkGA1UEBhMCVVMxCzAJ\nBgNVBAgMAk1BMQ8wDQYDVQQKDAZBa2FtYWkxDjAMBgNVBAsMBVdlYkV4MSowKAYD\nVQQDDCFBS0FNQUkgVEVTVCBJTlRFUk1FRElBVEUgQ0VSVCBbMV0wggEiMA0GCSqG\nSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCyxuHi0zL03f+3ZTKLV1lMHvS2LkUwCKEd\nApJw/v+yPPBTuamvikHQ8L5QM1p7BevavdeBMUAoGGXXQkrRtotCkL4S6N9cgH47\n+cUeXCT0D2BaOkR15N7qDVtkYeAtC7eKUI7+j99iZXAFr8Nel9wqNn/9804HyF+F\nZ/YS5oPBuJVGcTQhd8bmUx5wBgr3n6EhqvOHEEAa5whb5PoP/hFi0xO0SFG/LA/+\nK2NMvaE/9Y9j48/ONAFavf80s/y55SudZyBsjowtnZLIeJ4bM6nCN5DMAljH5U3O\nPFjSFKlbPxQgIcP9wLbQTV6b47tNK8c9jPg+U4jK2xtncJ2ijxSXAgMBAAEwDQYJ\nKoZIhvcNAQELBQADggEBACVVWGcirfBhkDwIuNELh1rzKPmhxwhx9hAsYz2B2FDn\n7q82c85hXLfFSZ/9I3bzotVDh4YucCV+vxUXQcYt5tEDbg96uHNzRzXQUTdJSNIe\nbQ5Yn86ELLrzaXAD3+t6ztj8Z9dIVfG7LrAOg3UX5GjfEUrjNfZaiiUcBqLKibJ5\nOqOJcPlbjKZ1kOqrCqlOugcQrZPgpzHkwssUR7v0VtHBHWnzjDTGaMXmvy1LsULA\n3N35SDGFI/Zpw56R4z95UwpmDYg3IKwAGY8XL/oMqTORWyYDUpy1dpcAln5HcZK3\nthju6KdIwCwmthk1iIUAri6avIrh7Mg2SHFho/4p5mA=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDQzCCAi0CEO7lWBUwDEEclty6iX7gCMcwCwYJKoZIhvcNAQELMGIxCzAJBgNV\nBAYTAlVTMQswCQYDVQQIDAJNQTEPMA0GA1UECgwGQWthbWFpMQ4wDAYDVQQLDAVX\nZWJFeDElMCMGA1UEAwwcd3d3LkNQUy1Ba2FtYWktVGVzdC1Sb290LmNvbTAeFw0x\nNzA1MTgyMTEwMTFaFw0yMjA1MTgyMTEwMTFaMGIxCzAJBgNVBAYTAlVTMQswCQYD\nVQQIDAJNQTEPMA0GA1UECgwGQWthbWFpMQ4wDAYDVQQLDAVXZWJFeDElMCMGA1UE\nAwwcd3d3LkNQUy1Ba2FtYWktVGVzdC1Sb290LmNvbTCCASIwDQYJKoZIhvcNAQEB\nBQADggEPADCCAQoCggEBAJCbd5QpPJr0I48G4VE0JF5N719Wsspc8lEEgf2oM4BL\n6pAyxU6hm8YzSfCx/NBpU2MYMa96FDoYWUVfj4iilpV4IpLdsDtXjMJ2fnVXP4iI\n9n5EhF3oKGx2bAgBKpXIWXwPo3fqg/MGsdwIgrYyab3xJuwHP3V/2MSxzcHpxQrU\nE8jaemBXv6v0oTx50Ph0zJP+wYwvaDf+KVFzM3E42Ww9VLuP3lt5RAtasNctqlRr\nSlpH3RrZ0Gkpmz6xGr2LvLw12nkTylws/bafCSFAs7+x2ip6pP3yEaYxKdMpeOIE\nWaVU1RsJiWVYgq+b6gc9wrRpfZLyJYdAa50DuEv8jm0CAwEAATALBgkqhkiG9w0B\nAQsDggEBAFbv9+6pQBXDiFOxoYmu1/xiI1/mSGqooJtzNZjoni6HsruGxSqRbbKa\n3GdaPVInZwWY7p8T1RM8+YDTrRrjbfRuRPqdgUBv8iDbcldJNXsqD1CylxLi0lul\ndnHgQD9TmcrTs3ELeT277PE2f8AX3YjhYK8IIGBmDomc1KRTka3nZtexIwfiEQJr\nRzsFL+1vwPoSJFKb1NzeOGikkPNmipQvYKGY9A/q2XeqrEWKGHizPwvcIu7EC8wL\nRooQ3ztqAV3Wul5dI5+AEE8WQzUyzCq7BEgOgNaX403g8An5QueSjhogbYdRd3BM\n+OWJc8qePy3KgqY44s3kbrPR6sJuAIQ=\n-----END CERTIFICATE-----"
                 *     } */
                "application/vnd.akamai.cps.certificate-and-trust-chain.v1+json": {
                    /** @description The certificate text. */
                    certificate: string | null;
                    /** @description The trust chain text. You may have no trust chains or multiple trust chains. */
                    trustChain?: string | null;
                };
                /** @example {
                 *       "certificatesAndTrustChains": [
                 *         {
                 *           "certificate": "-----BEGIN CERTIFICATE-----\nMIID ... <sample - removed for readability> .... KZlSw==\n-----END CERTIFICATE-----",
                 *           "keyAlgorithm": "ECDSA",
                 *           "trustChain": "-----BEGIN CERTIFICATE-----\nMIID ... <sample - removed for readability> .... 4p5mA=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDQ ... <sample - removed for readability> .... JuAIQ=\n-----END CERTIFICATE-----"
                 *         },
                 *         {
                 *           "certificate": "-----BEGIN CERTIFICATE-----\nMIID ... <sample - removed for readability> .... ZKwSl==\n-----END CERTIFICATE-----",
                 *           "keyAlgorithm": "RSA",
                 *           "trustChain": "-----BEGIN CERTIFICATE-----\nMIID ... <sample - removed for readability> .... mA45p=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDQ ... <sample - removed for readability> .... QuIAJ=\n-----END CERTIFICATE-----"
                 *         }
                 *       ]
                 *     } */
                "application/vnd.akamai.cps.certificate-and-trust-chain.v2+json": {
                    /** @description Certificate and trust chains. */
                    certificatesAndTrustChains: {
                        /** @description The certificate text. */
                        certificate: string | null;
                        /**
                         * @description The key algorithm of the certificate , either `ECDSA` or `RSA`.
                         * @enum {string}
                         */
                        keyAlgorithm: "ECDSA" | "RSA";
                        /** @description The trust chain text. You may have no trust chains or multiple trust chains. */
                        trustChain?: string | null;
                    }[];
                };
            };
        };
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "change": "/cps/v2/enrollments/10002/changes/10002"
                     *     } */
                    "application/vnd.akamai.cps.change-id.v1+json": {
                        change: string;
                    };
                };
            };
        };
    };
    "get-deployments": {
        parameters: {
            query?: {
                /**
                 * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
                 * @example {{accountSwitchKey}}
                 */
                accountSwitchKey?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "production": {
                     *         "ocspStapled": false,
                     *         "ocspUris": [],
                     *         "networkConfiguration": {
                     *           "geography": "core",
                     *           "mustHaveCiphers": "ak-akamai-2020q1",
                     *           "ocspStapling": "on",
                     *           "preferredCiphers": "ak-akamai-2020q1",
                     *           "quicEnabled": false,
                     *           "secureNetwork": "standard-tls",
                     *           "sniOnly": true,
                     *           "disallowedTlsVersions": [
                     *             "TLSv1",
                     *             "TLSv1_1"
                     *           ],
                     *           "dnsNames": [
                     *             "san2.example.com",
                     *             "san1.example.com"
                     *           ]
                     *         },
                     *         "primaryCertificate": {
                     *           "certificate": "-----BEGIN CERTIFICATE-----\nMIID <sample - removed for readability> .... 93Nvw==\n-----END CERTIFICATE-----",
                     *           "expiry": "2022-02-05T13:21:21Z",
                     *           "keyAlgorithm": "ECDSA",
                     *           "signatureAlgorithm": "SHA-256",
                     *           "trustChain": "-----BEGIN CERTIFICATE-----\nMIID <sample - removed for readability> .... Qs/v0=\n-----END CERTIFICATE-----"
                     *         },
                     *         "multiStackedCertificates": [
                     *           {
                     *             "certificate": "-----BEGIN CERTIFICATE-----\nMIID <sample - removed for readability> .... nMweq/\n-----END CERTIFICATE-----",
                     *             "expiry": "2022-02-05T13:21:20Z",
                     *             "keyAlgorithm": "RSA",
                     *             "signatureAlgorithm": "SHA-256",
                     *             "trustChain": "-----BEGIN CERTIFICATE-----\nMIID <sample - removed for readability> .... KEUp0=\n-----END CERTIFICATE-----"
                     *           }
                     *         ]
                     *       },
                     *       "staging": {
                     *         "ocspStapled": false,
                     *         "ocspUris": [],
                     *         "networkConfiguration": {
                     *           "geography": "core",
                     *           "mustHaveCiphers": "ak-akamai-2020q1",
                     *           "ocspStapling": "on",
                     *           "preferredCiphers": "ak-akamai-2020q1",
                     *           "quicEnabled": false,
                     *           "secureNetwork": "standard-tls",
                     *           "sniOnly": true,
                     *           "disallowedTlsVersions": [
                     *             "TLSv1",
                     *             "TLSv1_1"
                     *           ],
                     *           "dnsNames": [
                     *             "san2.example.com",
                     *             "san1.example.com"
                     *           ]
                     *         },
                     *         "primaryCertificate": {
                     *           "certificate": "-----BEGIN CERTIFICATE-----\nMIID <sample - removed for readability> .... 93Nvw==\n-----END CERTIFICATE-----",
                     *           "expiry": "2022-02-05T13:21:21Z",
                     *           "keyAlgorithm": "ECDSA",
                     *           "signatureAlgorithm": "SHA-256",
                     *           "trustChain": "-----BEGIN CERTIFICATE-----\nMIID <sample - removed for readability> .... 9JQs/v0=\n-----END CERTIFICATE-----"
                     *         },
                     *         "multiStackedCertificates": [
                     *           {
                     *             "certificate": "-----BEGIN CERTIFICATE-----\nMIID <sample - removed for readability> .... nMweq/\n-----END CERTIFICATE-----",
                     *             "expiry": "2022-02-05T13:21:20Z",
                     *             "keyAlgorithm": "RSA",
                     *             "signatureAlgorithm": "SHA-256",
                     *             "trustChain": "-----BEGIN CERTIFICATE-----\nMIID <sample - removed for readability> .... KEUp0=\n-----END CERTIFICATE-----"
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/vnd.akamai.cps.deployments.v7+json": {
                        production: {
                            /** @description Dual-stacked certificates include an ECDSA certificate in addition to an RSA certificate. */
                            multiStackedCertificates: {
                                /** @description The certificate text. */
                                certificate: string | null;
                                /** @description The expiration date for the certificate. */
                                expiry?: string;
                                /**
                                 * @description The key algorithm of the certificate.
                                 * @enum {string}
                                 */
                                keyAlgorithm?: "ECDSA" | "RSA";
                                /**
                                 * @description The SHA (Secure Hash Algorithm) function.
                                 * @enum {string|null}
                                 */
                                signatureAlgorithm?: "SHA-1" | "SHA-256" | null;
                                /** @description The trust chain for the certificate. */
                                trustChain: string | null;
                            }[];
                            networkConfiguration: {
                                /** @description Disallowed TLS protocols. */
                                disallowedTlsVersions?: string[];
                                /** @description Names served by SNI-only enabled enrollments. */
                                dnsNames?: string[];
                                /**
                                 * @description The type of the network on which CPS deploys your certificate. `core` is worldwide (includes China and Russia). `china+core` is worldwide and China. `russia+core` is worldwide and Russia.
                                 * @enum {string}
                                 */
                                geography?: "core" | "china+core" | "russia+core";
                                /** @description Ciphers that you definitely want to include for your enrollment while deploying it on the network. */
                                mustHaveCiphers?: string;
                                /**
                                 * @description OCSP stapling setting for the deployment.
                                 * @enum {string}
                                 */
                                ocspStapling?: "on" | "off" | "not-set";
                                /** @description Ciphers that you preferably want to include for your enrollment while deploying it on the network. */
                                preferredCiphers?: string;
                                /** @description QUIC transport layer network protocol. */
                                quicEnabled: boolean;
                                /**
                                 * @description The type of deployment network. `standard-tls` means Akamai's standard secure network, while `enhanced-tls` means Akamai's more secure network with PCI compliance capability.
                                 * @enum {string}
                                 */
                                secureNetwork?: "enhanced-tls" | "standard-tls";
                                /** @description Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. */
                                sniOnly: boolean;
                            };
                            /** @description OCSP Stapling improves performance by including a valid OCSP response in every TLS handshake. We recommend all customers enable this feature. */
                            ocspStapled?: boolean;
                            /** @description URI used for OCSP stapling validation. */
                            ocspUris?: string[] | null;
                            /** @description Primary certificate of the enrollment. */
                            primaryCertificate: {
                                /** @description The certificate text. */
                                certificate: string | null;
                                /** @description The expiration date for the certificate. */
                                expiry?: string;
                                /**
                                 * @description The key algorithm of the certificate.
                                 * @enum {string}
                                 */
                                keyAlgorithm?: "ECDSA" | "RSA";
                                /**
                                 * @description The SHA (Secure Hash Algorithm) function.
                                 * @enum {string|null}
                                 */
                                signatureAlgorithm?: "SHA-1" | "SHA-256" | null;
                                /** @description The trust chain for the certificate. */
                                trustChain: string | null;
                            } | null;
                        };
                        staging: {
                            /** @description Dual-stacked certificates today include an ECDSA certificate in addition to an RSA certificate. */
                            multiStackedCertificates: {
                                /** @description The certificate text. */
                                certificate: string | null;
                                /** @description The expiration date for the certificate. */
                                expiry?: string;
                                /**
                                 * @description The key algorithm of the certificate.
                                 * @enum {string}
                                 */
                                keyAlgorithm?: "ECDSA" | "RSA";
                                /**
                                 * @description The SHA (Secure Hash Algorithm) function.
                                 * @enum {string|null}
                                 */
                                signatureAlgorithm?: "SHA-1" | "SHA-256" | null;
                                /** @description The trust chain for the certificate. */
                                trustChain: string | null;
                            }[];
                            networkConfiguration: {
                                /** @description Disallowed TLS protocols. */
                                disallowedTlsVersions?: string[];
                                /** @description Names served by SNI-only enabled enrollments. */
                                dnsNames?: string[];
                                /**
                                 * @description The type of network on which CPS deploys your certificate. `core` is worldwide (includes China and Russia). `china+core` is worldwide and China. `russia+core` is worldwide and Russia.
                                 * @enum {string}
                                 */
                                geography?: "core" | "china+core" | "russia+core";
                                /** @description Ciphers that you definitely want to include for your enrollment while deploying it on the network. */
                                mustHaveCiphers?: string;
                                /**
                                 * @description OCSP stapling setting for the deployment.
                                 * @enum {string}
                                 */
                                ocspStapling?: "on" | "off" | "not-set";
                                /** @description Ciphers that you preferably want to include for your enrollment while deploying it on the network. */
                                preferredCiphers?: string;
                                /** @description QUIC transport layer network protocol. */
                                quicEnabled: boolean;
                                /**
                                 * @description The type of deployment network. `standard-tls` means Akamai's standard secure network, while `enhanced-tls` means Akamai's more secure network with PCI compliance capability.
                                 * @enum {string}
                                 */
                                secureNetwork?: "enhanced-tls" | "standard-tls";
                                /** @description Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. */
                                sniOnly: boolean;
                            };
                            /** @description OCSP Stapling improves performance by including a valid OCSP response in every TLS handshake. We recommend all customers enable this feature. */
                            ocspStapled?: boolean;
                            /** @description URI used for OCSP stapling validation. */
                            ocspUris?: string[] | null;
                            /** @description The primary certificate of the enrollment. */
                            primaryCertificate: {
                                /** @description The certificate text. */
                                certificate: string | null;
                                /** @description The expiration date for the certificate. */
                                expiry?: string;
                                /**
                                 * @description The key algorithm of the certificate.
                                 * @enum {string}
                                 */
                                keyAlgorithm?: "ECDSA" | "RSA";
                                /**
                                 * @description The SHA (Secure Hash Algorithm) function.
                                 * @enum {string|null}
                                 */
                                signatureAlgorithm?: "SHA-1" | "SHA-256" | null;
                                /** @description The trust chain for the certificate. */
                                trustChain: string | null;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    "get-deployments-production": {
        parameters: {
            query?: {
                /**
                 * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
                 * @example {{accountSwitchKey}}
                 */
                accountSwitchKey?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "production": {
                     *         "ocspStapled": true,
                     *         "ocspUris": [
                     *           "http://ocsp.example.com"
                     *         ],
                     *         "networkConfiguration": {
                     *           "geography": "core",
                     *           "mustHaveCiphers": "ak-akamai-2020q1",
                     *           "ocspStapling": "not-set",
                     *           "preferredCiphers": "ak-akamai-2020q1",
                     *           "quicEnabled": false,
                     *           "secureNetwork": "standard-tls",
                     *           "sniOnly": true,
                     *           "disallowedTlsVersions": [],
                     *           "dnsNames": [
                     *             "san2.example.com",
                     *             "san1.example.com"
                     *           ]
                     *         },
                     *         "primaryCertificate": {
                     *           "certificate": "-----BEGIN CERTIFICATE-----\nMIID2 ... <sample - removed for readability> .... ZlSw==\n-----END CERTIFICATE-----",
                     *           "expiry": "2021-06-10T12:00:00Z",
                     *           "keyAlgorithm": "RSA",
                     *           "signatureAlgorithm": "SHA-256",
                     *           "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDT ... <sample - removed for readability> .... JuAIQ=\n-----END CERTIFICATE-----"
                     *         },
                     *         "multiStackedCertificates": [
                     *           {
                     *             "certificate": "-----BEGIN CERTIFICATE-----\nMIID2 ... <sample - removed for readability> .... ZlSw==\n-----END CERTIFICATE-----",
                     *             "expiry": "2021-06-10T12:00:00Z",
                     *             "keyAlgorithm": "ECDSA",
                     *             "signatureAlgorithm": "SHA-256",
                     *             "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDT ... <sample - removed for readability> .... JuAIQ=\n-----END CERTIFICATE-----"
                     *           }
                     *         ]
                     *       },
                     *       "staging": {
                     *         "ocspStapled": true,
                     *         "ocspUris": [
                     *           "http://ocsp.example.com"
                     *         ],
                     *         "networkConfiguration": {
                     *           "geography": "core",
                     *           "mustHaveCiphers": "ak-akamai-2020q1",
                     *           "ocspStapling": "not-set",
                     *           "preferredCiphers": "ak-akamai-2020q1",
                     *           "quicEnabled": false,
                     *           "secureNetwork": "standard-tls",
                     *           "sniOnly": true,
                     *           "disallowedTlsVersions": [],
                     *           "dnsNames": [
                     *             "san2.example.com",
                     *             "san1.example.com"
                     *           ]
                     *         },
                     *         "primaryCertificate": {
                     *           "certificate": "-----BEGIN CERTIFICATE-----\nMIID2 ... <sample - removed for readability> .... ZlSw==\n-----END CERTIFICATE-----",
                     *           "expiry": "2021-06-10T12:00:00Z",
                     *           "keyAlgorithm": "RSA",
                     *           "signatureAlgorithm": "SHA-256",
                     *           "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDT ... <sample - removed for readability> .... JuAIQ=\n-----END CERTIFICATE-----"
                     *         },
                     *         "multiStackedCertificates": [
                     *           {
                     *             "certificate": "-----BEGIN CERTIFICATE-----\nMIID2 ... <sample - removed for readability> .... ZlSw==\n-----END CERTIFICATE-----",
                     *             "expiry": "2021-06-10T12:00:00Z",
                     *             "keyAlgorithm": "ECDSA",
                     *             "signatureAlgorithm": "SHA-256",
                     *             "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDT ... <sample - removed for readability> .... JuAIQ=\n-----END CERTIFICATE-----"
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/vnd.akamai.cps.deployment.v7+json": {
                        /** @description Dual-stacked certificates today include an ECDSA certificate in addition to an RSA certificate. */
                        multiStackedCertificates: {
                            /** @description The certificate text. */
                            certificate: string | null;
                            /** @description The expiration date for the certificate. */
                            expiry?: string;
                            /**
                             * @description The key algorithm of the certificate.
                             * @enum {string}
                             */
                            keyAlgorithm?: "ECDSA" | "RSA";
                            /**
                             * @description The SHA (Secure Hash Algorithm) function. Current values include `SHA-1` & `SHA-256`.
                             * @enum {string|null}
                             */
                            signatureAlgorithm?: "SHA-1" | "SHA-256" | null;
                            /** @description The trust chain for the certificate. */
                            trustChain: string | null;
                        }[];
                        /** @description Network configuration properties. */
                        networkConfiguration: {
                            /** @description Disallowed TLS protocol. */
                            disallowedTlsVersions?: string[];
                            /** @description Names served by SNI-only enabled enrollments. */
                            dnsNames?: string[];
                            /**
                             * @description Type of the network that you want to deploy your certificate. `core` is worldwide (includes China and Russia). `china+core` is worldwide and China. `russia+core` is worldwide and Russia.
                             * @enum {string}
                             */
                            geography?: "core" | "china+core" | "russia+core";
                            /** @description Ciphers that you definitely want to include for your enrollment while deploying it on the network. For more information on cipher profiles, see [Akamai community](https://community.akamai.com/customers/s/article/SSL-TLS-Cipher-Profiles-for-Akamai-Secure-CDNrxdxm). */
                            mustHaveCiphers?: string;
                            /**
                             * @description OCSP stapling setting for the deployment.
                             * @enum {string}
                             */
                            ocspStapling?: "on" | "off" | "not-set";
                            /** @description Ciphers that you preferably want to include for your enrollment while deploying it on the network. For more information on cipher profiles, see [Akamai community](https://community.akamai.com/customers/s/article/SSL-TLS-Cipher-Profiles-for-Akamai-Secure-CDNrxdxm). */
                            preferredCiphers?: string;
                            /** @description QUIC transport layer network protocol. */
                            quicEnabled: boolean;
                            /**
                             * @description The type of deployment network. `standard-tls` means Akamai's standard secure network, while `enhanced-tls` means Akamai's more secure network with PCI compliance capability.
                             * @enum {string}
                             */
                            secureNetwork?: "enhanced-tls" | "standard-tls";
                            /** @description Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. */
                            sniOnly: boolean;
                        };
                        /** @description OCSP Stapling improves performance by including a valid OCSP response in every TLS handshake. We recommend all customers enable this feature. */
                        ocspStapled?: boolean;
                        /** @description URI used for OCSP stapling validation. */
                        ocspUris?: string[] | null;
                        /** @description Primary certificate of the enrollment. */
                        primaryCertificate: {
                            /** @description The certificate text. */
                            certificate: string | null;
                            /** @description The expiration date for the certificate. */
                            expiry?: string;
                            /**
                             * @description The key algorithm of the certificate.
                             * @enum {string}
                             */
                            keyAlgorithm?: "ECDSA" | "RSA";
                            /**
                             * @description The SHA (Secure Hash Algorithm) function. Current values include `SHA-1` & `SHA-256`.
                             * @enum {string|null}
                             */
                            signatureAlgorithm?: "SHA-1" | "SHA-256" | null;
                            /** @description The trust chain for the certificate. */
                            trustChain: string | null;
                        } | null;
                    };
                };
            };
        };
    };
    "get-deployment-staging": {
        parameters: {
            query?: {
                /**
                 * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
                 * @example {{accountSwitchKey}}
                 */
                accountSwitchKey?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "production": {
                     *         "ocspStapled": true,
                     *         "ocspUris": [
                     *           "http://ocsp.example.com"
                     *         ],
                     *         "networkConfiguration": {
                     *           "geography": "core",
                     *           "mustHaveCiphers": "ak-akamai-2020q1",
                     *           "ocspStapling": "not-set",
                     *           "preferredCiphers": "ak-akamai-2020q1",
                     *           "quicEnabled": false,
                     *           "secureNetwork": "standard-tls",
                     *           "sniOnly": true,
                     *           "disallowedTlsVersions": [],
                     *           "dnsNames": [
                     *             "san2.example.com",
                     *             "san1.example.com"
                     *           ]
                     *         },
                     *         "primaryCertificate": {
                     *           "certificate": "-----BEGIN CERTIFICATE-----\nMIID2 ... <sample - removed for readability> .... ZlSw==\n-----END CERTIFICATE-----",
                     *           "expiry": "2021-06-10T12:00:00Z",
                     *           "keyAlgorithm": "RSA",
                     *           "signatureAlgorithm": "SHA-256",
                     *           "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDT ... <sample - removed for readability> .... JuAIQ=\n-----END CERTIFICATE-----"
                     *         },
                     *         "multiStackedCertificates": [
                     *           {
                     *             "certificate": "-----BEGIN CERTIFICATE-----\nMIID2 ... <sample - removed for readability> .... ZlSw==\n-----END CERTIFICATE-----",
                     *             "expiry": "2021-06-10T12:00:00Z",
                     *             "keyAlgorithm": "ECDSA",
                     *             "signatureAlgorithm": "SHA-256",
                     *             "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDT ... <sample - removed for readability> .... JuAIQ=\n-----END CERTIFICATE-----"
                     *           }
                     *         ]
                     *       },
                     *       "staging": {
                     *         "ocspStapled": true,
                     *         "ocspUris": [
                     *           "http://ocsp.example.com"
                     *         ],
                     *         "networkConfiguration": {
                     *           "geography": "core",
                     *           "mustHaveCiphers": "ak-akamai-2020q1",
                     *           "ocspStapling": "not-set",
                     *           "preferredCiphers": "ak-akamai-2020q1",
                     *           "quicEnabled": false,
                     *           "secureNetwork": "standard-tls",
                     *           "sniOnly": true,
                     *           "disallowedTlsVersions": [],
                     *           "dnsNames": [
                     *             "san2.example.com",
                     *             "san1.example.com"
                     *           ]
                     *         },
                     *         "primaryCertificate": {
                     *           "certificate": "-----BEGIN CERTIFICATE-----\nMIID2 ... <sample - removed for readability> .... ZlSw==\n-----END CERTIFICATE-----",
                     *           "expiry": "2021-06-10T12:00:00Z",
                     *           "keyAlgorithm": "RSA",
                     *           "signatureAlgorithm": "SHA-256",
                     *           "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDT ... <sample - removed for readability> .... JuAIQ=\n-----END CERTIFICATE-----"
                     *         },
                     *         "multiStackedCertificates": [
                     *           {
                     *             "certificate": "-----BEGIN CERTIFICATE-----\nMIID2 ... <sample - removed for readability> .... ZlSw==\n-----END CERTIFICATE-----",
                     *             "expiry": "2021-06-10T12:00:00Z",
                     *             "keyAlgorithm": "ECDSA",
                     *             "signatureAlgorithm": "SHA-256",
                     *             "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDT ... <sample - removed for readability> .... JuAIQ=\n-----END CERTIFICATE-----"
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/vnd.akamai.cps.deployment.v7+json": {
                        /** @description Dual-stacked certificates today include an ECDSA certificate in addition to an RSA certificate. */
                        multiStackedCertificates: {
                            /** @description The certificate text. */
                            certificate: string | null;
                            /** @description The expiration date for the certificate. */
                            expiry?: string;
                            /**
                             * @description The key algorithm of the certificate.
                             * @enum {string}
                             */
                            keyAlgorithm?: "ECDSA" | "RSA";
                            /**
                             * @description The SHA (Secure Hash Algorithm) function. Current values include `SHA-1` & `SHA-256`.
                             * @enum {string|null}
                             */
                            signatureAlgorithm?: "SHA-1" | "SHA-256" | null;
                            /** @description The trust chain for the certificate. */
                            trustChain: string | null;
                        }[];
                        /** @description Network configuration properties. */
                        networkConfiguration: {
                            /** @description Disallowed TLS protocol. */
                            disallowedTlsVersions?: string[];
                            /** @description Names served by SNI-only enabled enrollments. */
                            dnsNames?: string[];
                            /**
                             * @description Type of the network that you want to deploy your certificate. `core` is worldwide (includes China and Russia). `china+core` is worldwide and China. `russia+core` is worldwide and Russia.
                             * @enum {string}
                             */
                            geography?: "core" | "china+core" | "russia+core";
                            /** @description Ciphers that you definitely want to include for your enrollment while deploying it on the network. For more information on cipher profiles, see [Akamai community](https://community.akamai.com/customers/s/article/SSL-TLS-Cipher-Profiles-for-Akamai-Secure-CDNrxdxm). */
                            mustHaveCiphers?: string;
                            /**
                             * @description OCSP stapling setting for the deployment.
                             * @enum {string}
                             */
                            ocspStapling?: "on" | "off" | "not-set";
                            /** @description Ciphers that you preferably want to include for your enrollment while deploying it on the network. For more information on cipher profiles, see [Akamai community](https://community.akamai.com/customers/s/article/SSL-TLS-Cipher-Profiles-for-Akamai-Secure-CDNrxdxm). */
                            preferredCiphers?: string;
                            /** @description QUIC transport layer network protocol. */
                            quicEnabled: boolean;
                            /**
                             * @description The type of deployment network. `standard-tls` means Akamai's standard secure network, while `enhanced-tls` means Akamai's more secure network with PCI compliance capability.
                             * @enum {string}
                             */
                            secureNetwork?: "enhanced-tls" | "standard-tls";
                            /** @description Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. */
                            sniOnly: boolean;
                        };
                        /** @description OCSP Stapling improves performance by including a valid OCSP response in every TLS handshake. We recommend all customers enable this feature. */
                        ocspStapled?: boolean;
                        /** @description URI used for OCSP stapling validation. */
                        ocspUris?: string[] | null;
                        /** @description Primary certificate of the enrollment. */
                        primaryCertificate: {
                            /** @description The certificate text. */
                            certificate: string | null;
                            /** @description The expiration date for the certificate. */
                            expiry?: string;
                            /**
                             * @description The key algorithm of the certificate.
                             * @enum {string}
                             */
                            keyAlgorithm?: "ECDSA" | "RSA";
                            /**
                             * @description The SHA (Secure Hash Algorithm) function. Current values include `SHA-1` & `SHA-256`.
                             * @enum {string|null}
                             */
                            signatureAlgorithm?: "SHA-1" | "SHA-256" | null;
                            /** @description The trust chain for the certificate. */
                            trustChain: string | null;
                        } | null;
                    };
                };
            };
        };
    };
    "get-dv-history": {
        parameters: {
            query?: {
                /**
                 * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
                 * @example {{accountSwitchKey}}
                 */
                accountSwitchKey?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "domain": "www.cps-example-dv.com",
                     *           "domainHistory": [
                     *             {
                     *               "domain": "www.cps-example-dv.com",
                     *               "error": "Error getting challenges. Error Message: Lets Encrypt Exception message: Unable to load Lets Encrypt support tools.",
                     *               "expires": null,
                     *               "fullPath": null,
                     *               "redirectFullPath": "http://dcv.akamai.com/.well-known/acme-challenge/abcdefghijklmno-KuzBi3q5Dr6TU8ViHSDSf-c9Iyg",
                     *               "requestTimestamp": "2021-04-11T18:15:07z",
                     *               "responseBody": null,
                     *               "status": "Preparing",
                     *               "token": null,
                     *               "validatedTimestamp": null,
                     *               "validationStatus": null,
                     *               "challenges": [],
                     *               "validationRecords": []
                     *             },
                     *             {
                     *               "domain": "www.cps-example-dv.com",
                     *               "error": "Error getting challenges. Error Message: Lets Encrypt Exception message: Unable to load Lets Encrypt support tools.",
                     *               "expires": null,
                     *               "fullPath": null,
                     *               "redirectFullPath": null,
                     *               "requestTimestamp": "2021-04-11T18:24:16z",
                     *               "responseBody": null,
                     *               "status": "Preparing",
                     *               "token": null,
                     *               "validatedTimestamp": null,
                     *               "validationStatus": null,
                     *               "challenges": [],
                     *               "validationRecords": []
                     *             },
                     *             {
                     *               "domain": "www.cps-example-dv.com",
                     *               "error": "Error getting challenges. Error Message: Lets Encrypt Exception message: Unable to load Lets Encrypt support tools.",
                     *               "expires": null,
                     *               "fullPath": null,
                     *               "redirectFullPath": "http://dcv.akamai.com/.well-known/acme-challenge/abcdefghijklmno-KuzBi3q5Dr6TU8ViHSDSf-c9Iyg",
                     *               "requestTimestamp": "2021-04-11T18:33:26z",
                     *               "responseBody": null,
                     *               "status": "Preparing",
                     *               "token": null,
                     *               "validatedTimestamp": null,
                     *               "validationStatus": null,
                     *               "challenges": [],
                     *               "validationRecords": []
                     *             },
                     *             {
                     *               "domain": "www.cps-example-dv.com",
                     *               "error": "Error getting challenges. Error Message: Lets Encrypt Exception message: Unable to load Lets Encrypt support tools.",
                     *               "expires": null,
                     *               "fullPath": null,
                     *               "redirectFullPath": "http://dcv.akamai.com/.well-known/acme-challenge/abcdefghijklmno-KuzBi3q5Dr6TU8ViHSDSf-c9Iyg",
                     *               "requestTimestamp": "2021-04-11T18:42:39z",
                     *               "responseBody": null,
                     *               "status": "Preparing",
                     *               "token": null,
                     *               "validatedTimestamp": null,
                     *               "validationStatus": null,
                     *               "challenges": [],
                     *               "validationRecords": []
                     *             },
                     *             {
                     *               "domain": "www.cps-example-dv.com",
                     *               "error": "Error getting challenges. Error Message: Lets Encrypt Exception message: Unable to load Lets Encrypt support tools.",
                     *               "expires": null,
                     *               "fullPath": null,
                     *               "redirectFullPath": null,
                     *               "requestTimestamp": "2021-04-11T18:51:46z",
                     *               "responseBody": null,
                     *               "status": "Preparing",
                     *               "token": null,
                     *               "validatedTimestamp": null,
                     *               "validationStatus": null,
                     *               "challenges": [],
                     *               "validationRecords": []
                     *             },
                     *             {
                     *               "domain": "www.cps-example-dv.com",
                     *               "error": "Error getting challenges. Error Message: Lets Encrypt Exception message: Unable to load Lets Encrypt support tools.",
                     *               "expires": null,
                     *               "fullPath": null,
                     *               "redirectFullPath": null,
                     *               "requestTimestamp": "2021-04-11T19:00:54z",
                     *               "responseBody": null,
                     *               "status": "Preparing",
                     *               "token": null,
                     *               "validatedTimestamp": null,
                     *               "validationStatus": null,
                     *               "challenges": [],
                     *               "validationRecords": []
                     *             },
                     *             {
                     *               "domain": "www.cps-example-dv.com",
                     *               "error": "Error getting challenges. Error Message: Lets Encrypt Exception message: Unable to load Lets Encrypt support tools.",
                     *               "expires": null,
                     *               "fullPath": null,
                     *               "redirectFullPath": null,
                     *               "requestTimestamp": "2021-04-11T19:10:23z",
                     *               "responseBody": null,
                     *               "status": "Preparing",
                     *               "token": null,
                     *               "validatedTimestamp": null,
                     *               "validationStatus": null,
                     *               "challenges": [],
                     *               "validationRecords": []
                     *             },
                     *             {
                     *               "domain": "www.cps-example-dv.com",
                     *               "error": "Error getting challenges. Error Message: Lets Encrypt Exception message: Unable to load Lets Encrypt support tools.",
                     *               "expires": null,
                     *               "fullPath": null,
                     *               "redirectFullPath": null,
                     *               "requestTimestamp": "2021-04-11T19:19:32z",
                     *               "responseBody": null,
                     *               "status": "Preparing",
                     *               "token": null,
                     *               "validatedTimestamp": null,
                     *               "validationStatus": null,
                     *               "challenges": [],
                     *               "validationRecords": []
                     *             }
                     *           ]
                     *         },
                     *         {
                     *           "domain": "www.cps-example-2-dv.com",
                     *           "domainHistory": [
                     *             {
                     *               "domain": "www.cps-example-2-dv.com",
                     *               "error": "Error getting challenges. Error Message: Lets Encrypt Exception message: Unable to load Lets Encrypt support tools.",
                     *               "expires": null,
                     *               "fullPath": null,
                     *               "redirectFullPath": null,
                     *               "requestTimestamp": "2021-04-12T19:19:32z",
                     *               "responseBody": null,
                     *               "status": "Preparing",
                     *               "token": null,
                     *               "validatedTimestamp": null,
                     *               "validationStatus": null,
                     *               "challenges": [],
                     *               "validationRecords": []
                     *             }
                     *           ]
                     *         }
                     *       ]
                     *     } */
                    "application/vnd.akamai.cps.dv-history.v1+json": {
                        /** @description Domain Validation (DV) challenges are used by Let's Encrypt to verify domain control. */
                        results: {
                            /** @description The domain being validated. */
                            domain: string;
                            /** @description A history record for a single domain. */
                            domainHistory: {
                                /** @description Challenges used for validation. */
                                challenges: {
                                    /** @description Validation status for this challenge. */
                                    error?: string | null;
                                    /** @description Path where Let's Encrypt respects and expects to find `token` as content. */
                                    fullPath?: string;
                                    /** @description The URL where Akamai publishes `responseBody` for Let's Encrypt to validate `http-01` challenges. The client can configure a redirect at `fullPath` to redirect requests to this `redirectFullPath` URL, keeping in mind that the token may change over time. */
                                    redirectFullPath?: string;
                                    /** @description The data Let's Encrypt expects to find served at `fullPath` URL. */
                                    responseBody?: string;
                                    /** @description The domain validation status. Status include `valid` and `pending`. */
                                    status?: string;
                                    /** @description The validation token issued by Let's Encrypt. */
                                    token?: string;
                                    /** @description Challenge type. Current types include `http-01` and `dns-01`. */
                                    type?: string;
                                    /** @description The records that you send to Let's Encrypt to validate your domain. */
                                    validationRecords: {
                                        /** @description Validation authorities. */
                                        authorities?: string[];
                                        /** @description The name being validated. */
                                        hostname?: string;
                                        /** @description Port used for validation. */
                                        port?: string;
                                        /** @description IPs resolved for name being validated. */
                                        resolvedIp?: string[];
                                        /** @description IP from `resolvedIp` tried for this validation. */
                                        triedIp?: string;
                                        /** @description URL attempted validated. */
                                        url?: string;
                                        /** @description IP from `resolvedIp` used for this validation. */
                                        usedIp?: string;
                                    }[];
                                }[];
                                /** @description Domain which is being validated. */
                                domain?: string;
                                /** @description Current validation status for domains not yet validated. */
                                error?: string | null;
                                /** @description Timestamp when this token or validation will expire. Sample 2017-12-05T18:57:07z. */
                                expires?: string;
                                /** @description The URL that Let's Encrypt returns for the `token`. */
                                fullPath?: string;
                                /** @description The URL that Let's Encrypt returns. This is the path to the server to which you want to redirect and find the token. */
                                redirectFullPath?: string;
                                /** @description The timestamp when the domain was successfully requested. Sample 2014-08-12T18:57:07z. */
                                requestTimestamp?: string;
                                /** @description The data Let's Encrypt expects to find served at `fullPath` URL. */
                                responseBody?: string;
                                /** @description The domain validation status. */
                                status?: string;
                                /** @description The validation token issued by Let's Encrypt. */
                                token?: string;
                                /** @description The timestamp when the domain was successfully validated. Sample 2014-08-12T18:57:07z. */
                                validatedTimestamp?: string;
                                /** @description Validation attempts and status. */
                                validationRecords: {
                                    /** @description The records that Let's Encrypt returns to you to validate your domain. */
                                    hostname?: string;
                                    /** @description Port used for validation. */
                                    port?: string;
                                    /** @description IPs resolved for name being validated. */
                                    resolvedIp?: string[];
                                    /** @description URL attempted validated. */
                                    url?: string;
                                    /** @description IP from `resolvedIp` used for this validation. */
                                    usedIp?: string;
                                }[];
                                /** @description Status of the domain validation process. */
                                validationStatus?: string;
                            }[];
                        }[];
                    };
                };
            };
        };
    };
    "get-history-certificates": {
        parameters: {
            query?: {
                /**
                 * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
                 * @example {{accountSwitchKey}}
                 */
                accountSwitchKey?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "certificates": [
                     *         {
                     *           "deploymentStatus": "inactive",
                     *           "geography": "core",
                     *           "ra": "third-party",
                     *           "stagingStatus": "inactive",
                     *           "type": "third-party",
                     *           "slots": [],
                     *           "primaryCertificate": {
                     *             "certificate": "-----BEGIN CERTIFICATE-----\nMIID ... <sample - removed for readability> .... 9t0G\n-----END CERTIFICATE-----",
                     *             "expiry": "2022-02-15T06:05:32Z",
                     *             "keyAlgorithm": "ECDSA",
                     *             "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDT ... <sample - removed for readability> .... okCk=\n-----END CERTIFICATE-----"
                     *           },
                     *           "multiStackedCertificates": [
                     *             {
                     *               "certificate": "-----BEGIN CERTIFICATE-----\nMIID ... <sample - removed for readability> .... Bp52w=\n-----END CERTIFICATE-----",
                     *               "expiry": "2022-02-15T06:05:33Z",
                     *               "keyAlgorithm": "RSA",
                     *               "trustChain": "-----BEGIN CERTIFICATE-----\nMIID ... <sample - removed for readability> .... 7gf0=\n-----END CERTIFICATE-----"
                     *             }
                     *           ]
                     *         },
                     *         {
                     *           "deploymentStatus": "active",
                     *           "geography": "core",
                     *           "ra": "third-party",
                     *           "stagingStatus": "active",
                     *           "type": "third-party",
                     *           "slots": [
                     *             19598
                     *           ],
                     *           "primaryCertificate": {
                     *             "certificate": "-----BEGIN CERTIFICATE-----\nMIID ... <sample - removed for readability> .... J9JQs/v0=\n-----END CERTIFICATE-----",
                     *             "expiry": "2022-02-05T13:21:21Z",
                     *             "keyAlgorithm": "ECDSA"
                     *           },
                     *           "multiStackedCertificates": [
                     *             {
                     *               "certificate": "-----BEGIN CERTIFICATE-----\nMIID ... <sample - removed for readability> .... Mweq/\n-----END CERTIFICATE-----",
                     *               "expiry": "2022-02-05T13:21:20Z",
                     *               "keyAlgorithm": "RSA",
                     *               "trustChain": "-----BEGIN CERTIFICATE-----\nMIID ... <sample - removed for readability> .... KEUp0=\n-----END CERTIFICATE-----"
                     *             }
                     *           ]
                     *         }
                     *       ]
                     *     } */
                    "application/vnd.akamai.cps.certificate-history.v2+json": {
                        /** @description The type of certificate. This could be a single certificate, which associates a property hostname with a single name. It could be a wildcard certificate, which secures an entire property hostname. It could be a SAN certificate, which uses Subject Alternative Names and allows you to secure up to 100 property hostnames with one certificate. It could also be a wildcard SAN certificate, which is a SAN certificate that can have up to 100 SANs with 25 wildcard entries in the SAN list. Lastly, you can have a third-party certificate, which is a signed certificate obtained by you from an external certificate authority. */
                        certificates: {
                            /**
                             * @description The current status of the certificate on the network. This is either `active` or `inactive`.
                             * @enum {string}
                             */
                            deploymentStatus: "active" | "inactive";
                            /**
                             * @description Lists where you can deploy the certificate. If it is `standard-worldwide`, you can deploy everywhere except China. If it is `worldwide`, you can deploy everywhere including China. If it is `worldwide-russia`, you can deploy everywhere including Russia. Geography is dependent on your network type. If your network type is `standard-tls`, then you can deploy in Russia and `worldwide-russia` is the same as `standard-worldwide`.
                             * @enum {string}
                             */
                            geography?: "standard-worldwide" | "worldwide" | "worldwide-russia";
                            /** @description Enables an ECDSA certificate in addition to an RSA certificate. CPS automatically performs all certificate operations on both certificates, and will use the best certificate for each client connection to your secure properties. Customers who are pinning certificates will need to pin both the RSA and the ECDSA certificate. We recommend all customers enable this feature. If its Third Party Dual Stack Certificate, fallback RSA certificate information will be present in this. */
                            multiStackedCertificates: {
                                /** @description The certificate text for the multi-stacked certificate. */
                                certificate?: string | null;
                                /** @description The expiration date for the multi-stacked certificate. */
                                expiry?: string;
                                /**
                                 * @description The key algorithm for the multi-stacked certificate, either `ECDSA` or `RSA`.
                                 * @enum {string}
                                 */
                                keyAlgorithm?: "ECDSA" | "RSA";
                                /** @description The trust chain for the multi-stacked certificate. */
                                trustChain?: string | null;
                            }[];
                            /** @description Primary certificate for Enrollment. */
                            primaryCertificate: {
                                /** @description The primary certificate in the multi-stacked certificate. */
                                certificate?: string | null;
                                /** @description The expiration date for the primary certificate. */
                                expiry?: string;
                                /**
                                 * @description The key algorithm for the primary certificate.
                                 * @enum {string}
                                 */
                                keyAlgorithm?: "ECDSA" | "RSA";
                                /** @description The trust chain for the primary certificate. */
                                trustChain?: string | null;
                            } | null;
                            /** @description The certificate registration authority of the primary certificate. */
                            ra?: string;
                            /** @description The slot numbers of the primary certificate. */
                            slots: number[];
                            /**
                             * @description The staging status of the primary certificate, either `active` or `inactive`.
                             * @enum {string}
                             */
                            stagingStatus: "active" | "inactive";
                            /**
                             * @description Either `san`, `single`, `wildcard`, `wildcard-san`, or `third-party`.
                             * @enum {string}
                             */
                            type: "san" | "single" | "wildcard" | "wildcard-san" | "third-party";
                        }[];
                    };
                };
            };
        };
    };
    "get-history-changes": {
        parameters: {
            query?: {
                /**
                 * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
                 * @example {{accountSwitchKey}}
                 */
                accountSwitchKey?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Enrollment on which to perform the desired operation.
                 * @example {{enrollmentId}}
                 */
                enrollmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "changes": [
                     *         {
                     *           "action": "renew",
                     *           "actionDescription": "Renew Certificate",
                     *           "businessCaseId": "5005B00000XYZA1234",
                     *           "createdBy": "mrossi",
                     *           "createdOn": "2021-05-09T19:26:59Z",
                     *           "lastUpdated": "2021-06-12T12:56:55Z",
                     *           "ra": "symantec",
                     *           "status": "completed",
                     *           "primaryCertificate": {
                     *             "certificate": "-----BEGIN CERTIFICATE-----\nMIIFH ... <sample - removed for readability> .... b+kIw==\n-----END CERTIFICATE-----",
                     *             "csr": "-----BEGIN CERTIFICATE REQUEST-----\nMIIC2 ... <sample - removed for readability> .... mdnsaw=\n-----END CERTIFICATE REQUEST-----",
                     *             "keyAlgorithm": "RSA",
                     *             "trustChain": "-----BEGIN CERTIFICATE-----\nMIIEdj ... <sample - removed for readability> .... oqzb5Ct\n-----END CERTIFICATE-----"
                     *           },
                     *           "primaryCertificateOrderDetails": {
                     *             "orderId": "abcdefM6Gw3WvN2p12345"
                     *           },
                     *           "multiStackedCertificates": [
                     *             {
                     *               "certificate": "-----BEGIN CERTIFICATE-----\nMIIDu ... <sample - removed for readability> .... 3JpAg==\n-----END CERTIFICATE-----",
                     *               "csr": "-----BEGIN CERTIFICATE REQUEST-----\nMIIC2 ... <sample - removed for readability> .... mdnsaw=\n-----END CERTIFICATE REQUEST-----",
                     *               "keyAlgorithm": "ECDSA",
                     *               "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDzD ... <sample - removed for readability> .... F3+fA==\n-----END CERTIFICATE-----"
                     *             }
                     *           ]
                     *         },
                     *         {
                     *           "action": "renew",
                     *           "actionDescription": "Renew Certificate",
                     *           "businessCaseId": "5005B00000DEFG1234",
                     *           "createdBy": "szhang",
                     *           "createdOn": "2021-02-02T18:21:17Z",
                     *           "lastUpdated": "2021-02-05T19:57:14Z",
                     *           "ra": "symantec",
                     *           "status": "cancelled",
                     *           "primaryCertificate": {
                     *             "certificate": "-----BEGIN CERTIFICATE-----\nMIIFH ... <sample - removed for readability> .... b+kIw==\n-----END CERTIFICATE-----",
                     *             "csr": "-----BEGIN CERTIFICATE REQUEST-----\nMIIC2 ... <sample - removed for readability> .... mdnsaw=\n-----END CERTIFICATE REQUEST-----",
                     *             "keyAlgorithm": "RSA",
                     *             "trustChain": "-----BEGIN CERTIFICATE-----\nMIIEdj ... <sample - removed for readability> .... oqzb5Ct\n-----END CERTIFICATE-----"
                     *           },
                     *           "primaryCertificateOrderDetails": {
                     *             "orderId": "abcdeHvg8F7caXW312345"
                     *           },
                     *           "multiStackedCertificates": [
                     *             {
                     *               "certificate": null,
                     *               "csr": "-----BEGIN CERTIFICATE REQUEST-----\nMIIC2 ... <sample - removed for readability> .... mdnsaw=\n-----END CERTIFICATE REQUEST-----",
                     *               "keyAlgorithm": "ECDSA",
                     *               "trustChain": null
                     *             }
                     *           ]
                     *         },
                     *         {
                     *           "action": "renew",
                     *           "actionDescription": "Renew Certificate",
                     *           "businessCaseId": null,
                     *           "createdBy": "jperez",
                     *           "createdOn": "2021-02-01T17:16:35Z",
                     *           "lastUpdated": null,
                     *           "primaryCertificate": null,
                     *           "primaryCertificateOrderDetails": null,
                     *           "ra": "symantec",
                     *           "status": "cancelled",
                     *           "multiStackedCertificates": []
                     *         },
                     *         {
                     *           "action": "new-certificate",
                     *           "actionDescription": "Create New Certificate",
                     *           "businessCaseId": "5005B00000ABCD1234",
                     *           "createdBy": "jsmith",
                     *           "createdOn": "2021-02-01T16:30:58Z",
                     *           "lastUpdated": "2021-02-01T17:16:37Z",
                     *           "ra": "symantec",
                     *           "status": "completed",
                     *           "primaryCertificate": {
                     *             "certificate": "-----BEGIN CERTIFICATE-----\nMIIFH ... <sample - removed for readability> .... b+kIw==\n-----END CERTIFICATE-----",
                     *             "csr": "-----BEGIN CERTIFICATE REQUEST-----\nMIIC2 ... <sample - removed for readability> .... mdnsaw=\n-----END CERTIFICATE REQUEST-----",
                     *             "keyAlgorithm": "RSA",
                     *             "trustChain": "-----BEGIN CERTIFICATE-----\nMIIEdj ... <sample - removed for readability> .... oqzb5Ct\n-----END CERTIFICATE-----"
                     *           },
                     *           "primaryCertificateOrderDetails": {
                     *             "orderId": "abcdex7zh8wspr4m12345"
                     *           },
                     *           "multiStackedCertificates": [
                     *             {
                     *               "certificate": "-----BEGIN CERTIFICATE-----\nMIIDu ... <sample - removed for readability> .... 3JpAg==\n-----END CERTIFICATE-----",
                     *               "csr": "-----BEGIN CERTIFICATE REQUEST-----\nMIIC2 ... <sample - removed for readability> .... mdnsaw=\n-----END CERTIFICATE REQUEST-----",
                     *               "keyAlgorithm": "ECDSA",
                     *               "trustChain": "-----BEGIN CERTIFICATE-----\nMIIDzD ... <sample - removed for readability> .... F3+fA==\n-----END CERTIFICATE-----"
                     *             }
                     *           ]
                     *         }
                     *       ]
                     *     } */
                    "application/vnd.akamai.cps.change-history.v5+json": {
                        /** @description Change history items. */
                        changes: {
                            /**
                             * @description Show every change on the certificate. The possible changes are `import-certificate`, `renew`, `new-certificate`, `modify-san`, `update-network-configuration`.
                             * @enum {string}
                             */
                            action: "import-certificate" | "renew" | "new-certificate" | "modify-san" | "update-network-configuration";
                            /** @description A description of each change. */
                            actionDescription: string;
                            /** @description SalesForce ID associated with this change. */
                            businessCaseId?: string | null;
                            /** @description The username of the user who initiated the change. */
                            createdBy: string;
                            /**
                             * Format: date-time
                             * @description A date and timestamp when the change started.
                             */
                            createdOn: string;
                            /** @description A date and timestamp when the change was last updated. */
                            lastUpdated?: string | null;
                            /** @description Dual-stacked certificates. */
                            multiStackedCertificates: {
                                /** @description Certificate text. */
                                certificate?: string | null;
                                /** @description Certificate CSR. */
                                csr?: string;
                                /** @description Key algorithm of the certificate. */
                                keyAlgorithm?: string;
                                /** @description Certificate trust chain. */
                                trustChain?: string | null;
                            }[];
                            /** @description Primary Certificate. */
                            primaryCertificate?: {
                                /** @description Certificate text. */
                                certificate?: string | null;
                                /** @description Certificate CSR. */
                                csr?: string;
                                /** @description Key algorithm of the certificate. */
                                keyAlgorithm?: string;
                                /** @description Certificate trust chain. */
                                trustChain?: string | null;
                            } | null;
                            /** @description CA order details for this Change. */
                            primaryCertificateOrderDetails?: {
                                /** @description Order ID. */
                                orderId?: string;
                            } | null;
                            /** @description The certificate authority that issued the certificate. */
                            ra: string;
                            /**
                             * @description The status of the change. The possible changes are `incomplete`, `cancelled`, `completed`.
                             * @enum {string}
                             */
                            status: "incomplete" | "cancelled" | "completed";
                        }[];
                    };
                };
            };
        };
    };
}
