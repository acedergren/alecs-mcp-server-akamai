/**
 * Generated from Akamai Fast Purge OpenAPI Specification
 * DO NOT EDIT MANUALLY
 * 
 * Generated on: 2025-06-29T12:00:28.728Z
 * Source: https://raw.githubusercontent.com/akamai/akamai-apis/main/apis/ccu/v3/openapi.json
 */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = {
  "/delete/cpcode/{network}": {
    /**
     * Delete by CP code
     * @description Deletes content on the selected CP code for the selected `network`. In most cases, you should [invalidate](https://techdocs.akamai.com/purge-cache/reference/invalidate-cpcode) rather than delete content. Invalidation keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
     */
    post: operations["post-delete-cpcode"];
    parameters: {
      path: {
        /**
         * @description __Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.
         * @example {{network}}
         */
        network: "staging" | "production";
      };
    };
  };
  "/delete/tag/{network}": {
    /**
     * Delete by cache tag
     * @description Deletes content on the selected set of cache tags for the selected `network`. In most cases, you should [invalidate](https://techdocs.akamai.com/purge-cache/reference/invalidate-tag) rather than delete content. Invalidation keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
     */
    post: operations["post-delete-tag"];
    parameters: {
      path: {
        /**
         * @description __Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.
         * @example {{network}}
         */
        network: "staging" | "production";
      };
    };
  };
  "/delete/url/{network}": {
    /**
     * Delete by URL or ARL
     * @description Deletes content on the selected URL or ARL  for the selected `network`.  URLs and ARLs can be submitted in the same request. In most cases, you should [invalidate](https://techdocs.akamai.com/purge-cache/reference/invalidate-url) rather than delete content. Invalidation keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
     */
    post: operations["post-delete-url"];
    parameters: {
      path: {
        /**
         * @description __Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.
         * @example {{network}}
         */
        network: "staging" | "production";
      };
    };
  };
  "/invalidate/cpcode/{network}": {
    /**
     * Invalidate by CP code
     * @description Invalidates content on the selected CP code for the selected `network`. You should consider invalidating content by default. This keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
     */
    post: operations["post-invalidate-cpcode"];
    parameters: {
      path: {
        /**
         * @description __Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.
         * @example {{network}}
         */
        network: "staging" | "production";
      };
    };
  };
  "/invalidate/tag/{network}": {
    /**
     * Invalidate by cache tag
     * @description Invalidates content on the selected set of cache tags for the selected `network`. You should consider invalidating content by default. This keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
     */
    post: operations["post-invalidate-tag"];
    parameters: {
      path: {
        /**
         * @description __Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.
         * @example {{network}}
         */
        network: "staging" | "production";
      };
    };
  };
  "/invalidate/url/{network}": {
    /**
     * Invalidate by URL or ARL
     * @description Invalidates content on the selected URL or ARL for the selected `network`. You should consider invalidating content by default. This keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable. URLs and ARLs can be submitted in the same request.
     */
    post: operations["post-invalidate-url"];
    parameters: {
      path: {
        /**
         * @description __Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.
         * @example {{network}}
         */
        network: "staging" | "production";
      };
    };
  };
};

export type webhooks = Record<string, never>;

export type components = Record<string, never>;

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = {

  /**
   * Delete by CP code
   * @description Deletes content on the selected CP code for the selected `network`. In most cases, you should [invalidate](https://techdocs.akamai.com/purge-cache/reference/invalidate-cpcode) rather than delete content. Invalidation keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
   */
  "post-delete-cpcode": {
    parameters: {
      query?: {
        /**
         * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
         * @example {{accountSwitchKey}}
         */
        accountSwitchKey?: string;
      };
      path: {
        /**
         * @description __Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.
         * @example {{network}}
         */
        network: "staging" | "production";
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "objects": [
         *     12345,
         *     98765
         *   ]
         * }
         */
        "application/json": {
          /** @description For CP code-based operations, an array of the CP codes you want to purge. */
          objects: number[];
        };
      };
    };
    responses: {
      /** @description Successful POST of a purge request. */
      201: {
        content: {
          "application/json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/problem+json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Forbidden request. */
      403: {
        content: {
          "application/problem+json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Too many requests. */
      429: {
        content: {
          "application/json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /**
   * Delete by cache tag
   * @description Deletes content on the selected set of cache tags for the selected `network`. In most cases, you should [invalidate](https://techdocs.akamai.com/purge-cache/reference/invalidate-tag) rather than delete content. Invalidation keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
   */
  "post-delete-tag": {
    parameters: {
      query?: {
        /**
         * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
         * @example {{accountSwitchKey}}
         */
        accountSwitchKey?: string;
      };
      path: {
        /**
         * @description __Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.
         * @example {{network}}
         */
        network: "staging" | "production";
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "objects": [
         *     "black-friday",
         *     "electronics",
         *     "laptops",
         *     "tablets"
         *   ]
         * }
         */
        "application/json": {
          /** @description An array of cache tag strings you want to purge. */
          objects: string[];
        };
      };
    };
    responses: {
      /** @description Successful POST of a purge request. */
      201: {
        content: {
          "application/json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/problem+json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Forbidden request. */
      403: {
        content: {
          "application/problem+json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Too many requests. */
      429: {
        content: {
          "application/json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /**
   * Delete by URL or ARL
   * @description Deletes content on the selected URL or ARL  for the selected `network`.  URLs and ARLs can be submitted in the same request. In most cases, you should [invalidate](https://techdocs.akamai.com/purge-cache/reference/invalidate-url) rather than delete content. Invalidation keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
   */
  "post-delete-url": {
    parameters: {
      query?: {
        /**
         * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
         * @example {{accountSwitchKey}}
         */
        accountSwitchKey?: string;
      };
      path: {
        /**
         * @description __Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.
         * @example {{network}}
         */
        network: "staging" | "production";
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "objects": [
         *     "https://foo1.bar.com/some/path",
         *     "http://foo2.bar.com/some/other/path"
         *   ]
         * }
         */
        "application/json": {
          /** @description Lists URLs or ARLs to purge. Purges content for both `http` and `https` schemes. */
          objects: string[];
        };
      };
    };
    responses: {
      /** @description Successful POST of a purge request. */
      201: {
        content: {
          "application/json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/problem+json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Forbidden request. */
      403: {
        content: {
          "application/problem+json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Too many requests. */
      429: {
        content: {
          "application/json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /**
   * Invalidate by CP code
   * @description Invalidates content on the selected CP code for the selected `network`. You should consider invalidating content by default. This keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
   */
  "post-invalidate-cpcode": {
    parameters: {
      query?: {
        /**
         * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
         * @example {{accountSwitchKey}}
         */
        accountSwitchKey?: string;
      };
      path: {
        /**
         * @description __Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.
         * @example {{network}}
         */
        network: "staging" | "production";
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "objects": [
         *     12345,
         *     98765
         *   ]
         * }
         */
        "application/json": {
          /** @description For CP code-based operations, an array of the CP codes you want to purge. */
          objects: number[];
        };
      };
    };
    responses: {
      /** @description Successful response. */
      201: {
        content: {
          "application/json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/problem+json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Unauthorized request. */
      403: {
        content: {
          "application/problem+json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Too many requests. */
      429: {
        content: {
          "application/json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /**
   * Invalidate by cache tag
   * @description Invalidates content on the selected set of cache tags for the selected `network`. You should consider invalidating content by default. This keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
   */
  "post-invalidate-tag": {
    parameters: {
      query?: {
        /**
         * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
         * @example {{accountSwitchKey}}
         */
        accountSwitchKey?: string;
      };
      path: {
        /**
         * @description __Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.
         * @example {{network}}
         */
        network: "staging" | "production";
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "objects": [
         *     "black-friday",
         *     "electronics",
         *     "laptops",
         *     "tablets"
         *   ]
         * }
         */
        "application/json": {
          /** @description An array of cache tag strings you want to purge. */
          objects: string[];
        };
      };
    };
    responses: {
      /** @description Successful POST of a purge request. */
      201: {
        content: {
          "application/json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/problem+json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Forbidden request. */
      403: {
        content: {
          "application/problem+json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Too many requests. */
      429: {
        content: {
          "application/json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /**
   * Invalidate by URL or ARL
   * @description Invalidates content on the selected URL or ARL for the selected `network`. You should consider invalidating content by default. This keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable. URLs and ARLs can be submitted in the same request.
   */
  "post-invalidate-url": {
    parameters: {
      query?: {
        /**
         * @description For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).
         * @example {{accountSwitchKey}}
         */
        accountSwitchKey?: string;
      };
      path: {
        /**
         * @description __Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.
         * @example {{network}}
         */
        network: "staging" | "production";
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "objects": [
         *     "https://foo1.bar.com/some/path",
         *     "http://foo2.bar.com/some/other/path"
         *   ]
         * }
         */
        "application/json": {
          /** @description Lists URLs or ARLs to purge. Purges content for both `http` and `https` schemes. */
          objects: string[];
        };
      };
    };
    responses: {
      /** @description Successful POST of a purge request. */
      201: {
        content: {
          "application/json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/problem+json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Forbidden request. */
      403: {
        content: {
          "application/problem+json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Too many requests. */
      429: {
        content: {
          "application/json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Internal error. */
      500: {
        content: {
          "application/json": {
            /** @description A URL that describes the API's error response. */
            describedBy?: string;
            /** @description Detailed information about the HTTP status code returned with the response. */
            detail: string;
            /** @description The estimated number of seconds before the purge is to complete. */
            estimatedSeconds?: number;
            /** @description The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code. */
            httpStatus: number;
            /** @description Unique identifier for the purge request. */
            purgeId?: string;
            /** @description Identifier to provide Akamai Technical Support if issues arise. */
            supportId: string;
            /** @description Describes the response type, for example, `Rate Limit exceeded`. */
            title?: string;
            [key: string]: unknown;
          };
        };
      };
    };
  };
};
