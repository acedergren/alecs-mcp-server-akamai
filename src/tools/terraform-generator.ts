/**
 * Terraform Generator MCP Tool
 *
 * This tool generates Terraform HCL for Akamai resources (property, DNS zone) using the official provider schema.
 * It fetches resource details from the Akamai API and renders a Mustache template for the corresponding Terraform resource.
 *
 * Extensible: Add more resource types and templates as needed.
 *
 * See: https://techdocs.akamai.com/terraform/docs/overview
 */
import Mustache from 'mustache';
import { z } from 'zod';
import { AkamaiClient } from '../akamai-client';
import { propertyListValidator, dnsZoneValidator } from '../utils/ajv-validator';
import { createErrorHandler } from '../utils/error-handler';
import { MCPToolResponse } from '../types/mcp-protocol';
import { AkamaiCacheService } from '../services/akamai-cache-service';

// Input schema for the tool: resource type and ID (and optional customer)
const schema = z.object({
  resourceType: z.enum(['property', 'dns-zone']), // Supported resource types
  resourceId: z.string(), // Akamai resource ID (e.g., prp_12345, example.com)
  customer: z.string().optional(), // Optional: .edgerc section/customer
});

/**
 * Mustache template for akamai_property resource
 * Maps Akamai API fields to Terraform arguments as per official docs:
 * https://techdocs.akamai.com/terraform/docs/resource-property
 */
const propertyTemplate = `# Akamai Property (generated by ALECS)
resource "akamai_property" "{{propertyName}}" {
  name     = "{{propertyName}}"
  contract = "{{contractId}}" # Contract ID from Akamai
  group    = "{{groupId}}"    # Group ID from Akamai
  # latest_version = {{latestVersion}} # Optional: latest version
  # TODO: Add rules, hostnames, and other advanced settings as needed
}`;

/**
 * Mustache template for akamai_dns_zone resource
 * Maps Akamai API fields to Terraform arguments as per official docs:
 * https://techdocs.akamai.com/terraform/docs/resource-dns-zone
 */
const dnsZoneTemplate = `# Akamai DNS Zone (generated by ALECS)
resource "akamai_dns_zone" "{{zone}}" {
  zone     = "{{zone}}"
  type     = "{{type}}"      # PRIMARY, SECONDARY, or ALIAS
  contract = "{{contractId}}"
  # comment = "{{comment}}"   # Optional: zone comment
  # TODO: Add recordsets and advanced DNS settings as needed
}`;

// Singleton instance (do not re-instantiate)
const cacheService = new AkamaiCacheService();

/**
 * Main MCP tool definition for Terraform generation
 * - Uses cached data for performance and API rate limiting
 * - Falls back to live API if cache is cold or missing
 * - Returns HCL as a text response
 *
 * Tradeoff: Cache gives speed and reduces API load, but may be up to 5 minutes old (configurable TTL).
 *           Always returns fresh data if cache is stale or missing.
 */
export const terraformGeneratorTool = {
  name: 'generate-terraform',
  description: 'Generate Terraform HCL for an Akamai property or DNS zone (official provider schema). Uses cache for performance, falls back to API if needed.',
  schema,
  handler: async (client: AkamaiClient, params: z.infer<typeof schema>): Promise<MCPToolResponse> => {
    const { resourceType, resourceId, customer = 'default' } = params;
    const errorHandler = createErrorHandler('terraform-generator');
    // Use the singleton cacheService for all cache lookups
    await cacheService.initialize();
    try {
      if (resourceType === 'property') {
        // --- PROPERTY RESOURCE ---
        // Use getProperty for property caching
        let item = await cacheService.getProperty(client, resourceId, customer);
        if (!item) {
          // If not in cache, fetch directly (cache will update in background)
          const property = await client.request({
            path: `/papi/v1/properties/${resourceId}`,
            method: 'GET',
          });
          const valid = propertyListValidator(property);
          if (!valid.valid) {throw new Error('Invalid property response');}
          item = (property as any).properties.items[0];
        }
        if (!item) {throw new Error('Property not found');}
        const hcl = Mustache.render(propertyTemplate, item);
        return { content: [{ type: 'text', text: hcl }] };
      } else if (resourceType === 'dns-zone') {
        // --- DNS ZONE RESOURCE ---
        // Use .cached for DNS zone caching
        const zone = await cacheService.cached(
          `dns-zone:${resourceId}`,
          300, // 5 min TTL, can be tuned
          async () => {
            return await client.request({
              path: `/config-dns/v2/zones/${resourceId}`,
              method: 'GET',
            });
          },
          customer
        );
        const valid = dnsZoneValidator(zone);
        if (!valid.valid) {throw new Error('Invalid DNS zone response');}
        const hcl = Mustache.render(dnsZoneTemplate, zone);
        return { content: [{ type: 'text', text: hcl }] };
      } else {
        throw new Error('Unsupported resource type');
      }
    } catch (error) {
      return errorHandler.handle('generate-terraform', error, undefined, params);
    }
  },
}; 