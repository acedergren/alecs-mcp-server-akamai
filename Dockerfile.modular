# Multi-stage build for Modular servers
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Copy source code and configs first
COPY . .

# Install all dependencies (skip prepare script)
ENV NPM_CONFIG_IGNORE_SCRIPTS=true
RUN npm ci

# Build the application
RUN npm run build

# Production stage
FROM node:20-alpine

# Install PM2 for running multiple modular servers
RUN npm install -g pm2

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install production dependencies only (skip prepare script)
ENV NPM_CONFIG_IGNORE_SCRIPTS=true
RUN npm ci --omit=dev && npm cache clean --force

# Copy modular server files from builder
COPY --from=builder /app/dist/servers ./dist/servers
COPY --from=builder /app/dist/tools ./dist/tools
COPY --from=builder /app/dist/utils ./dist/utils
COPY --from=builder /app/dist/types ./dist/types
COPY --from=builder /app/dist/auth ./dist/auth
COPY --from=builder /app/dist/middleware ./dist/middleware
COPY --from=builder /app/dist/core ./dist/core
COPY --from=builder /app/dist/services ./dist/services

# Copy PM2 config for modular servers
COPY ecosystem.modular.config.js ./

# Create directories
RUN mkdir -p data logs

# Use non-root user
USER node

# Expose modular server ports
EXPOSE 3010 3011 3012 3013 3014 3015 3016 3017

# Health check for property server (main modular server)
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s \
  CMD node -e "require('http').get('http://localhost:3010/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))" || exit 1

# Run all modular servers
CMD ["pm2-runtime", "start", "ecosystem.modular.config.js"]