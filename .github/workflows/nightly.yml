name: Nightly Release

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force a nightly release even if no changes'
        required: false
        type: boolean
        default: false
      branch:
        description: 'Branch to build nightly from'
        required: false
        type: string
        default: 'main'

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
      short_sha: ${{ steps.check.outputs.short_sha }}
      commit_count: ${{ steps.check.outputs.commit_count }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch || 'main' }}

      - name: Check for changes since last nightly
        id: check
        run: |
          # Get the last nightly tag
          LAST_NIGHTLY=$(git tag -l "nightly-*" | sort -V | tail -n 1)
          
          if [ -z "$LAST_NIGHTLY" ]; then
            echo "No previous nightly found, will create first nightly"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "commit_count=$(git rev-list --count HEAD)" >> $GITHUB_OUTPUT
          else
            # Check if there are new commits since last nightly
            COMMITS=$(git rev-list $LAST_NIGHTLY..HEAD --count)
            if [ "$COMMITS" -gt 0 ] || [ "${{ github.event.inputs.force_release }}" == "true" ]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "commit_count=$COMMITS" >> $GITHUB_OUTPUT
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "commit_count=0" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Get short SHA for version string
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  nightly-release:
    needs: check-changes
    if: needs.check-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch || 'main' }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build project
        run: npm run build

      - name: Generate nightly version
        id: version
        run: |
          # Get base version from package.json
          BASE_VERSION=$(node -p "require('./package.json').version")
          # Create nightly version: base-nightly.YYYYMMDD.HHMMSS
          NIGHTLY_VERSION="${BASE_VERSION}-nightly.$(date +%Y%m%d.%H%M%S)"
          echo "version=$NIGHTLY_VERSION" >> $GITHUB_OUTPUT
          echo "tag=nightly-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          
          # Update package.json with nightly version
          npm version $NIGHTLY_VERSION --no-git-tag-version

      - name: Generate changelog
        id: changelog
        run: |
          LAST_NIGHTLY=$(git tag -l "nightly-*" | sort -V | tail -n 1)
          
          echo "# Nightly Release $(date +%Y-%m-%d)" > nightly-changelog.md
          echo "" >> nightly-changelog.md
          echo "**Version:** ${{ steps.version.outputs.version }}" >> nightly-changelog.md
          echo "**Commit:** ${{ github.sha }}" >> nightly-changelog.md
          echo "**Changes:** ${{ needs.check-changes.outputs.commit_count }} commits" >> nightly-changelog.md
          echo "" >> nightly-changelog.md
          
          if [ -n "$LAST_NIGHTLY" ]; then
            echo "## Changes since last nightly ($LAST_NIGHTLY)" >> nightly-changelog.md
            echo "" >> nightly-changelog.md
            git log $LAST_NIGHTLY..HEAD --pretty=format:"- %s (%an)" >> nightly-changelog.md
          else
            echo "## Initial nightly release" >> nightly-changelog.md
            echo "" >> nightly-changelog.md
            echo "This is the first nightly release." >> nightly-changelog.md
          fi
          
          echo "" >> nightly-changelog.md
          echo "## Installation" >> nightly-changelog.md
          echo "" >> nightly-changelog.md
          echo "\`\`\`bash" >> nightly-changelog.md
          echo "# Install specific nightly version" >> nightly-changelog.md
          echo "npm install -g alecs-mcp-server-akamai@${{ steps.version.outputs.version }}" >> nightly-changelog.md
          echo "" >> nightly-changelog.md
          echo "# Or install latest nightly" >> nightly-changelog.md
          echo "npm install -g alecs-mcp-server-akamai@nightly" >> nightly-changelog.md
          echo "\`\`\`" >> nightly-changelog.md
          echo "" >> nightly-changelog.md
          echo "## Docker" >> nightly-changelog.md
          echo "" >> nightly-changelog.md
          echo "\`\`\`bash" >> nightly-changelog.md
          echo "docker pull ghcr.io/acedergren/alecs-mcp-server-akamai:nightly" >> nightly-changelog.md
          echo "\`\`\`" >> nightly-changelog.md
          echo "" >> nightly-changelog.md
          echo "---" >> nightly-changelog.md
          echo "" >> nightly-changelog.md
          echo "⚠️ **Warning:** Nightly releases are automated builds from the latest main branch." >> nightly-changelog.md
          echo "They may contain experimental features and bugs. Use in production at your own risk." >> nightly-changelog.md

      - name: Publish to npm with nightly tag
        run: |
          npm publish --tag nightly --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: 'Nightly Build - ${{ steps.version.outputs.tag }}'
          body_path: nightly-changelog.md
          prerelease: true
          make_latest: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            acedergr/alecs-mcp-server-akamai:nightly
            acedergr/alecs-mcp-server-akamai:nightly-${{ steps.version.outputs.tag }}
            ghcr.io/acedergren/alecs-mcp-server-akamai:nightly
            ghcr.io/acedergren/alecs-mcp-server-akamai:nightly-${{ steps.version.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Clean up old nightly releases
        run: |
          # Keep only the last 7 nightly releases
          NIGHTLY_TAGS=$(git tag -l "nightly-*" | sort -V | head -n -7)
          
          if [ -n "$NIGHTLY_TAGS" ]; then
            echo "Cleaning up old nightly tags:"
            echo "$NIGHTLY_TAGS"
            
            for tag in $NIGHTLY_TAGS; do
              # Delete GitHub release
              gh release delete $tag -y || true
              # Delete git tag
              git push origin :refs/tags/$tag || true
            done
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify completion
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Nightly release ${{ steps.version.outputs.version }} published successfully!"
          else
            echo "❌ Nightly release failed!"
          fi