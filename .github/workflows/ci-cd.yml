name: ALECS CI/CD

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  pre-flight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      should-build-docker: ${{ steps.check.outputs.docker }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Check Dockerfiles exist
      run: |
        for df in Dockerfile Dockerfile.modular Dockerfile.websocket Dockerfile.sse; do
          if [ ! -f "$df" ]; then
            echo "::error::Missing $df"
            exit 1
          fi
        done
    
    - name: Validate package.json
      run: |
        node -e "JSON.parse(require('fs').readFileSync('package.json'))"
    
    - name: Check if Docker build needed
      id: check
      run: |
        # Only build Docker on main or tags
        if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "docker=true" >> $GITHUB_OUTPUT
        else
          echo "docker=false" >> $GITHUB_OUTPUT
        fi

  test:
    needs: pre-flight
    name: Test & Build
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Prevent hanging builds
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
    
    - name: Create .edgerc from secret
      run: |
        echo "${{ secrets.AKAMAI_EDGEGRID }}" > ~/.edgerc
        chmod 600 ~/.edgerc
    
    - name: Run tests
      run: npm test
    
    - name: Build project
      run: npm run build
    
    - name: Validate ALECS tools
      run: npx tsx scripts/validate-alecs-tools.ts
    
    - name: Report build status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "::notice::✅ Build successful for ${{ github.sha }}"
        else
          echo "::error::❌ Build failed for ${{ github.sha }}"
        fi

  deploy-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Update documentation
      run: npm run docs:update
    
    - name: Commit updated docs
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/
        if ! git diff --staged --quiet; then
          git commit -m "📚 Auto-update documentation [skip ci]"
          git push
        else
          echo "No documentation changes to commit"
        fi

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Publish to NPM
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    # Only build Docker images on main branch or version tags, not on every push
    if: |
      success() && 
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      fail-fast: false  # Continue building other images if one fails
      matrix:
        include:
          - dockerfile: Dockerfile
            tag-suffix: ''
            platforms: 'linux/amd64'  # Start with single platform
          - dockerfile: Dockerfile.modular
            tag-suffix: '-modular'
            platforms: 'linux/amd64'
          - dockerfile: Dockerfile.websocket
            tag-suffix: '-websocket'
            platforms: 'linux/amd64'
          - dockerfile: Dockerfile.sse
            tag-suffix: '-sse'
            platforms: 'linux/amd64'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Get current date
      id: date
      run: echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: acedergren/alecs-mcp-server-akamai
        flavor: |
          suffix=${{ matrix.tag-suffix }},onlatest=true
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./${{ matrix.dockerfile }}
        push: ${{ github.event_name != 'pull_request' }}  # Don't push on PRs
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: ${{ matrix.platforms }}
        build-args: |
          BUILD_DATE=${{ steps.date.outputs.date }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ steps.meta.outputs.version }}