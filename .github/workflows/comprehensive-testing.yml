name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  ALECS_LOG_LEVEL: 'INFO'
  ALECS_LOG_FORMAT: 'json'

jobs:
  # Initial validation and setup
  validate:
    name: Validate Code Quality
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Generate cache key
        id: cache-key
        run: echo "key=node-modules-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

      - name: Check formatting
        run: npm run format:check

      - name: Validate package.json
        run: npm audit --audit-level moderate

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ steps.cache-key.outputs.key }}

  # Unit tests with comprehensive coverage
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        test-group: [
          'tool-definitions',
          'mcp-protocol',
          'error-handling',
          'api-integration',
          'performance'
        ]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.validate.outputs.cache-key }}

      - name: Run unit tests for ${{ matrix.test-group }}
        run: npm test -- --testNamePattern="${{ matrix.test-group }}" --coverage --collectCoverageFrom="src/**/*.ts" --coverageReporters=lcov,json

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: coverage/lcov.info
          flags: unit-tests,${{ matrix.test-group }}
          name: unit-${{ matrix.test-group }}

  # Integration tests with mock Akamai APIs
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        customer: ['default', 'testing']
        include:
          - customer: 'default'
            description: 'Default customer tests'
          - customer: 'testing' 
            description: 'Testing environment'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.validate.outputs.cache-key }}

      - name: Setup test .edgerc
        run: |
          mkdir -p ~/.edgerc
          cat > ~/.edgerc << EOF
          [default]
          client_token = test_token
          client_secret = test_secret
          access_token = test_access
          host = test-host.edgekey.net
          
          [testing]
          client_token = test_token_2
          client_secret = test_secret_2
          access_token = test_access_2
          host = test-host-2.edgekey.net
          account_switch_key = TEST-ACCOUNT
          EOF

      - name: Run integration tests for ${{ matrix.customer }}
        env:
          ALECS_TEST_CUSTOMER: ${{ matrix.customer }}
        run: npm test -- --testPathPattern="integration" --testNamePattern="${{ matrix.customer }}"

      - name: Generate integration test report
        run: |
          echo "## Integration Test Results - ${{ matrix.customer }}" >> $GITHUB_STEP_SUMMARY
          echo "Customer: ${{ matrix.description }}" >> $GITHUB_STEP_SUMMARY

  # Conversational workflow tests
  workflow-tests:
    name: Conversational Workflow Tests
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        workflow: [
          'property-onboarding',
          'dns-migration', 
          'certificate-management',
          'property-analysis',
          'error-recovery'
        ]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.validate.outputs.cache-key }}

      - name: Run workflow tests for ${{ matrix.workflow }}
        run: npm test -- --testPathPattern="conversational-workflows" --testNamePattern="${{ matrix.workflow }}"

      - name: Generate workflow test artifacts
        run: |
          mkdir -p artifacts/workflows
          echo "Workflow: ${{ matrix.workflow }}" > artifacts/workflows/${{ matrix.workflow }}-results.txt
          echo "Status: Completed" >> artifacts/workflows/${{ matrix.workflow }}-results.txt

      - name: Upload workflow artifacts
        uses: actions/upload-artifact@v3
        with:
          name: workflow-test-results
          path: artifacts/workflows/

  # Performance and load testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.validate.outputs.cache-key }}

      - name: Run performance benchmarks
        run: npm test -- --testPathPattern="performance" --verbose

      - name: Performance regression check
        run: |
          # Compare against baseline performance metrics
          node scripts/check-performance-regression.js

      - name: Generate performance report
        run: |
          echo "## Performance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "Tests completed successfully" >> $GITHUB_STEP_SUMMARY

  # Security and vulnerability scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.validate.outputs.cache-key }}

      - name: Run npm audit
        run: npm audit --audit-level high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Build and package validation
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        target: ['development', 'production']
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.validate.outputs.cache-key }}

      - name: Build for ${{ matrix.target }}
        env:
          NODE_ENV: ${{ matrix.target }}
        run: npm run build

      - name: Validate build artifacts
        run: |
          # Check that all expected files are present
          ls -la dist/
          node -e "console.log('Build validation successful')"

      - name: Test MCP server startup
        run: |
          timeout 10s npm start || true
          echo "Server startup test completed"

  # Docker build and validation
  docker-validation:
    name: Docker Validation
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -f build/docker/Dockerfile -t alecs-mcp-server:test .

      - name: Test Docker container
        run: |
          # Start container in background
          docker run -d --name alecs-test \
            -e ALECS_LOG_LEVEL=DEBUG \
            alecs-mcp-server:test

          # Wait for startup
          sleep 5

          # Check if container is running
          docker ps | grep alecs-test

          # Check logs
          docker logs alecs-test

          # Cleanup
          docker stop alecs-test
          docker rm alecs-test

  # Comprehensive test suite completion
  test-completion:
    name: Test Suite Completion
    runs-on: ubuntu-latest
    needs: [
      validate,
      unit-tests,
      integration-tests, 
      workflow-tests,
      security-scan,
      build-validation,
      docker-validation
    ]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "## Test Suite Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Validation: ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow Tests: ${{ needs.workflow-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Validation: ${{ needs.build-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Validation: ${{ needs.docker-validation.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Report overall status
        run: |
          if [[ "${{ needs.validate.result }}" == "success" && 
                "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.workflow-tests.result }}" == "success" && 
                "${{ needs.build-validation.result }}" == "success" && 
                "${{ needs.docker-validation.result }}" == "success" ]]; then
            echo "✅ All tests passed successfully!"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Some tests failed. Check the results above."
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

  # Deploy to staging (on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test-completion
    if: github.ref == 'refs/heads/main' && needs.test-completion.outputs.status == 'success'
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test commands here

      - name: Notify deployment
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: Staging" >> $GITHUB_STEP_SUMMARY
          echo "- Status: Successful" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY