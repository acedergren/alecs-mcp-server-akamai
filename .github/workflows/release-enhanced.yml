name: Enhanced Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.7.0)'
        required: true
        type: string

env:
  GHCR_REGISTRY: ghcr.io
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test & Validate
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create .edgerc from secret
      run: |
        echo "${{ secrets.AKAMAI_EDGEGRID }}" > ~/.edgerc
        chmod 600 ~/.edgerc
    
    - name: Run tests
      run: npm test
    
    - name: Build project
      run: npm run build
    
    - name: Validate ALECS tools
      run: npx tsx scripts/validate-alecs-tools.ts

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.version)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Set version
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
        else
          VERSION="v${{ github.event.inputs.version }}"
        fi
        VERSION="${VERSION#v}"
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        if [ "$CURRENT_VERSION" != "$VERSION" ]; then
          npm version $VERSION --no-git-tag-version
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    
    - name: Publish to NPM
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create NPM summary
      run: |
        echo "## NPM Package Published" >> $GITHUB_STEP_SUMMARY
        echo "- **Package**: alecs-mcp-server-akamai" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: https://www.npmjs.com/package/alecs-mcp-server-akamai" >> $GITHUB_STEP_SUMMARY

  build-containers:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        dockerfile: 
          - path: build/docker/Dockerfile
            tag: latest
          - path: build/docker/Dockerfile.modular
            tag: modular
          - path: build/docker/Dockerfile.websocket
            tag: websocket
          - path: build/docker/Dockerfile.sse
            tag: sse
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GHCR_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Set version
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
        else
          VERSION="v${{ github.event.inputs.version }}"
        fi
        VERSION="${VERSION#v}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}},value=${{ env.VERSION }}
          type=semver,pattern={{major}}.{{minor}},value=${{ env.VERSION }}
          type=raw,value=${{ matrix.dockerfile.tag }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile.path }}
        push: true
        tags: |
          ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-${{ matrix.dockerfile.tag }}
          ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.dockerfile.tag }}
          ${{ secrets.DOCKERHUB_USERNAME }}/alecs-mcp-server-akamai:${{ env.VERSION }}-${{ matrix.dockerfile.tag }}
          ${{ secrets.DOCKERHUB_USERNAME }}/alecs-mcp-server-akamai:${{ matrix.dockerfile.tag }}
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Create container summary
      if: matrix.dockerfile.tag == 'latest'
      run: |
        echo "## Docker Images Published" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ghcr.io" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: latest, modular, websocket, sse" >> $GITHUB_STEP_SUMMARY

  create-release-artifacts:
    name: Create Release Artifacts
    runs-on: ubuntu-latest
    needs: [publish-npm, build-containers]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Create deployment artifact
      run: |
        VERSION="${{ github.event.release.tag_name }}"
        tar -czf alecs-mcp-server-${VERSION}.tar.gz \
          dist/ \
          package.json \
          package-lock.json \
          README.md \
          docs/ \
          scripts/ \
          build/docker/
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./alecs-mcp-server-${{ github.event.release.tag_name }}.tar.gz
        asset_name: alecs-mcp-server-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Create release summary
      run: |
        echo "## Release Complete ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### NPM Package" >> $GITHUB_STEP_SUMMARY
        echo "```bash" >> $GITHUB_STEP_SUMMARY
        echo "npm install alecs-mcp-server-akamai@${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Docker Images" >> $GITHUB_STEP_SUMMARY
        echo "```bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ghcr.io/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ghcr.io/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Release Assets" >> $GITHUB_STEP_SUMMARY
        echo "- Source archive: alecs-mcp-server-${{ github.event.release.tag_name }}.tar.gz" >> $GITHUB_STEP_SUMMARY