name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/v}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        
        # Check if this is a pre-release
        if [[ "$VERSION" =~ -(alpha|beta|rc) ]]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi
    
    - name: Check package.json version match
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        RELEASE_VERSION="${{ steps.version.outputs.version }}"
        if [ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]; then
          echo "Version mismatch: package.json has $PACKAGE_VERSION but releasing $RELEASE_VERSION"
          exit 1
        fi

  build-and-test:
    needs: validate-release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npx tsc --noEmit
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: Build
      run: npm run build
    
    - name: Package validation
      run: |
        npm pack --dry-run
        npm run audit
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/
        retention-days: 7

  generate-changelog:
    needs: validate-release
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.content }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate changelog content
        echo "content<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed" >> $GITHUB_OUTPUT
        
        if [ -n "$PREVIOUS_TAG" ]; then
          git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges >> $GITHUB_OUTPUT
        else
          git log --pretty=format:"- %s (%h)" --no-merges | head -20 >> $GITHUB_OUTPUT
        fi
        
        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  publish-npm:
    needs: [validate-release, build-and-test, generate-changelog]
    runs-on: ubuntu-latest
    if: needs.validate-release.outputs.is-prerelease == 'false'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
    
    - name: Publish to npm
      run: |
        if [ "${{ needs.validate-release.outputs.is-prerelease }}" = "true" ]; then
          npm publish --tag beta
        else
          npm publish
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  build-docker:
    needs: [validate-release, build-and-test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./build/docker/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}
          ghcr.io/${{ github.repository }}:latest
        labels: |
          org.opencontainers.image.title=alecs-mcp-server
          org.opencontainers.image.description=Akamai MCP Server
          org.opencontainers.image.version=${{ needs.validate-release.outputs.version }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-github-release:
    needs: [validate-release, build-and-test, generate-changelog, publish-npm, build-docker]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Create release archive
      run: |
        tar -czf alecs-mcp-server-${{ needs.validate-release.outputs.version }}.tar.gz dist/ README.md LICENSE package.json
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.validate-release.outputs.version }}
        name: Release v${{ needs.validate-release.outputs.version }}
        body: |
          ${{ needs.generate-changelog.outputs.changelog }}
          
          ## Installation
          
          ### NPM
          ```bash
          npm install -g alecs-mcp-server-akamai@${{ needs.validate-release.outputs.version }}
          ```
          
          ### Docker
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}
          ```
          
          ## Full Changelog
          https://github.com/${{ github.repository }}/compare/v${{ needs.validate-release.outputs.previous-version }}...v${{ needs.validate-release.outputs.version }}
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
        files: |
          alecs-mcp-server-${{ needs.validate-release.outputs.version }}.tar.gz
        token: ${{ secrets.GITHUB_TOKEN }}

  notify-release:
    needs: [validate-release, create-github-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Send notification
      run: |
        if [ "${{ needs.create-github-release.result }}" = "success" ]; then
          echo "✅ Release v${{ needs.validate-release.outputs.version }} completed successfully!"
        else
          echo "❌ Release v${{ needs.validate-release.outputs.version }} failed!"
          exit 1
        fi