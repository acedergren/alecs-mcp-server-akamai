# Nginx configuration for web01.cloud.solutionsedge.io
# Includes code-server and MCP server endpoints

# Upstreams
upstream code_server {
    server 127.0.0.1:8080;
    keepalive 32;
}

upstream oauth2_proxy {
    server 127.0.0.1:4180;
    keepalive 32;
}

upstream mcp_full {
    server 127.0.0.1:3000;
    keepalive 32;
}

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name web01.cloud.solutionsedge.io;
    return 301 https://$server_name$request_uri;
}

# HTTPS server block
server {
    listen 443 ssl http2;
    server_name web01.cloud.solutionsedge.io;

    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/web01.cloud.solutionsedge.io/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/web01.cloud.solutionsedge.io/privkey.pem;
    
    # Modern SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self' https: wss:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; style-src 'self' 'unsafe-inline' https:; img-src 'self' data: https:; font-src 'self' https: data:;" always;
    
    # Large file uploads
    client_max_body_size 100M;
    
    # Timeouts
    proxy_connect_timeout 300s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;
    send_timeout 300s;
    
    # Logging
    access_log /var/log/nginx/web01-access.log;
    error_log /var/log/nginx/web01-error.log;
    
    # Root location - redirect to /code
    location = / {
        return 302 /code/;
    }
    
    # OAuth2 Proxy endpoints
    location /oauth2/ {
        proxy_pass http://oauth2_proxy;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header X-Auth-Request-Redirect $request_uri;
    }
    
    location = /oauth2/auth {
        proxy_pass http://oauth2_proxy;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header Content-Length "";
        proxy_pass_request_body off;
    }
    
    # Code-server with authentication
    location /code/ {
        # OAuth2 authentication check
        auth_request /oauth2/auth;
        error_page 401 = /oauth2/sign_in;
        
        # Pass user information from OAuth2 proxy
        auth_request_set $user   $upstream_http_x_auth_request_user;
        auth_request_set $email  $upstream_http_x_auth_request_email;
        auth_request_set $auth_cookie $upstream_http_set_cookie;
        add_header Set-Cookie $auth_cookie;
        
        proxy_set_header X-User  $user;
        proxy_set_header X-Email $email;
        
        # Proxy to code-server
        proxy_pass http://code_server/;
        
        # Required headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Accept-Encoding gzip;
        
        # WebSocket headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # Disable buffering
        proxy_buffering off;
    }
    
    # MCP API endpoints (protected)
    location /api/mcp/ {
        # OAuth2 authentication
        auth_request /oauth2/auth;
        error_page 401 = /oauth2/sign_in;
        
        proxy_pass http://mcp_full/;
        
        # MCP headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header MCP-Protocol-Version "2025-06-18";
        
        # CORS for API access
        add_header Access-Control-Allow-Origin "https://web01.cloud.solutionsedge.io" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, MCP-Protocol-Version" always;
        add_header Access-Control-Allow-Credentials "true" always;
        
        if ($request_method = OPTIONS) {
            return 204;
        }
    }
    
    # Health check (no auth required)
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Static landing page
    location /index.html {
        alias /var/www/web01/index.html;
        add_header Cache-Control "public, max-age=3600";
    }
}

# WebSocket upgrade map
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}