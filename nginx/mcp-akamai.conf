# Nginx configuration for MCP Akamai Server
# Place this file in /etc/nginx/sites-available/ and symlink to sites-enabled

# Upstream configuration for different MCP servers
upstream mcp_full {
    server 127.0.0.1:3000;
    keepalive 32;
}

upstream mcp_essentials {
    server 127.0.0.1:3001;
    keepalive 32;
}

upstream mcp_property {
    server 127.0.0.1:3010;
    keepalive 16;
}

upstream mcp_dns {
    server 127.0.0.1:3011;
    keepalive 16;
}

upstream mcp_security {
    server 127.0.0.1:3012;
    keepalive 16;
}

# Main server block
server {
    listen 80;
    server_name mcp.yourdomain.com;
    
    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTPS server block
server {
    listen 443 ssl http2;
    server_name mcp.yourdomain.com;

    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/mcp.yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/mcp.yourdomain.com/privkey.pem;
    
    # Modern SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # SSL session caching
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
    
    # Logging
    access_log /var/log/nginx/mcp-akamai-access.log;
    error_log /var/log/nginx/mcp-akamai-error.log;
    
    # Request body size (for large API requests)
    client_max_body_size 10M;
    
    # Timeouts for long-running operations
    proxy_connect_timeout 60s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;
    
    # WebSocket support
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    
    # Common proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # MCP Protocol headers
    proxy_set_header MCP-Protocol-Version "2025-06-18";
    
    # Full server endpoint
    location /mcp/full {
        proxy_pass http://mcp_full;
        
        # CORS headers for MCP
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, MCP-Protocol-Version" always;
        
        if ($request_method = OPTIONS) {
            return 204;
        }
    }
    
    # Essentials server endpoint
    location /mcp/essentials {
        proxy_pass http://mcp_essentials;
        
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, MCP-Protocol-Version" always;
        
        if ($request_method = OPTIONS) {
            return 204;
        }
    }
    
    # Property server endpoint
    location /mcp/property {
        proxy_pass http://mcp_property;
        
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, MCP-Protocol-Version" always;
        
        if ($request_method = OPTIONS) {
            return 204;
        }
    }
    
    # DNS server endpoint
    location /mcp/dns {
        proxy_pass http://mcp_dns;
        
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, MCP-Protocol-Version" always;
        
        if ($request_method = OPTIONS) {
            return 204;
        }
    }
    
    # Security server endpoint
    location /mcp/security {
        proxy_pass http://mcp_security;
        
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, MCP-Protocol-Version" always;
        
        if ($request_method = OPTIONS) {
            return 204;
        }
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Default location
    location / {
        return 404;
    }
}