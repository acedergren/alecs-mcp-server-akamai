{
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "#!/bin/bash\n# SonarQube Docker scan after git commit\nif echo \"${CLAUDE_TOOL_PARAMS_COMMAND}\" | grep -qE '^git commit' && [ \"${CLAUDE_TOOL_RESULT_EXIT_CODE}\" = \"0\" ]; then\n  cd /Users/acedergr/Projects/alecs-mcp-server-akamai\n  \n  # Check if Docker is available\n  if command -v docker &> /dev/null && docker info &> /dev/null 2>&1; then\n    echo \"🐳 Running SonarQube analysis with Docker...\"\n    ./scripts/sonarqube-docker.sh quick\n  elif command -v sonar-scanner &> /dev/null && [ ! -z \"$SONAR_TOKEN\" ]; then\n    echo \"📊 Running SonarQube analysis locally...\"\n    ./scripts/sonarqube-integration.sh\n  else\n    echo \"⚠️  Skipping SonarQube - Docker or scanner not available\"\n  fi\nfi"
          }
        ]
      },
      {
        "matcher": "Edit|Write|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "#!/bin/bash\n# Auto-format and lint TypeScript files\nif [[ \"${CLAUDE_FILE_PATH}\" == *.ts ]] && [[ \"${CLAUDE_FILE_PATH}\" != *test* ]]; then\n  cd /Users/acedergr/Projects/alecs-mcp-server-akamai\n  \n  # Format with Prettier (silent)\n  npx prettier --write \"${CLAUDE_FILE_PATH}\" 2>/dev/null\n  \n  # Lint with ESLint auto-fix\n  if ! npx eslint \"${CLAUDE_FILE_PATH}\" --fix 2>/dev/null; then\n    echo \"⚠️  ESLint warnings in ${CLAUDE_FILE_PATH##*/}\"\n  fi\nfi"
          },
          {
            "type": "command",
            "command": "#!/bin/bash\n# TypeScript compilation check\nif [[ \"${CLAUDE_FILE_PATH}\" == *.ts ]] && [[ \"${CLAUDE_FILE_PATH}\" != *test* ]]; then\n  cd /Users/acedergr/Projects/alecs-mcp-server-akamai\n  echo \"🔍 Checking TypeScript compilation for ${CLAUDE_FILE_PATH}...\"\n  if ! npx tsc --noEmit \"${CLAUDE_FILE_PATH}\" 2>&1; then\n    echo \"❌ TypeScript compilation failed!\"\n    exit 2\n  fi\nfi"
          },
          {
            "type": "command",
            "command": "#!/bin/bash\n# STRICT NO-ANY-TYPE CHECK with multiple patterns\nif [[ \"${CLAUDE_FILE_PATH}\" == *.ts ]] || [[ \"${CLAUDE_FILE_PATH}\" == *.tsx ]]; then\n  # Multiple patterns to catch all any usage\n  ANY_PATTERNS=(\n    ':\\s*any(\\s|\\[|\\)|,|;|$|>)'\n    '\\<any\\>'\n    'as\\s+any'\n    'Array<any>'\n    'Promise<any>'\n    'Record<[^,]+,\\s*any>'\n    ': {\\[key: string\\]: any}'\n  )\n  \n  FOUND_ANY=0\n  VIOLATIONS=\"\"\n  \n  for pattern in \"${ANY_PATTERNS[@]}\"; do\n    if matches=$(grep -En \"$pattern\" \"${CLAUDE_FILE_PATH}\" | grep -v '// eslint-disable\\|// @ts-ignore\\|// @ts-expect-error\\|// TODO:' | head -5); then\n      FOUND_ANY=1\n      VIOLATIONS=\"${VIOLATIONS}${matches}\\n\"\n    fi\n  done\n  \n  if [ $FOUND_ANY -eq 1 ]; then\n    echo \"\\n🚫 BLOCKED: 'any' type detected in ${CLAUDE_FILE_PATH##*/}\"\n    echo \"❌ CODE KAI VIOLATION: No 'any' types allowed!\"\n    echo \"\\n📋 Violations found:\"\n    echo -e \"$VIOLATIONS\" | head -10\n    echo \"\\n✅ Required fixes:\"\n    echo \"  1. Use Zod schemas with proper types from docs/api/\"\n    echo \"  2. Use 'unknown' with type guards: isValidResponse()\"\n    echo \"  3. Import types: import { PropertyResponse } from '../types/api-responses'\"\n    echo \"  4. Define interfaces for complex objects\"\n    echo \"\\n📚 Examples from codebase:\"\n    echo \"  // ❌ BAD:  response: any\"\n    echo \"  // ✅ GOOD: response: unknown + validateApiResponse(response, schema)\"\n    echo \"  // ✅ GOOD: response: PropertyResponse (with runtime validation)\"\n    echo \"\\n🔧 Quick fix: Replace 'any' with 'unknown' then add validation\"\n    exit 2\n  fi\nfi"
          },
          {
            "type": "command",
            "command": "#!/bin/bash\n# Incremental build for TypeScript changes\nif [[ \"${CLAUDE_FILE_PATH}\" == */src/*.ts ]] && [[ \"${CLAUDE_FILE_PATH}\" != *test* ]]; then\n  cd /Users/acedergr/Projects/alecs-mcp-server-akamai\n  \n  # Check if we should trigger incremental build\n  if [ -f \"tsconfig.json\" ]; then\n    # Run incremental build in background\n    (\n      npx tsc --incremental --tsBuildInfoFile .tsbuildinfo 2>&1 | \n      grep -E \"error TS|Found [0-9]+ error\" || true\n    ) &\n    echo \"🔨 Incremental build triggered for ${CLAUDE_FILE_PATH##*/}\"\n  fi\nfi"
          },
          {
            "type": "command",
            "command": "#!/bin/bash\n# Auto-update documentation for tool/server changes\nif [[ \"${CLAUDE_FILE_PATH}\" == */tools/*.ts ]] || [[ \"${CLAUDE_FILE_PATH}\" == */servers/*.ts ]]; then\n  cd /Users/acedergr/Projects/alecs-mcp-server-akamai\n  \n  # Run docs update in background\n  (npm run docs:update 2>&1 | grep -E \"Updated|Error\" || true) &\n  echo \"📚 Documentation update triggered\"\nfi"
          },
          {
            "type": "command",
            "command": "#!/bin/bash\n# Run related tests for changed files\nif [[ \"${CLAUDE_FILE_PATH}\" == *.ts ]] && [[ \"${CLAUDE_FILE_PATH}\" != *test* ]] && [[ \"${CLAUDE_FILE_PATH}\" != */*.d.ts ]]; then\n  cd /Users/acedergr/Projects/alecs-mcp-server-akamai\n  \n  # Find related test files\n  if npx jest --listTests --findRelatedTests \"${CLAUDE_FILE_PATH}\" 2>/dev/null | grep -q test; then\n    echo \"🧪 Running related tests...\"\n    # Run in background with summary output\n    (\n      if npx jest --findRelatedTests \"${CLAUDE_FILE_PATH}\" --passWithNoTests 2>&1 | tee /tmp/jest-related.log | grep -E \"PASS|FAIL\"; then\n        passes=$(grep -c \"PASS\" /tmp/jest-related.log || echo 0)\n        fails=$(grep -c \"FAIL\" /tmp/jest-related.log || echo 0)\n        [ $fails -eq 0 ] && echo \"✅ All $passes related tests passed\" || echo \"❌ $fails tests failed\"\n      fi\n      rm -f /tmp/jest-related.log\n    ) &\n  fi\nfi"
          },
          {
            "type": "command",
            "command": "#!/bin/bash\n# Tool documentation header check\nif [[ \"${CLAUDE_FILE_PATH}\" == */tools/*.ts ]] && [[ \"${CLAUDE_FILE_PATH}\" != *test* ]]; then\n  if ! grep -q 'SNOW LEOPARD ARCHITECTURE' \"${CLAUDE_FILE_PATH}\"; then\n    echo \"❌ ERROR: Missing required SNOW LEOPARD ARCHITECTURE documentation header\"\n    echo \"📝 All tool files must include comprehensive documentation per CODE_ANNOTATION.md\"\n    exit 2\n  fi\n  if ! grep -q 'CODE KAI PRINCIPLES' \"${CLAUDE_FILE_PATH}\"; then\n    echo \"❌ ERROR: Missing required CODE KAI PRINCIPLES section\"\n    exit 2\n  fi\nfi"
          },
          {
            "type": "command",
            "command": "#!/bin/bash\n# Multi-customer parameter check\nif [[ \"${CLAUDE_FILE_PATH}\" == */tools/*.ts ]] && [[ \"${CLAUDE_FILE_PATH}\" != *test* ]] && [[ \"${CLAUDE_FILE_PATH}\" != *-registry.ts ]]; then\n  if ! grep -q 'customer?: string' \"${CLAUDE_FILE_PATH}\"; then\n    echo \"⚠️  WARNING: Missing customer parameter - required for multi-tenant support\"\n    echo \"📋 All tools must accept optional customer parameter\"\n  fi\nfi"
          },
          {
            "type": "command",
            "command": "#!/bin/bash\n# API response validation check\nif [[ \"${CLAUDE_FILE_PATH}\" == */tools/*.ts ]] && grep -q 'makeRequest' \"${CLAUDE_FILE_PATH}\" 2>/dev/null; then\n  if ! grep -q 'validateApiResponse' \"${CLAUDE_FILE_PATH}\"; then\n    echo \"⚠️  WARNING: API response validation missing\"\n    echo \"📋 Use validateApiResponse() for all API responses\"\n  fi\n  if ! grep -q 'isValid.*Response' \"${CLAUDE_FILE_PATH}\"; then\n    echo \"⚠️  WARNING: Type guard validation missing\"\n    echo \"📋 Use type guards like isValidPropertyResponse() before processing\"\n  fi\nfi"
          }
        ]
      },
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "#!/bin/bash\n# New tool file registry reminder\nif [[ \"${CLAUDE_FILE_PATH}\" == */tools/*-tools.ts ]] && [[ \"${CLAUDE_FILE_PATH}\" != *-registry.ts ]] && [[ \"${CLAUDE_FILE_PATH}\" != *test* ]]; then\n  tool_name=$(basename \"${CLAUDE_FILE_PATH}\" -tools.ts)\n  echo \"📝 REMINDER: Register new tool functions in src/tools/all-tools-registry.ts\"\n  echo \"   Tool file: ${tool_name}-tools.ts\"\nfi"
          },
          {
            "type": "command",
            "command": "#!/bin/bash\n# Test file creation reminder\nif [[ \"${CLAUDE_FILE_PATH}\" == */tools/*.ts ]] && [[ \"${CLAUDE_FILE_PATH}\" != *test* ]] && [[ \"${CLAUDE_FILE_PATH}\" != *-registry.ts ]]; then\n  base_name=$(basename \"${CLAUDE_FILE_PATH}\" .ts)\n  test_file=\"/Users/acedergr/Projects/alecs-mcp-server-akamai/src/__tests__/tools/${base_name}.test.ts\"\n  if [ ! -f \"$test_file\" ]; then\n    echo \"⚠️  WARNING: No test file found\"\n    echo \"📝 Create test file: src/__tests__/tools/${base_name}.test.ts\"\n  fi\nfi"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "#!/bin/bash\n# Pre-commit quality gate\nif echo \"${CLAUDE_TOOL_PARAMS_COMMAND}\" | grep -qE '^git commit'; then\n  cd /Users/acedergr/Projects/alecs-mcp-server-akamai\n  echo \"🔍 Running pre-commit quality checks...\"\n  \n  # Track failures\n  FAILED=0\n  \n  # TypeScript check\n  echo -n \"  TypeScript: \"\n  if npm run typecheck >/dev/null 2>&1; then\n    echo \"✅\"\n  else\n    echo \"❌\"\n    FAILED=1\n  fi\n  \n  # Linting check\n  echo -n \"  ESLint: \"\n  if npm run lint >/dev/null 2>&1; then\n    echo \"✅\"\n  else\n    echo \"❌\"\n    FAILED=1\n  fi\n  \n  # Quick unit tests\n  echo -n \"  Unit tests: \"\n  if npm run test:unit -- --passWithNoTests >/dev/null 2>&1; then\n    echo \"✅\"\n  else\n    echo \"❌\"\n    FAILED=1\n  fi\n  \n  if [ $FAILED -eq 1 ]; then\n    echo \"\\n❌ Pre-commit checks failed. Fix issues before committing.\"\n    echo \"📋 Run 'npm run typecheck && npm run lint' to see errors\"\n    exit 2\n  fi\n  \n  echo \"\\n✅ All pre-commit checks passed\"\nfi"
          },
          {
            "type": "command",
            "command": "#!/bin/bash\n# Security check for credentials\nif echo \"${CLAUDE_TOOL_PARAMS_COMMAND}\" | grep -qE '(client_secret|access_token|client_token|edgerc.*cat|edgerc.*less|edgerc.*more)'; then\n  echo \"🚫 BLOCKED: Potential credential exposure detected\"\n  echo \"📋 Use environment variables or secure methods for credentials\"\n  exit 2\nfi\n\n# Check for dangerous commands\nif echo \"${CLAUDE_TOOL_PARAMS_COMMAND}\" | grep -qE '(rm -rf /|sudo rm|chmod 777|curl.*eval|wget.*sh)'; then\n  echo \"🚫 BLOCKED: Dangerous command pattern detected\"\n  exit 2\nfi"
          },
          {
            "type": "command",
            "command": "#!/bin/bash\n# Git operations check\nif echo \"${CLAUDE_TOOL_PARAMS_COMMAND}\" | grep -q '^git push'; then\n  echo \"⚠️  WARNING: git push detected - ensure you want to push to remote\"\n  echo \"📋 Current branch: $(cd /Users/acedergr/Projects/alecs-mcp-server-akamai && git branch --show-current)\"\nfi"
          },
          {
            "type": "command",
            "command": "#!/bin/bash\n# Build status check before push\nif echo \"${CLAUDE_TOOL_PARAMS_COMMAND}\" | grep -qE '^git push'; then\n  cd /Users/acedergr/Projects/alecs-mcp-server-akamai\n  \n  # Check if dist is up to date\n  if [ -f \"src/index.ts\" ] && [ -f \"dist/index.js\" ]; then\n    src_time=$(stat -f %m \"src/index.ts\" 2>/dev/null || stat -c %Y \"src/index.ts\" 2>/dev/null)\n    dist_time=$(stat -f %m \"dist/index.js\" 2>/dev/null || stat -c %Y \"dist/index.js\" 2>/dev/null)\n    \n    if [ \"$src_time\" -gt \"$dist_time\" ]; then\n      echo \"⚠️  WARNING: Source files newer than build\"\n      echo \"📋 Run 'npm run build' before pushing\"\n    fi\n  fi\nfi"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "#!/bin/bash\n# Prevent hardcoded secrets\nif [[ \"${CLAUDE_FILE_PATH}\" == *.ts ]] || [[ \"${CLAUDE_FILE_PATH}\" == *.js ]]; then\n  # Create temp file with new content for checking\n  temp_file=$(mktemp)\n  \n  # For Write tool, check the content directly\n  if [ ! -z \"${CLAUDE_TOOL_PARAMS_CONTENT}\" ]; then\n    echo \"${CLAUDE_TOOL_PARAMS_CONTENT}\" > \"$temp_file\"\n  else\n    # For Edit tools, we'll check after the edit\n    exit 0\n  fi\n  \n  # Check for hardcoded secrets\n  if grep -qE '(client_secret|access_token|private_key)\\s*[:=]\\s*[\"'\\''`][a-zA-Z0-9+/]{20,}[\"'\\''`]' \"$temp_file\"; then\n    echo \"🚫 BLOCKED: Hardcoded credentials detected\"\n    echo \"📋 Use environment variables or .edgerc configuration\"\n    rm \"$temp_file\"\n    exit 2\n  fi\n  \n  # Check for account switch keys\n  if grep -qE 'accountSwitchKey\\s*[:=]\\s*[\"'\\''`][A-Z]-[A-Z0-9]+[\"'\\''`]' \"$temp_file\"; then\n    echo \"🚫 BLOCKED: Hardcoded account switch key detected\"\n    rm \"$temp_file\"\n    exit 2\n  fi\n  \n  rm \"$temp_file\"\nfi"
          }
        ]
      }
    ],
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "#!/bin/bash\n# Periodic audit check (runs on notifications)\ncd /Users/acedergr/Projects/alecs-mcp-server-akamai\nif [ -f \"package.json\" ] && grep -q '\"audit:quick\"' package.json; then\n  # Run quick audit and check for critical issues\n  audit_output=$(npm run audit:quick 2>&1 || true)\n  if echo \"$audit_output\" | grep -qE 'CRITICAL|HIGH.*severity'; then\n    echo \"🔴 Critical audit issues detected!\"\n    echo \"📋 Run: npm run audit:fix\"\n  fi\nfi"
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "#!/bin/bash\n# Clean up check on stop\ncd /Users/acedergr/Projects/alecs-mcp-server-akamai\n\n# Check for uncommitted changes\nif git status --porcelain | grep -q '^[MADRC]'; then\n  echo \"📝 Uncommitted changes detected:\"\n  git status --short\nfi\n\n# Check if build is needed\nif [ -f \"tsconfig.json\" ] && find src -name \"*.ts\" -newer dist/index.js 2>/dev/null | grep -q .; then\n  echo \"🔨 Source files changed - consider running: npm run build\"\nfi\n\n# Find temporary files that should be archived\ntemp_files=$(find . -name '*.md' -not -path './docs/*' -not -path './.archive/*' -not -path './node_modules/*' -not -name 'README.md' -not -name 'CLAUDE.md' -not -name 'CODE_ANNOTATION.md' -not -name 'DOCUMENTATION_ARCHITECTURE_PLAN.md' -mtime -1 2>/dev/null)\nif [ ! -z \"$temp_files\" ]; then\n  echo \"📁 Consider archiving these temporary files:\"\n  echo \"$temp_files\" | sed 's/^/   /'\n  echo \"📋 Move to .archive/ directory\"\nfi\n\n# Check for failed tests\nif [ -f \"package.json\" ] && grep -q '\"test\"' package.json; then\n  echo \"📋 Remember to run tests before committing: npm test\"\nfi"
          }
        ]
      }
    ]
  }
}