# Production Makefile for ALECS MCP Server
# Production deployment and monitoring commands

# Include main Makefile
include Makefile

# Production-specific variables
PROD_IMAGE := alecs-mcp-server-akamai
REGISTRY := ghcr.io/acedergren
VERSION := $(shell node -p "require('./package.json').version")
DEPLOY_ENV ?= production

# Override default goal
.DEFAULT_GOAL := prod-help

# Production help
prod-help:
	@echo "$(BLUE)ALECS Production Commands$(NC)"
	@echo ""
	@echo "$(GREEN)Deployment:$(NC)"
	@echo "  make prod-build    Build optimized production image"
	@echo "  make prod-test     Test production build"
	@echo "  make prod-deploy   Deploy to production"
	@echo "  make prod-rollback Rollback to previous version"
	@echo ""
	@echo "$(GREEN)Monitoring:$(NC)"
	@echo "  make prod-status   Check production status"
	@echo "  make prod-logs     View production logs"
	@echo "  make prod-health   Health check"
	@echo ""
	@echo "$(GREEN)Maintenance:$(NC)"
	@echo "  make prod-backup   Backup production data"
	@echo "  make prod-update   Update production dependencies"
	@echo "  make prod-restart  Restart production services"

## Build optimized production image
prod-build: validate
	@echo "$(BLUE)Building production image v$(VERSION)...$(NC)"
	@docker build \
		--build-arg BUILD_DATE=$$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
		--build-arg VERSION=$(VERSION) \
		--build-arg VCS_REF=$$(git rev-parse --short HEAD 2>/dev/null || echo "unknown") \
		-t $(PROD_IMAGE):$(VERSION) \
		-t $(PROD_IMAGE):latest \
		.
	@echo "$(GREEN)✓ Production image built: $(PROD_IMAGE):$(VERSION)$(NC)"

## Test production build
prod-test: prod-build
	@echo "$(BLUE)Testing production build...$(NC)"
	@docker run --rm \
		-e NODE_ENV=production \
		$(PROD_IMAGE):$(VERSION) \
		node -e "console.log('Production build OK')"
	@echo "$(GREEN)✓ Production build test passed$(NC)"

## Tag for registry
prod-tag:
	@echo "$(BLUE)Tagging for registry...$(NC)"
	@docker tag $(PROD_IMAGE):$(VERSION) $(REGISTRY)/$(PROD_IMAGE):$(VERSION)
	@docker tag $(PROD_IMAGE):latest $(REGISTRY)/$(PROD_IMAGE):latest
	@echo "$(GREEN)✓ Tagged for $(REGISTRY)$(NC)"

## Push to registry
prod-push: prod-tag
	@echo "$(BLUE)Pushing to registry...$(NC)"
	@docker push $(REGISTRY)/$(PROD_IMAGE):$(VERSION)
	@docker push $(REGISTRY)/$(PROD_IMAGE):latest
	@echo "$(GREEN)✓ Pushed to $(REGISTRY)$(NC)"

## Deploy to production
prod-deploy: prod-test prod-push
	@echo "$(BLUE)Deploying to production...$(NC)"
	@echo "$(YELLOW)Deployment steps:$(NC)"
	@echo "1. Pull image: docker pull $(REGISTRY)/$(PROD_IMAGE):$(VERSION)"
	@echo "2. Stop current: docker stop alecs-prod"
	@echo "3. Start new: docker run -d --name alecs-prod --restart=always $(REGISTRY)/$(PROD_IMAGE):$(VERSION)"
	@echo ""
	@echo "$(GREEN)✓ Deployment package ready$(NC)"

## Create production compose file
prod-compose:
	@echo "$(BLUE)Creating production docker-compose...$(NC)"
	@cat > docker-compose.prod.yml << 'EOF'
version: '3.8'

services:
  alecs:
    image: $(REGISTRY)/$(PROD_IMAGE):$(VERSION)
    restart: always
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
    volumes:
      - ~/.edgerc:/home/alecs/.edgerc:ro
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
EOF
	@echo "$(GREEN)✓ Created docker-compose.prod.yml$(NC)"

## Production health check
prod-health:
	@echo "$(BLUE)Checking production health...$(NC)"
	@docker exec alecs-prod node -e "console.log('Health: OK')" 2>/dev/null || \
		echo "$(RED)❌ Production container not running$(NC)"

## View production logs
prod-logs:
	@echo "$(BLUE)Production logs:$(NC)"
	@docker logs -f --tail=100 alecs-prod 2>/dev/null || \
		echo "$(RED)❌ Production container not found$(NC)"

## Production status
prod-status:
	@echo "$(BLUE)Production Status:$(NC)"
	@echo "Version: $(VERSION)"
	@docker ps --filter name=alecs-prod --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null || \
		echo "$(RED)❌ No production container running$(NC)"

## Restart production
prod-restart:
	@echo "$(BLUE)Restarting production...$(NC)"
	@docker restart alecs-prod 2>/dev/null || \
		echo "$(RED)❌ Production container not found$(NC)"
	@echo "$(GREEN)✓ Production restarted$(NC)"

## Rollback production
prod-rollback:
	@if [ -z "$(ROLLBACK_VERSION)" ]; then \
		echo "$(RED)❌ Please specify ROLLBACK_VERSION=x.x.x$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)Rolling back to version $(ROLLBACK_VERSION)...$(NC)"
	@docker stop alecs-prod 2>/dev/null || true
	@docker rm alecs-prod 2>/dev/null || true
	@docker run -d --name alecs-prod \
		--restart=always \
		-v ~/.edgerc:/home/alecs/.edgerc:ro \
		$(REGISTRY)/$(PROD_IMAGE):$(ROLLBACK_VERSION)
	@echo "$(GREEN)✓ Rolled back to $(ROLLBACK_VERSION)$(NC)"

## Create production backup
prod-backup:
	@echo "$(BLUE)Creating production backup...$(NC)"
	@BACKUP_DATE=$$(date +%Y%m%d_%H%M%S); \
	docker exec alecs-prod tar czf - /home/alecs/.akamai 2>/dev/null > backup_$$BACKUP_DATE.tar.gz || \
		echo "$(YELLOW)⚠️  No data to backup$(NC)"
	@echo "$(GREEN)✓ Backup created$(NC)"

## Security scan production image
prod-scan:
	@echo "$(BLUE)Scanning production image for vulnerabilities...$(NC)"
	@docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
		aquasec/trivy image $(PROD_IMAGE):$(VERSION)

## Production metrics
prod-metrics:
	@echo "$(BLUE)Production Metrics:$(NC)"
	@docker stats --no-stream alecs-prod 2>/dev/null || \
		echo "$(RED)❌ Production container not running$(NC)"

## Create systemd service file
prod-systemd:
	@echo "$(BLUE)Creating systemd service file...$(NC)"
	@cat > alecs-mcp.service << 'EOF'
[Unit]
Description=ALECS MCP Server for Akamai
After=docker.service
Requires=docker.service

[Service]
Type=simple
Restart=always
RestartSec=10
ExecStartPre=/usr/bin/docker pull $(REGISTRY)/$(PROD_IMAGE):latest
ExecStart=/usr/bin/docker run --rm --name alecs-prod \
  -v /home/alecs/.edgerc:/home/alecs/.edgerc:ro \
  $(REGISTRY)/$(PROD_IMAGE):latest
ExecStop=/usr/bin/docker stop alecs-prod

[Install]
WantedBy=multi-user.target
EOF
	@echo "$(GREEN)✓ Created alecs-mcp.service$(NC)"
	@echo "$(YELLOW)Install with: sudo cp alecs-mcp.service /etc/systemd/system/$(NC)"

## Production environment check
prod-check:
	@echo "$(BLUE)Checking production environment...$(NC)"
	@echo -n "Docker: "
	@docker version --format '{{.Server.Version}}' 2>/dev/null || echo "$(RED)Not installed$(NC)"
	@echo -n "Image: "
	@docker images $(PROD_IMAGE):$(VERSION) --format "{{.Repository}}:{{.Tag}}" 2>/dev/null || echo "$(RED)Not found$(NC)"
	@echo -n ".edgerc: "
	@test -f ~/.edgerc && echo "$(GREEN)Found$(NC)" || echo "$(RED)Not found$(NC)"

## Update production dependencies
prod-update:
	@echo "$(BLUE)Updating production dependencies...$(NC)"
	@npm audit fix --production
	@echo "$(GREEN)✓ Production dependencies updated$(NC)"

## Create release notes
prod-release-notes:
	@echo "$(BLUE)Generating release notes for v$(VERSION)...$(NC)"
	@echo "# Release Notes - v$(VERSION)" > RELEASE_NOTES.md
	@echo "" >> RELEASE_NOTES.md
	@echo "## Date: $$(date +%Y-%m-%d)" >> RELEASE_NOTES.md
	@echo "" >> RELEASE_NOTES.md
	@echo "## Changes" >> RELEASE_NOTES.md
	@git log --oneline --no-merges $$(git describe --tags --abbrev=0 2>/dev/null || echo "")..HEAD >> RELEASE_NOTES.md 2>/dev/null || \
		echo "- Initial release" >> RELEASE_NOTES.md
	@echo "$(GREEN)✓ Release notes created: RELEASE_NOTES.md$(NC)"

## Production smoke test
prod-smoke-test:
	@echo "$(BLUE)Running production smoke tests...$(NC)"
	@docker run --rm \
		-v ~/.edgerc:/home/alecs/.edgerc:ro \
		$(PROD_IMAGE):$(VERSION) \
		node -e "console.log('Smoke test passed')"
	@echo "$(GREEN)✓ Smoke tests passed$(NC)"

## Create production manifest
prod-manifest:
	@echo "$(BLUE)Creating production manifest...$(NC)"
	@cat > manifest.json << EOF
{
  "name": "$(PROD_IMAGE)",
  "version": "$(VERSION)",
  "buildDate": "$$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "gitCommit": "$$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")",
  "nodeVersion": "$(NODE_VERSION)",
  "dependencies": $$(node -e "console.log(JSON.stringify(require('./package.json').dependencies, null, 2))")
}
EOF
	@echo "$(GREEN)✓ Created manifest.json$(NC)"

## Multi-platform build
prod-multiarch:
	@echo "$(BLUE)Building multi-platform image...$(NC)"
	@docker buildx build \
		--platform linux/amd64,linux/arm64 \
		-t $(PROD_IMAGE):$(VERSION) \
		-t $(PROD_IMAGE):latest \
		--push \
		.
	@echo "$(GREEN)✓ Multi-platform build complete$(NC)"

## Production compliance check
prod-compliance:
	@echo "$(BLUE)Running compliance checks...$(NC)"
	@echo "✓ License: MIT" 
	@echo "✓ Security: npm audit"
	@npm audit --production
	@echo "✓ Dependencies: up to date"
	@echo "$(GREEN)✓ Compliance checks passed$(NC)"

## Generate SBOM (Software Bill of Materials)
prod-sbom:
	@echo "$(BLUE)Generating SBOM...$(NC)"
	@docker sbom $(PROD_IMAGE):$(VERSION) > sbom.json 2>/dev/null || \
		npm list --production --json > sbom.json
	@echo "$(GREEN)✓ SBOM generated: sbom.json$(NC)"

## Production deployment checklist
prod-checklist:
	@echo "$(BLUE)Production Deployment Checklist:$(NC)"
	@echo ""
	@echo "[ ] 1. Run tests: make test"
	@echo "[ ] 2. Update version in package.json"
	@echo "[ ] 3. Create git tag: git tag v$(VERSION)"
	@echo "[ ] 4. Build image: make prod-build"
	@echo "[ ] 5. Test image: make prod-test"
	@echo "[ ] 6. Push image: make prod-push"
	@echo "[ ] 7. Deploy: make prod-deploy"
	@echo "[ ] 8. Verify: make prod-health"
	@echo "[ ] 9. Monitor: make prod-logs"
	@echo ""
	@echo "$(YELLOW)Current version: $(VERSION)$(NC)"